<?xml version="1.0" encoding="UTF-8"?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your blog. -->
<!-- It contains information about your blog's posts, comments, and categories. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your blog. -->

<!-- To import this information into a WordPress blog follow these steps. -->
<!-- 1. Log in to that blog as an administrator. -->
<!-- 2. Go to Tools: Import in the blog's admin panels (or Manage: Import in older versions of WordPress). -->
<!-- 3. Choose "WordPress" from the list. -->
<!-- 4. Upload this file using the form provided on that page. -->
<!-- 5. You will first be asked to map the authors in this export file to users -->
<!--    on the blog.  For each author, you may choose to map to an -->
<!--    existing user on the blog or to create a new user -->
<!-- 6. WordPress will then import each of the posts, comments, and categories -->
<!--    contained in this file into your blog -->

<!-- generator="WordPress.com" created="2011-01-04 12:49"-->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.0/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.0/"
>

<channel>
	<title>Grails Inside</title>
	<link>http://andresteingress.wordpress.com</link>
	<description>Grails, Groovy and Related Technologies</description>
	<pubDate>Thu, 23 Dec 2010 17:05:02 +0000</pubDate>
	<generator>http://wordpress.org/?v=MU</generator>
	<language>en</language>
	<wp:wxr_version>1.0</wp:wxr_version>
	<wp:base_site_url>http://wordpress.com/</wp:base_site_url>
	<wp:base_blog_url>http://andresteingress.wordpress.com</wp:base_blog_url>
		<wp:category><wp:category_nicename>announcement</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[announcement]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>ast-transformations</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[ast transformations]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>basic</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[basic]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>books</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[books]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>constraints</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[constraints]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>grails</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[grails]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>groovy</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[groovy]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>hibernate</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[hibernate]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>intro</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Intro]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>patterns</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[patterns]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>plugins</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[plugins]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>spring-framework</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[spring framework]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>structuring</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[structuring]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>uncategorized</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>gcontracts</wp:category_nicename><wp:category_parent>groovy</wp:category_parent><wp:cat_name><![CDATA[gcontracts]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>releases</wp:category_nicename><wp:category_parent>gcontracts</wp:category_parent><wp:cat_name><![CDATA[releases]]></wp:cat_name></wp:category>
			<wp:tag><wp:tag_slug>books</wp:tag_slug><wp:tag_name><![CDATA[books]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>groovy</wp:tag_slug><wp:tag_name><![CDATA[groovy]]></wp:tag_name></wp:tag>
			<wp:term><wp:term_taxonomy>nav_menu</wp:term_taxonomy><wp:term_slug>gcontracts-2</wp:term_slug><wp:term_parent></wp:term_parent><wp:term_name><![CDATA[GContracts]]></wp:term_name></wp:term>
	
	<generator>http://wordpress.com/</generator>
<cloud domain='andresteingress.wordpress.com' port='80' path='/?rsscloud=notify' registerProcedure='' protocol='http-post' />
<image>
		<url>http://s2.wp.com/i/buttonw-com.png</url>
		<title>Grails Inside</title>
		<link>http://andresteingress.wordpress.com</link>
	</image>
	<atom:link rel="search" type="application/opensearchdescription+xml" href="http://andresteingress.wordpress.com/osd.xml" title="Grails Inside" />
	<atom:link rel='hub' href='http://andresteingress.wordpress.com/?pushpress=hub'/>

		<item>
		<title>Null Object Pattern Revised</title>
		<link>http://andresteingress.wordpress.com/?p=446</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://andresteingress.wordpress.com/?p=446</guid>
		<description></description>
		<content:encoded><![CDATA[Whenever you are working with a programming language which introduced a common bottom-type in its class hierarchy, e.g. <tt>java.lang.Void</tt> in Java, you might be interested in a pattern called the <b>Null Object Pattern</b>.

The null object is an instance of the bottom-type which has neutral behavior. In contrast to Java's implementation, a method call on the null object should not raise an exception.

Due to Groovy's dynamic abilities it is easy to implement a dynamic null object which complies to arbitrary interfaces and implements all methods with no operational code - doing nothing.



]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>446</wp:post_id>
		<wp:post_date>2010-05-10 20:16:34</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1273518995]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[13220543]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>groovy.lang.GString</title>
		<link>http://andresteingress.wordpress.com/?p=4</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[basic]]></category>

		<category domain="category" nicename="basic"><![CDATA[basic]]></category>

		<category><![CDATA[groovy]]></category>

		<category domain="category" nicename="groovy"><![CDATA[groovy]]></category>

		<guid isPermaLink="false">http://andresteingress.wordpress.com/?p=4</guid>
		<description></description>
		<content:encoded><![CDATA[<span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">groovy.lang.GString</span><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;">&nbsp;kommt im Groovy SDK, sowie in Grails eine besondere Bedeutung zu. Dies liegt vor allem in der exzessiven Benutzung, sowie aber auch an der Eleganz der darin definierten Methoden, die jene von java.lang.String erweitern.</span><br /><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;"><br /></span><br /><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;"><br /></span>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4</wp:post_id>
		<wp:post_date>2010-02-23 14:42:00</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>blogger_blog</wp:meta_key>
		<wp:meta_value><![CDATA[grails-inside.blogspot.com]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>blogger_author</wp:meta_key>
		<wp:meta_value><![CDATA[Andre Steingress]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>blogger_d263388631120bb7ee0fc300fe57c4e6_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[6406818924423314312]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Dynamisch Typisierte Programmiersprachen</title>
		<link>http://andresteingress.wordpress.com/?p=6</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[basic]]></category>

		<category domain="category" nicename="basic"><![CDATA[basic]]></category>

		<guid isPermaLink="false">http://andresteingress.wordpress.com/?p=6</guid>
		<description></description>
		<content:encoded><![CDATA[Zu den grundlegensten Konzepten der in der Praxis verwendeten Programmiersprachen zählt die Typ-Theorie. Um ein prinzipielles Verständnis für die Verwendung und die Daseinsberechtigung von dynamischtypisierten Programmiersprachen wie Groovy schaffen, soll an dieser Stelle ein kurzer Abriss über Typ-Theorie, Typisierung und statische/dynamische Typisierung gegeben werden.<br /><br /><span class="Apple-style-span" style="font-size:x-large;">Typ-Theorie</span><br /><span class="Apple-style-span" style="font-size:x-large;"><br /></span><br />Die am heutigen Markt dominierenden Programmiersprachen bedienen sich vorrangig der Typ-Theorie. Diese geht von einer Kapselung der eigentlichen Daten aus. Die Kapselung der Daten kann vom Programmierer festgelegt werden (Information Hiding), überlicherweise sind diese nur über Operationen abrufbar bzw. veränderbar.<br /><br />Waren in den 70er Jahren vor allem prozedurale Programmiersprachen im Vormarsch, so waren Mitte der 80er bis in die späten 90er die objekt-orientierten Programmiersprachen in aller Munde. In der Theorie durchaus von unterschiedlichen Konzepten getrennt, setzte sich in der Praxis jedoch durch eine sanfte Evolution der bestehenden Sprachen mehr eine hybrid-form beider Programmierkonzepte durch, die bis in heutige Programmiersprachen wie Java oder C# .NET fortbestand haben.<br /><br /><br /><br />Bei der Referenzierung von Variablen kann in typisierten Programmiersprachen zwischen zwei Arten der sog. Typisierung unterschieden werden: "statische" und "dynamische" Typisierung. Statische Typisierung bezieht sich auf jene Art der Typbestimmung, die bereits zur Kompiliertzeit festgelegt wird. Der Typ einer Variablen wird somit nicht zur Laufzeit eines Programmes mitgeführt, sondern bereits zur Kompilierzeit im Programmcode festgelegt.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6</wp:post_id>
		<wp:post_date>2010-03-01 20:13:00</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>blogger_blog</wp:meta_key>
		<wp:meta_value><![CDATA[grails-inside.blogspot.com]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>blogger_author</wp:meta_key>
		<wp:meta_value><![CDATA[Andre Steingress]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>blogger_d263388631120bb7ee0fc300fe57c4e6_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[1618816279186079444]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Groovlets - Groovy goes Web</title>
		<link>http://andresteingress.wordpress.com/?p=7</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://andresteingress.wordpress.com/?p=7</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>7</wp:post_id>
		<wp:post_date>2010-03-01 20:55:00</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>blogger_blog</wp:meta_key>
		<wp:meta_value><![CDATA[grails-inside.blogspot.com]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>blogger_author</wp:meta_key>
		<wp:meta_value><![CDATA[Andre Steingress]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>blogger_d263388631120bb7ee0fc300fe57c4e6_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[1255572237617617341]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Thoughts on Contracts Part I</title>
		<link>http://andresteingress.wordpress.com/?p=688</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[basic]]></category>

		<category domain="category" nicename="basic"><![CDATA[basic]]></category>

		<category><![CDATA[gcontracts]]></category>

		<category domain="category" nicename="gcontracts"><![CDATA[gcontracts]]></category>

		<category><![CDATA[Intro]]></category>

		<category domain="category" nicename="intro"><![CDATA[Intro]]></category>

		<guid isPermaLink="false">http://andresteingress.wordpress.com/?p=688</guid>
		<description></description>
		<content:encoded><![CDATA[Recently I've been asked quite a few times about why and how GContracts [<a href="http://github.com/andresteingress/gcontracts">0</a>] should be used in practice, in real-world projects, and what the benefit of using it would be. In general, in most of the talks I've actually sensed enthusiasm for using DbC but most programmers also seeemd quite reserved when it was about actually getting their hands on it.

I thought a lot about how GContracts can be utilized to enforce software quality and raise stability of software components. In this article series I want to share my thoughts with you - feel free to give feedback in the comments section(s).

<h4>How it started or Getting Used to Internal Resistence</h4>

The first time I've read about Design by Contract(tm) was during my study of Software Engineering. Although I did not participate in "real" software development projects at that time (that is PHP projects) I instantly realized that the concept of embedding specifications into source code was ground-breaking. Unfortunately, as I started to work mainly on JEE projects, I realized that in practice, most programmers did not even had a clue about these concepts. Even worse, once I've told them the basic concepts, no one seemd to think of what would be possible to do with it, but most of them were looking for arguments against using it. Maybe this is a very European/Austrian way of confronting yourself with new things - questioning why not to use it in first place, instead of giving new things a try. None the less, what makes people actually use inventions than? 

From my point of view, it are the following three points that make programmers use new technology or not:

<ul><lI>need</li><li>understanding</li><li>simplicity</li></ul>

Let's take <strong>unit testing</strong> for example. Only a few years ago, we've learned about desktop/paper tests, functional tests, but no one imagined that a simple test-framework (like JUnit) - as a result of new project methodologies -  would fundamentally change the way we develop software components. 

Lately, I've independently been in a large JEE project where programmers constantly refused to write unit tests or follow a test-first approach. I really tried to convince them with well-known arguments, but what really turned the stone was to write unit-tests for the most important components, install a continuous build management system and just start working with a testing framework. As soon as the first unit tests failed, due to the continuous build management system, the first programmers got convinced that testing could be really valuable, especially when it gets to refactoring production software. Based on that experience, I realized that simply waiting for new technologies to adopt is not enough - one really has to invest a lot of energy to help people bridge the gap between internal resistence and enthusiasm.

Back to GContracts. As it has been the case with unit testing in one of my projects, it's the same with using GContracts in other projects. As long as you simply tell people to use it, they won't be using it. 

The next articles in this series will hopefully answers some of the raised questions - based on real world examples from some of my current projects.

[0] <a href="http://github.com/andresteingress/gcontracts">GContracts - Contract-Oriented Programming for Groovy</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>688</wp:post_id>
		<wp:post_date>2010-07-22 06:39:08</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[13220543]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1279777156]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title></title>
		<link>http://andresteingress.wordpress.com/?p=939</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<guid isPermaLink="false">http://andresteingress.wordpress.com/?p=939</guid>
		<description></description>
		<content:encoded><![CDATA[ ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>939</wp:post_id>
		<wp:post_date>2010-11-19 08:20:32</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>883</wp:post_parent>
		<wp:menu_order>1</wp:menu_order>
		<wp:post_type>nav_menu_item</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_menu_item_type</wp:meta_key>
		<wp:meta_value><![CDATA[taxonomy]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_menu_item_object_id</wp:meta_key>
		<wp:meta_value><![CDATA[33500439]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_menu_item_object</wp:meta_key>
		<wp:meta_value><![CDATA[category]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_menu_item_target</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_menu_item_classes</wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_menu_item_xfn</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_menu_item_url</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_menu_item_orphaned</wp:meta_key>
		<wp:meta_value><![CDATA[1290151234]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Domain-Driven Design in Grails Applications</title>
		<link>http://andresteingress.wordpress.com/?p=1022</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[grails]]></category>

		<category domain="category" nicename="grails"><![CDATA[grails]]></category>

		<category><![CDATA[groovy]]></category>

		<category domain="category" nicename="groovy"><![CDATA[groovy]]></category>

		<category><![CDATA[patterns]]></category>

		<category domain="category" nicename="patterns"><![CDATA[patterns]]></category>

		<guid isPermaLink="false">http://andresteingress.wordpress.com/?p=1022</guid>
		<description></description>
		<content:encoded><![CDATA[Recently there has been a discussion whether embedding behavior into Grails domain classes is considered to be a good or bad thing in the Grails user mailinglist [<a href="http://grails.1312388.n4.nabble.com/Guidelines-for-embedding-logic-into-domain-classes-td3160113.html">0</a>]. Personally, I ran about this problem a few times myself so I though it would be time for some clarification on that topic.

<h4>Domain-Driven Design</h4>

Domain-Driven Design is a software development approach mainly influenced and pushed by Eric Evans [<a href="http://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215/">1</a>]. It is not a separate methodology like XP or Scrum, but it covers a set of techniques, patterns and thinking/mental models which help to design better software in terms of maintainability and extendability. 

The heart of DDD is to extract the domain-model of an application into a logically and technically independent layer. The beauty of this approach is that one can fully utilize object-orientation and all of its advantages (modularization, reusability, extendability, maintainability, etc.) to create an application's domain-model. If the domain-model can be completely separated from infrastructure (e.g. the o/r mapping framework, messaging brokers etc.), view-layer, etc. techniques such as test-driven development and design by contract fully come into play. 

The subtitle of Eric Evans' book is "Tackling Complexity in the Heart of Software". It hints a very important fact: extracting a domain-model in a separate layer does not come for free and it depends on the application requirements whether it makes sense to apply DDD or not. Of course, each application has to some degree some sort of business logic embedded somewhere in the code, but there are applications in which business logic can become quite complex due to changing requirements, ongoing extensions or even due to the complexity of use-cases. It does not make sense to blindly introduce DDD for your application, think of the extreme programming saying: "always do the simplest thing which could possibly work next". 

It could be that your application has the need for a clean, separate and well-tested domain model, but it could also be that it would simply be overkill to do that. It always depends on whether your application's domain is complex or not. If it gets complex by time you can always refactor and introduce a domain model which encapsulates already existing business code.

<h4>Amnemic Model, Transaction Scripts and other Patterns</h4>

There are a bunch of patterns which are considered to be Anti-Patterns by DDD advocates. I'll deal with the Amnemic Model and the Transaction Script pattern in this article. These are two models which are numerusly cited when it comes to introducing a "rich" domain model. 

The Amnemic Model was introduced by Martin Fowler and is best described the following way [<a href="http://martinfowler.com/bliki/AnemicDomainModel.html">2</a>]:

<blockquote>
The basic symptom of an Anemic Domain Model is that at first blush it looks like the real thing. There are objects, many named after the nouns in the domain space, and these objects are connected with the rich relationships and structure that true domain models have. The catch comes when you look at the behavior, and you realize that there is hardly any behavior on these objects, making them little more than bags of getters and setters. Indeed often these models come with design rules that say that you are not to put any domain logic in the the domain objects. Instead there are a set of service objects which capture all the domain logic. These services live on top of the domain model and use the domain model for data.
</blockquote>

To be honest, the weird thing is that the amnemic domain model seems to be one of the most used ones in current applications - at least those I've been involved with. Let's take a typical Grails application for example. All domain classes within the domain directory are typically amnemic domain classes - consisting of properties and additional meta-data, often solely used for persistency. Business code can often be found within service classes, which exactly resembles what Fowler describes in its "transaction script" anti-pattern. 

<blockquote>Most business applications can be thought of as a series of transactions. A transaction may view some information as organized in a particular way, another will make changes to it. Each interaction between a client system and a server system contains a certain amount of logic. In some cases this can be as simple as displaying information in the database. In others it may involve many steps of validations and calculations.

A Transaction Script organizes all this logic primarily as a single procedure, making calls directly to the database or through a thin database wrapper. Each transaction will have its own Transaction Script, although common subtasks can be broken into subprocedures.</blockquote>

So it seems we are quite stuck if we wanted to apply DDD in a Grails application, but are we?

<h4>DDD and Grails</h4>

First of all, Grails is a web application framework which has been greatly influenced by Ruby on Rails. The primary focus on Grails is to let developers quickly create application artifacts and to use convention over configuration whereever possible to minimize the amount of programming work. So how does DDD fit into that picture?

In fact, it seems to be a common misunderstanding that applying DDD principles can only be done in well-fitted frameworks which already follow a similiar approach. Instead of relying on certain behavior or assumptions about our chosen frameworks we should implement the core domain model without further dependencies. Of course, there are always exceptions: there might be times when the core functionality will deeply be integrated with a third party library, but let's just consider we have a deep and complex business logic not relying on another library.

But let us come back to our Grails application example. In a Grails application it is of course qualified to use a rich domain model - the only question which remains is how to integrate the domain model into a Grails application.

<h4>Don't fight the framework</h4>

It is not advisable to fight the framework you're supposed to work with. Grails for example provides great benefits in terms of developer productivity, so it would be optimal to use that advantage even in DDD driven applications. 

<h4>Use Packages for Layering</h4>

Its best to use a packaging naming convention which resambles the different application layers. ...

<h4>Services to the rescue</h4>

Although Grails service classes can be seen as reincarnation of transaction scripts, they can also be seen as application layer services. The application layer can be seen as bridge between the external world (UI, remote service, web service) and your domain model. One approach would be to use service classes as central conversion services between Grails domain classes (being active records) and the domain model. Whether it is a session- or request-scoped domain model is application specific, but I feel better when not having to deal with session persistence and multi-threading issues.

[sourcecode language="groovy"]
class ApplicationService {

  def create_new_tweet(User user, Message msg)  {
    
     def dUser = DomainLayer.create(user)
     def dMsg  = DomainLayer.create(msg)

     new TweetService().tweet(dUser, dMsg)    // sends tweet via API and locally stores tweet
  }

  def get_latest_tweets(User user)  {
    def dTweets = new TweetService().latestTweets(DomainLayer.create(user))
    return DomainLayer.unwrap(dTweets)
  }
}
[/sourcecode]

As you can see from the code-sample above, there is always some utility needed that translates between Grails domain entities and the domain entities of the domain model. Not a perfect solution in terms of memory consumption and the additional low-level code for translating entities between one or the other layer.

It might be that such an architecture pays off in large scale enterprise solutions, but one has to carefully consider the additional effort for creating a conversion layer and the conversion ...

Another approach would be to simply handle Grails domain classes as domain classes in the sense of DDD. 

[sourcecode language="groovy"]
package org.ast.domain

class TwitterAccount {

  String username
  URL    homepage
  
  def twitterApiService

  def tweet(Message msg)  {
    def session = twitterApiService.authenticate username, 'xxx'
    session.tweet user.name, msg.text
  }
}

// usage:
def twitterAccount = twitterAccountRepository.find('sternegross')
twitterAccount.tweet('this is a message')
[/sourcecode]

Although this feels quite natural there are a few gotchas you have to remind if you apply this approach:

<ul>
<li>Generated Properties - Grails generates properties for the underlying GORM classes at runtime. Those won't be available without mocking in your unit tests</li>
<li>Associations between entities - Grails also creates properties for association collections if these need to be stored by GORM. Whenever executing unit tests those collection properties won't be available.</li>
<li>Grails services vs. DDD services - Service classes in Grails are transactional pre-se. Although it is possible to turn that default behavior of, it would be advisable to handle DDD services in a separate package outside of the services directory</li>
<li>Leaking Modularization - whenever working with Groovy you need to be aware that private visible instance variables </li>
</ul>

[0] <a href="http://grails.1312388.n4.nabble.com/Guidelines-for-embedding-logic-into-domain-classes-td3160113.html">Grails User Mailinglist Nabble</a>
[1] <a href="http://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215/">Domain-Driven Design, Eric Evans</a>
[2] <a href="http://martinfowler.com/bliki/AnemicDomainModel.html">The Amnemic Domain Model</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1022</wp:post_id>
		<wp:post_date>2010-12-28 16:18:29</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1293549510:13220543]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[13220543]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Implementing a @Serializable annotation with Groovy AST transformations</title>
		<link>http://andresteingress.wordpress.com/2010/03/16/implementing-a-serializable-annotation-with-groovy-ast-transformations/</link>
		<pubDate>Tue, 16 Mar 2010 19:32:00 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[ast transformations]]></category>

		<category domain="category" nicename="ast-transformations"><![CDATA[ast transformations]]></category>

		<category><![CDATA[grails]]></category>

		<category domain="category" nicename="grails"><![CDATA[grails]]></category>

		<category><![CDATA[groovy]]></category>

		<category domain="category" nicename="groovy"><![CDATA[groovy]]></category>

		<guid isPermaLink="false">http://andresteingress.wordpress.com/2010/03/16/implementing-a-serializable-annotation-with-groovy-ast-transformations</guid>
		<description></description>
		<content:encoded><![CDATA[Groovy 1.6 provides hooks to intercept the compilation process and modify the generated AST (abstract syntax tree).<br /><br />There are two categories of AST transformations:<br /><ul><li>global transformations&nbsp;</li><li>local transformations</li></ul><div>This blog-post deals with local transformations. A local AST transformation is usually done in three steps:</div><div><br /></div><div><ol><li>you have to implement an annotation that marks a code fragement for AST transformation. the chosen code fragement depends on you transformation's functionality. In my case, i just wanted a <span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">@Serializable</span> annotation instead of using Java's <span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">java.io.Serializable</span> interface, so that <span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">@Serializable</span> annotation is ment to be applied at <span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">ElementType.TYPE</span> level. If your use-case is a different one, of course you could choose other element-type levels.</li><li>you actually have to implement the AST transformation. this is done by implementing the <span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">org.codehaus.groovy.transform.ASTTransformation</span> interface.</li><li>you have to wire your custom annotation with your AST transformation implementation of step 2. this is done by using the <span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">@GroovyASTTransformationClass</span> annotation (a meta-annotation) with the complete path to your ast-transformation class.</li></ol><div><br /></div><div>In the end, applying the <span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">@Serializable</span> annotation is as simple as specifying the annotation on some Groovy class</div><div><br /></div><div><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">@Serializable</span></div><div><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">class User {</span></div><div><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">&nbsp;&nbsp;// ...</span></div><div><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">}</span></div><div><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;"><br /></span></div><div><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;">The implementation of step 1) is just a simple annotation declaration</span></div><div><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;"><br /></span></div><div><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;"><div><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">@Retention(RetentionPolicy.SOURCE)</span></div><div><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">@Target(ElementType.TYPE)</span></div><div><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">@GroovyASTTransformationClass("org.nlr.annotations.SerializableASTTransformation")</span></div><div><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">public @interface Serializable {</span></div><div><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">}</span></div></span></div><div><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;"><br /></span></div><div><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;">and the transformation code is as simple as</span></div><div><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;"><br /></span></div><div><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;"><div><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">@GroovyASTTransformation(phase= CompilePhase.SEMANTIC_ANALYSIS)</span></div><div><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">public class SerializableASTTransformation implements ASTTransformation {</span></div><div><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;"><br /></span></div><div><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">&nbsp;&nbsp; &nbsp;public void visit(ASTNode[] nodes, SourceUnit source) {</span></div><div><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;if (!(nodes[0] instanceof AnnotationNode) || !(nodes[1] instanceof AnnotatedNode)) {</span></div><div><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;throw new RuntimeException("Internal error: wrong types: $node.class / $parent.class");</span></div><div><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;}</span></div><div><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;"><br /></span></div><div><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;AnnotatedNode parent = (AnnotatedNode) nodes[1];</span></div><div><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;AnnotationNode node = (AnnotationNode) nodes[0];</span></div><div><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;"><br /></span></div><div><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;if (parent instanceof ClassNode) {</span></div><div><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ClassNode classNode = (ClassNode) parent;</span></div><div><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;"><br /></span></div><div><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;classNode.addInterface(ClassHelper.make(java.io.Serializable.class));</span></div><div><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;}</span></div><div><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">&nbsp;&nbsp; &nbsp;}</span></div><div><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">}</span></div><div><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;"><br /></span></div><div>Notice, that the specified compile phase is "semantic analysis" - a property of local transformations is that they can only be applied in "semantic analysis" compilation phase or above.</div><div><br /></div><div>If you take a look at the generated (disassembled) byte-code you'll see that the User class's byte-code now implements <span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">java.io.Serializable</span>.<br /><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;"><br /></span></div><div><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;"><div>public class org.nlr.domain.User extends java.lang.Object implements java.io.Serializable,groovy.lang.GroovyObject{</div><div>&nbsp;&nbsp; &nbsp;public static final java.lang.Class $ownClass;</div><div>&nbsp;&nbsp; &nbsp;java.lang.Long id;</div><div>&nbsp;&nbsp; &nbsp;java.lang.Long version;</div><div>&nbsp;&nbsp; &nbsp;java.util.Set registrations;</div><div>&nbsp;&nbsp; &nbsp;...<br /><br /></div></span></div></span></div></div><div><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;">[0]&nbsp;<a href="http://groovy.codehaus.org/Local+AST+Transformations">http://groovy.codehaus.org/Local+AST+Transformations</a></span></div><div><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;">[1]&nbsp;<a href="http://groovy.codehaus.org/Global+AST+Transformations">http://groovy.codehaus.org/Global+AST+Transformations</a></span><br /><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;"><br /></span><br /><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;"><br /></span></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>8</wp:post_id>
		<wp:post_date>2010-03-16 19:32:00</wp:post_date>
		<wp:post_date_gmt>2010-03-16 19:32:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>implementing-a-serializable-annotation-with-groovy-ast-transformations</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>blogger_blog</wp:meta_key>
		<wp:meta_value><![CDATA[grails-inside.blogspot.com]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>blogger_author</wp:meta_key>
		<wp:meta_value><![CDATA[Andre Steingress]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>blogger_d263388631120bb7ee0fc300fe57c4e6_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[7604493040193044615]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>reddit</wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"count";s:1:"0";s:4:"time";s:10:"1293719833";}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1276852432]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>70</wp:comment_id>
		<wp:comment_author><![CDATA[Unit Testing Groovy AST Transformations &laquo; Grails Inside]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://andresteingress.wordpress.com/2010/06/18/unit-testing-groovy-ast-transformations/</wp:comment_author_url>
		<wp:comment_author_IP>76.74.248.143</wp:comment_author_IP>
		<wp:comment_date>2010-06-18 10:02:13</wp:comment_date>
		<wp:comment_date_gmt>2010-06-18 09:02:13</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] of global and local AST transformations have already been described in a separate blog-post [0] and will not be part of this [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>Structuring Grails Projects</title>
		<link>http://andresteingress.wordpress.com/2010/03/19/structuring-grails-projects/</link>
		<pubDate>Fri, 19 Mar 2010 07:57:00 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[grails]]></category>

		<category domain="category" nicename="grails"><![CDATA[grails]]></category>

		<category><![CDATA[plugins]]></category>

		<category domain="category" nicename="plugins"><![CDATA[plugins]]></category>

		<category><![CDATA[structuring]]></category>

		<category domain="category" nicename="structuring"><![CDATA[structuring]]></category>

		<guid isPermaLink="false">http://andresteingress.wordpress.com/2010/03/19/structuring-grails-projects</guid>
		<description></description>
		<content:encoded><![CDATA[<b>A Plain Project</b><br /><br /><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;">Creating a Grails project is damn easy. Just run</span><br /><br /><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">grails create-app <br /></span><br /><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;">and Grails will create the initial project structure with the </span><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">grails-app</span><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;"> folder. The </span><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">grails-app</span><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;"> folder indeed is not just a simple folder but resembles the "convention over configuration" approach - meaning that each folder within it has a predefined meaning to the grails web application framework.</span><br /><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;"><br /></span><br /><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;">So far so good. But there are times when you are working on applications that go beyond the simple CRUD application style - some call them "enterprise applications". I guess there is no unique definition of what it really means for an application to be an "enterprise application", but there is at least one thing you as a software developer will have to come up with: structuring your application into several components.</span><br /><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;"><br /></span><br /><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;">Grails indeed has a neat mechanism that supports structuring your applications into several components: plugins.</span><br /><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;"><br /></span><br /><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;"><b>The Plugin Concept</b></span><br /><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;"><br /></span><br /><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;">You might already know that there are hundreds of Grails plugins available - just take a look at <a href="http://grails.org/plugins">http://grails.org/plugins</a>. Even we know plugins of being an integration gateway to other frameworks such as Compass, Spring WebFlow, etc. they can be seen as a great mechanism to create independent components within your application too.&nbsp;</span><br /><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;"><br /></span><br /><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;">Let's assume i wanted a component which encapsulates and holds my application's business domain. In my project's folder I already created the main project by running&nbsp;</span><br /><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;"><br /></span><br /><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">grails create-app GrailsEnterpriseApplication</span><br /><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;"><br /></span><br /><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;">In order to create a separate component for my domain model, i would create a new plugin with</span><br /><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;"><br /></span><br /><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">grails create-plugin GrailsEnterpriseDomain</span><br /><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;"><br /></span><br /><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;">After executing these steps, the overall project's structure will look like this (i.e. in IntelliJ)</span><br /><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;"><br /></span><br /><div class="separator" style="clear:both;text-align:center;"><a href="http://andresteingress.files.wordpress.com/2010/03/test.png" style="margin-left:1em;margin-right:1em;"><img border="0" height="243" src="http://andresteingress.files.wordpress.com/2010/03/test.png?w=300" width="640" /></a></div><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;"><br /></span><br /><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;"><br /></span><br /><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;"><span class="Apple-style-span" style="font-size:small;"><i>Hint: just ignore the two tomcat plugin projects, Grails 1.2.1 defines dependencies on it when creating apps and plugins.</i>&nbsp;</span></span><br /><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;"><br /></span><br /><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;">Since every Grails plugin in fact is a Grails application we can use all the creation and generation commands available in Grails from within that project. For example, running</span><br /><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;"><br /></span><br /><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">grails create-domain-class org.ast.User</span><br /><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;"><br /></span><br /><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;">on the GrailsEnterpriseDomain project will create a new domain class User and the according unit tests in our application's domain plugin. This means that it's possible for another group of developers to work independently on that component, without any restrictions on testing, creating artifacts and so forth.</span><br /><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;"><br /></span><br /><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;">So far we have not defined a reference between the main project and the plugin. In Grails 1.2.1 this can be done with an entry in the application.properties file in the main project:</span><br /><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;"><br /></span><br /><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">plugins.grails-enterprise-domain=0.1</span><br /><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;"><br /></span><br /><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;">This line in fact means that our </span><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">GrailsEnterpriseApplication</span><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;"> depends on version 0.1 (the initial version) of our </span><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">GrailsEnterpriseDomain</span><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;"> plugin.</span><br /><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;"><br /></span><br /><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;">The last step for being able to reference our custom plugin at runtime is the execution of the&nbsp;</span><br /><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;"><br /></span><br /><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">grails package-plugin</span><br /><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;"><br /></span><br /><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;">command on the GrailsEnterpriseDomain project. This command create a zip archive of your plugin but more importantely a </span><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">plugin.xml</span><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;"> file which later on is used by the main application on bootstrap, for loading and resolving possible dependencies of our domain plugin. So if our domain plugin would depend on other plugins, Grails would resolve those dependencies on application startup.</span><br /><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;"><br /></span><br /><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;">There are several commands and configuration settings to define plugin repositories and push plugins to them, but as it is the case here we just want to use our domain plugin without packaging and deploying it, as this is the case when the initial development work is done. Luckily there is a configuration setting in Grails 1.2.1's </span><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">BuildConfig.groovy </span><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;">which allows the specification of local unpackaged plugins:</span><br /><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;"><br /></span><br /><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">grails.plugin.location.'grails-enterprise-domain' = "../GrailsEnterpriseDomain"</span><br /><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;"><br /></span><br /><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;">When adding this line to the GrailsEnterpriseApplication's </span><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">B</span><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">uildConfig.groovy</span><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;">, Grails on startup instead of using plugin repositories makes a local file system lookup to load the </span><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">grails-enterprise-domain </span><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;">plugin.</span><br /><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;"><br /></span><br /><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;">As a consequence running i.e.&nbsp;</span><br /><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;"><br /></span><br /><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">grails generate-controller org.ast.User</span><br /><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;"><br /></span><br /><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;">in the GrailsEnterpriseApplication project (!) automatically will reference the User class in your domain plugin. Meaning that separating the business model from the MVC part of your application can be done easily.</span><br /><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;"><br /></span><br /><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;"><b>Summary</b></span><br /><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;"><br /></span><br /><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;">Of course, the example just showed a very simple use-case but I think you got the idea. Through Grail's plugin mechanism it is possible to create structured applications with explicit dependencies/automatic dependency resolution and even with revision management included.</span><br /><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;"><br /></span><br /><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;">[0] Grails Plugin Portal - <a href="http://grails.org/plugins">http://grails.org/plugins</a></span><br /><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;">[1] Grails Plugins Introduction -&nbsp;<span class="Apple-style-span" style="font-family:Times;"><a href="http://grails.org/doc/latest/guide/12.%20Plug-ins.html">http://grails.org/doc/latest/guide/12.%20Plug-ins.html</a></span></span><br /><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;"><br /></span><br /><span class="Apple-style-span" style="font-family:Times, 'Times New Roman', serif;"><br /></span>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>9</wp:post_id>
		<wp:post_date>2010-03-19 07:57:00</wp:post_date>
		<wp:post_date_gmt>2010-03-19 07:57:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>structuring-grails-projects</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>blogger_blog</wp:meta_key>
		<wp:meta_value><![CDATA[grails-inside.blogspot.com]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>blogger_author</wp:meta_key>
		<wp:meta_value><![CDATA[Andre Steingress]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>blogger_d263388631120bb7ee0fc300fe57c4e6_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[7497130564152380296]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>reddit</wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"count";s:1:"0";s:4:"time";s:10:"1293720038";}]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>12</wp:comment_id>
		<wp:comment_author><![CDATA[ew]]></wp:comment_author>
		<wp:comment_author_email>emmettwalsh@gmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>170.86.15.15</wp:comment_author_IP>
		<wp:comment_date>2010-04-09 11:32:49</wp:comment_date>
		<wp:comment_date_gmt>2010-04-09 10:32:49</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Hi,
nice article, similar to another one i read lately (http://www.nslms.com/2010/03/10/modularizing-your-grails-application-domain-classes/)

I have a simple scenario, which I would really value your opinion on.

I have modularized my app into a grails web app, a domain plugin and a services plugin. (the services plugin is doing some complicated stuff I want to seperate out and maybe reuse again)

Naturally the controllers of my web app are doing some crud - so the web app will need the domain plugin.
My services plugin will also need db access so it will also need the domain plugin.

I then have two questions
1) the fact that i am using the domain plugin twice, does this mean 2 spring app contexts and 2 hibernate caches will be created ?
2) would it be a better idea to just have the services plugin depend on the domain plugin and then just have the grails app depend on the services plugin.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>13</wp:comment_id>
		<wp:comment_author><![CDATA[andresteingress]]></wp:comment_author>
		<wp:comment_author_email>grails.inside@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://andresteingress.wordpress.com</wp:comment_author_url>
		<wp:comment_author_IP>194.48.7.110</wp:comment_author_IP>
		<wp:comment_date>2010-04-09 12:05:10</wp:comment_date>
		<wp:comment_date_gmt>2010-04-09 11:05:10</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[hi,

ad 1) after all, each Grails application is a Spring application. The Grails plugin-mechanism adds modularization and versioning to certain code parts of your application, but that is purely a Grails feature. If you take a look at your application's <code>applicationContext.xml</code>, there is a bean called <code>pluginManager</code>. This bean bootstraps all registered Grails plugins during the application's startup. In a nutshell: there is only a single application context, since Grails itself is based on Spring beans building a separate logical layer above the Spring container.

ad 2) if there is a chance your domain plugin can be used without the services, do it that way (domain &lt;- services &lt;- app). if domain classes are always used in conjunction with service classes (which I would, in a DDD sense, assume to be part of the domain model) , bundle them together: less plugins mean reduced complexity (and less trouble with class-loading).]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>12</wp:comment_parent>
		<wp:comment_user_id>13220543</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>14</wp:comment_id>
		<wp:comment_author><![CDATA[Random Links #171 | YASDW - yet another software developer weblog]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://www.kreiseder.at/2010/04/random-links-171/</wp:comment_author_url>
		<wp:comment_author_IP>83.65.40.130</wp:comment_author_IP>
		<wp:comment_date>2010-04-11 18:29:16</wp:comment_date>
		<wp:comment_date_gmt>2010-04-11 17:29:16</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] Structuring Grails Projects And this too [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>15</wp:comment_id>
		<wp:comment_author><![CDATA[Blog bookmarks 04/13/2010 &laquo; My Diigo bookmarks]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://lubospdiigo.wordpress.com/2010/04/13/blog-bookmarks-04132010/</wp:comment_author_url>
		<wp:comment_author_IP>72.233.2.71</wp:comment_author_IP>
		<wp:comment_date>2010-04-13 05:30:34</wp:comment_date>
		<wp:comment_date_gmt>2010-04-13 04:30:34</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] Structuring Grails Projects « Grails Inside [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>109</wp:comment_id>
		<wp:comment_author><![CDATA[Configuring an ActiveMQ Broker with Grails Spring DSL Code &laquo; Grails Inside]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://andresteingress.wordpress.com/2010/07/23/configuring-an-activemq-broker-with-grails-spring-dsl-code/</wp:comment_author_url>
		<wp:comment_author_IP>74.200.243.196</wp:comment_author_IP>
		<wp:comment_date>2010-07-23 07:10:18</wp:comment_date>
		<wp:comment_date_gmt>2010-07-23 06:10:18</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] right choice. As you might already know, plugins are a great way to structure Grails applications [1]. In this case, the plugin will be published on the company&#8217;s internal Nexus repository [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>Creating Custom Constraints</title>
		<link>http://andresteingress.wordpress.com/2010/03/19/creating-custom-constraints/</link>
		<pubDate>Fri, 19 Mar 2010 11:47:00 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[constraints]]></category>

		<category domain="category" nicename="constraints"><![CDATA[constraints]]></category>

		<category><![CDATA[grails]]></category>

		<category domain="category" nicename="grails"><![CDATA[grails]]></category>

		<guid isPermaLink="false">http://andresteingress.wordpress.com/2010/03/19/creating-custom-constraints</guid>
		<description></description>
		<content:encoded><![CDATA[Now and than there is the requirement to create <em>custom constraints</em>. As you might already know, there are plenty of constraints that already are shipped with Grails. Those can be applied in the constraints closure of your domain or command classes:<br /><br /><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">class User &nbsp;{</span><br /><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">&nbsp;&nbsp; </span><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">String firstName</span><br /><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">&nbsp;&nbsp; </span><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">String surName</span><br /><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">&nbsp;&nbsp; </span><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">Short &nbsp;age</span><br /><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">&nbsp;&nbsp; </span><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">static constraints = {</span><br /><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">&nbsp;&nbsp; &nbsp; &nbsp;</span><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">firstName(blank: false, maxSize: 150)</span><br /><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">&nbsp;&nbsp; &nbsp; &nbsp;</span><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">surName(blank: false, maxSize: 150)</span><br /><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">&nbsp;&nbsp; &nbsp; &nbsp;</span><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">age(min: 18 as Short, max: 99 as Short)</span><br /><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">&nbsp;&nbsp; </span><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">}</span><br /><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">}</span><br /><br />In order to implement custom constraints like i.e. an age constraint, which encapsulates the constraint's implementation you could extend from Grail's <span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">AbstractConstraint</span><span style="font-size:13pt;"> </span>class. The problem with this approach is, that you than need to register your custom constraint at bootstrap, to use it in every possible scenario (going from testing to running the app).<br /><br />Fortunately there is a plugin that helps with creating custom constraints: the <span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">constraints</span> plugin.<br /><br /><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">grails install-plugin constraints</span><br /><br />Installs the plugin and adds a dependency entry in your application or plugin settings. If installation was successful your <span style="font-size:13pt;"><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;"><span class="Apple-style-span" style="font-size:medium;">grails help</span></span> </span>command lists the <span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">create-constraint</span> command, that from now can be used to create custom constraints.<br /><br /><br />Creating an application-specific age constraint would be as simple as:<br /><br /><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">grails create-constraint Age</span><br /><br />which creates <span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">grails-app/utils/AgeConstraint</span> which i modified to be<br /><br /><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">class AgeConstraint {</span><br /><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">&nbsp;&nbsp; &nbsp;</span><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">def validate = { propertyValue -&gt;</span><br /><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;</span><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">return propertyValue &gt;= 18 &amp;&amp; propertyValue &lt;= 99</span><br /><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">&nbsp;&nbsp; &nbsp;</span><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">}</span><br /><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">}</span><br /><br /><br />After declaring the constraint it can be used in domain or command classes:<br /><br /><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">class User &nbsp;{</span><br /><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">&nbsp;&nbsp; </span><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">String firstName</span><br /><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">&nbsp;&nbsp; </span><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">String surName</span><br /><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">&nbsp;&nbsp; </span><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">Short &nbsp;age</span><br /><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;"><br /></span><br /><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">&nbsp;&nbsp; </span><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">static constraints = {</span><br /><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">&nbsp;&nbsp; &nbsp; &nbsp;</span><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">firstName(blank: false, maxSize: 150)</span><br /><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">&nbsp;&nbsp; &nbsp; &nbsp;</span><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">surName(blank: false, maxSize: 150)</span><br /><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">&nbsp;&nbsp; &nbsp; &nbsp;</span><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">age(age: true)</span><br /><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">&nbsp;&nbsp; </span><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">}</span><br /><span class="Apple-style-span" style="font-family:'Courier New', Courier, monospace;">}</span><br /><br />If you take a look at the <span style="text-decoration:underline;"><a href="http://github.com/geofflane/grails-constraints">plugin's documentation</a></span> [0] there are several to use default message codes for i18n of error messages and so on. But this plugin works perfectly for adding custom constraints to your Grails environment.<br /><br /><br />[0] Constraints Plugin -&nbsp;<span style="text-decoration:underline;"><a href="http://github.com/geofflane/grails-constraints">http://github.com/geofflane/grails-constraints</a></span>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>10</wp:post_id>
		<wp:post_date>2010-03-19 11:47:00</wp:post_date>
		<wp:post_date_gmt>2010-03-19 11:47:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>creating-custom-constraints</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>blogger_blog</wp:meta_key>
		<wp:meta_value><![CDATA[grails-inside.blogspot.com]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>blogger_author</wp:meta_key>
		<wp:meta_value><![CDATA[Andre Steingress]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>blogger_d263388631120bb7ee0fc300fe57c4e6_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[1234872055434750990]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>reddit</wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"count";s:1:"0";s:4:"time";s:10:"1293719811";}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Getting the Persistence Context Picture (Part I)</title>
		<link>http://andresteingress.wordpress.com/2010/03/23/getting-the-persistence-context-picture-part-i/</link>
		<pubDate>Tue, 23 Mar 2010 15:05:00 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[grails]]></category>

		<category domain="category" nicename="grails"><![CDATA[grails]]></category>

		<category><![CDATA[hibernate]]></category>

		<category domain="category" nicename="hibernate"><![CDATA[hibernate]]></category>

		<category><![CDATA[patterns]]></category>

		<category domain="category" nicename="patterns"><![CDATA[patterns]]></category>

		<guid isPermaLink="false">http://andresteingress.wordpress.com/2010/03/23/getting-the-persistence-context-picture-part-i</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://flattr.com/thing/75615/Getting-the-Persistence-Context-Picture-Part-1" target="_blank">
<img src="http://api.flattr.com/button/button-static-50x60.png" alt="Flattr this" title="Flattr this" border="0" align="right" vspace="5" hspace="5" /></a><div style="font:12px Helvetica;margin:0;">This article series deals with Hibernate‘s basic APIs and how Hibernate is used in Grails applications. The first part of this series is meant to be seen as overall introduction to objects, persisting objects and Hibernate as a persistence framework.</div><div style="font:12px Helvetica;min-height:14px;margin:0;"></div><div style="font:12px Helvetica;margin:0;">I have been in a lot of projects where Hibernate and the persistence layer was handled as the application‘s holy grail: whenever an error was thrown, programmers did not try to understand the concrete problem, but consumed their time by finding work-arounds. From my experience, that behavior was simply caused by a lack of knowledge about basic persistence context patterns. In this article i will try to explain the most fundamental patterns and concepts which should already help to gain knowledge on how persistence frameworks core data-structures work.</div><div style="font:12px Helvetica;min-height:14px;margin:0;"><br /></div><div style="font:18px Helvetica;margin:0;">Objects, objects everywhere...</div><div style="font:12px Helvetica;min-height:14px;margin:0;"><br /></div><div style="font:12px Helvetica;margin:0;">Let's start with object-orientation. Implementing a persistence framework mainly involves the question on how to map objects from an object-oriented domain into a relational data model, which is found in most databases we're dealing today. In order to understand persistence mechanisms from bottom-up, we should revise the basic concepts on objects and classes. The basic definition of objects is:<br /><br /><br /></div><div class="separator" style="clear:both;text-align:center;"><img border="0" src="http://andresteingress.files.wordpress.com/2010/03/object-definition.png?w=300" /></div><div style="font:12px Helvetica;margin:0;"><i><br /></i></div><div style="font:12px Helvetica;min-height:14px;margin:0;"><br /></div><div style="font:12px Helvetica;margin:0;">Whenever we are talking about objects in an object-oriented context, we speak of runtime representatives of classes, whereas the classes can be seen as construction plans to be used when running the program and constructing new instances. A class consists of attributes and operations on that attributes. Objects at runtime represent the attribute‘s values which are tightly connected with the class‘s operations on them. If seen from a logical view, an object is represented by it‘s state and operations.</div><div style="font:12px Helvetica;min-height:14px;margin:0;"><br /></div><div class="separator" style="clear:both;text-align:center;"></div><div style="font:12px Helvetica;margin:0;"><div class="separator" style="clear:both;text-align:center;"><img border="0" src="http://andresteingress.files.wordpress.com/2010/03/anobjectillustration.png?w=185" /></div><br /></div><div style="font:12px Helvetica;min-height:14px;margin:0;"><br /></div><div style="font:12px Helvetica;margin:0;">Attributes might be of any datatype available in the programming environment. Most programming languages decide between simple datatypes and custom class data types, whereas custom class data-types contain custom as well as API classes. At runtime therefore attribute values either contain scalar values (e.g. a number, a string, a boolean value, etc.) or references to other objects. A reference‘s value might either reference another object or is void.</div><div style="font:12px Helvetica;min-height:14px;margin:0;"><br /></div><div style="font:12px Helvetica;margin:0;">Every object created during the execution of an object-oriented program has an <i>object identity</i>. Depending on its context object identity has two meanings:</div><div style="font:12px Helvetica;margin:0;"><br /></div><div style="font:12px Helvetica;margin:0;">1. By reference: an object A denotes as being equal to another object B if their references are equal.</div><div class="separator" style="clear:both;text-align:center;"></div><div class="separator" style="clear:both;text-align:center;"><br /><br /><img border="0" src="http://andresteingress.files.wordpress.com/2010/03/equalitybyreference.png?w=300" /><br /></div><div class="separator" style="clear:both;text-align:center;"><br /></div><div class="separator" style="clear:both;text-align:left;"><span class="Apple-style-span" style="font-family:Helvetica;font-size:12px;">2. By state: an object A denotes as being equal to another object B if their attribute values are equal.</span></div><div class="separator" style="clear:both;text-align:left;"><span class="Apple-style-span" style="font-family:Helvetica;font-size:small;"><span class="Apple-style-span" style="font-size:12px;"><br /></span></span></div><div class="separator" style="clear:both;text-align:center;"><span class="Apple-style-span" style="font-family:Helvetica;font-size:12px;"><span class="Apple-style-span" style="font-family:'Lucida Grande';font-size:medium;"></span></span></div><div style="font:12px Helvetica;min-height:14px;margin:0;"><div class="separator" style="clear:both;text-align:center;"><img border="0" src="http://andresteingress.files.wordpress.com/2010/03/equalitybyvalue.png?w=300" /></div><br /></div><div style="font:12px Helvetica;min-height:14px;margin:0;"><br /></div><div style="font:12px Helvetica;margin:0;">In object-orientational theory the first one is named „object identity“ and the latter one „object equality“, thus being identical is not as being the same.</div><div style="font:12px Helvetica;min-height:14px;margin:0;"><br /></div><div style="font:12px Helvetica;margin:0;">Unfortunately in the Java environment being an identical object means the same as being equal to another object, since<span style="font:normal normal normal 12px/normal Courier;"> java.lang.Object.equals()</span> implements reference comparison with the <span style="font:normal normal normal 12px/normal Courier;">==</span> operator by default.</div><div style="font:12px Helvetica;min-height:14px;margin:0;"><br /></div><div style="font:12px Helvetica;margin:0;">Let‘s change our view to a completely relational mapping model. In a first naive approach our tables would correspond to classes, whereas columns represent the class‘s attributes.<br /><br /><div class="separator" style="clear:both;text-align:center;"><img border="0" src="http://andresteingress.files.wordpress.com/2010/03/tablewithobjectrows.png?w=300" /></div><br /><br />At runtime an object instance would be represented by a single database row filled with values for each of the available columns. In fact, this is how it is done most of the time when we are using persistence frameworks like Hibernate.<br /><br />The examples above show very simple structured object's classes. In practice persistence frameworks also need a way to map relationships (1:n, m:n, m:1, 1:1) between objects and database tables. Usually this is done using foreign keys in the relational model, but imagine a collection with a lot of referring objects - the persistence frameworks APIs need to provide mechanisms for batch loading, cursor support etc.<br /><br />We have already seen object identity and its two characteristics - with database persistency a third identity comes into play: the object's primary key. But the problem is that objects don't necessarily know about their primary key until a key is explicitly requested from the database. It gets even trickier if you think of relationships between objects - how can a programmer ensure that relationships are mapped in the correct order depending on foreign key constraints between the objects database tables.<br /><br />Since programmers really should not deal with issues like object relational mapping, object identity, batch loading relationships for relationship traversal, etc. various persistence or object-relational mapping (ORM) frameworks have prospered. They all have in common that they provide functionality that persists objects of an object-oriented programming environment into some persistent store, thus persisted objects are called <i>persistent objects</i>.</div><div style="font:12px Helvetica;min-height:14px;margin:0;"><br /></div><div style="font:12px Helvetica;min-height:14px;margin:0;"><br /></div><div style="font:18px Helvetica;margin:0;">The Persistence Context</div><div style="font:12px Helvetica;min-height:14px;margin:0;"><br /></div><div style="font:12px Helvetica;margin:0;">For persistent objects there needs to be some explicitly defined context in which creation, modification and retrieval of persistent objects can happen. This context is known as <i>Persistence Context </i>(or Persistent Closure).&nbsp;In fact, most of the persistence frameworks provide APIs that provides access to a persistence context, even though the persistence context‘s functionality is often split into several APIs.<br /><br />Let's take a look at the basic definition of persistence contexts ([0] "Persistence Context" pattern):</div><div class="separator" style="clear:both;text-align:center;"></div><div style="font:12px Helvetica;margin:0;"><i><br /></i></div><div class="separator" style="clear:both;text-align:center;"><img border="0" height="68" src="http://andresteingress.files.wordpress.com/2010/03/pc-definition.png?w=300" width="320" /></div><div style="font:12px Helvetica;margin:0;"><i><br /></i></div><div style="font:12px Helvetica;min-height:14px;margin:0;"><br /></div><div style="font:12px Helvetica;margin:0;">Notice that the term „business transaction“ does not refer to database transactions. A business transaction is a logical transaction that might span several operations e.g. ordering a pizza from the customer‘s view is a single business transaction, but it might be the case that this single business transaction involves several technical transactions to complete the request.</div><div style="font:12px Helvetica;min-height:14px;margin:0;"><br /></div><div style="font:12px Helvetica;margin:0;">To lookup the current persistence context during execution classes might use a <i>Registry </i>which provides access to the current persistence context.</div><div style="font:12px Helvetica;min-height:14px;margin:0;"><br /></div><div style="font:12px Helvetica;margin:0;">The persistence context deals with few problems caused by the object-orientation/relational mapping mismatch. It ensures that all operations on objects are tracked for the persistence context‘s life time, to keep possible db transactions as short as possible. It handles the problem of object identity and ensures that there will never be multiple object instances with the same database primary key. It tracks associations and resolves them in order to satisfy foreign key constraints. It implements a cache mechanism to automatically gain a certain transaction isolation level to solve repeatable read problems and to lower the number of executed SQL statements. Overall, a persistence provider already has gained a lot of knowledge about database systems and ORM so I would consider decisions for custom implementation of persistence contexts as highly risky.</div><div style="font:12px Helvetica;min-height:14px;margin:0;"><br /></div><div style="font:18px Helvetica;margin:0;">Hibernate‘s Persistence Context APIs</div><div style="font:12px Helvetica;min-height:14px;margin:0;"><br /></div><div style="font:12px Helvetica;margin:0;">Let‘s take a look at how Hibernate implements the Persistence Context and related patterns. Overall, Hibernate‘s persistence context API mainly consists of the following classes:</div><div style="font:12px Helvetica;min-height:14px;margin:0;"><br /></div><div style="font:12px Courier;margin:0;">org.hibernate.SessionFactory</div><div style="font:12px Helvetica;min-height:14px;margin:0;"><br /></div><div style="font:12px Helvetica;margin:0;">The <span style="font:normal normal normal 12px/normal Courier;">SessionFactory</span> resembles the persistence context managing component in Hibernate - the registry. This is the central place for global configuration and set-up. During runtime&nbsp; there will only be a single session factory instance in your application‘s environment (except for multiple data-sources, e.g. legacy databases, ldap providers etc.) which acts as factory for retrieving persistence context objects.</div><div style="font:12px Helvetica;min-height:14px;margin:0;"><br /></div><div style="font:12px Courier;margin:0;">org.hibernate.Session</div><div style="font:12px Helvetica;min-height:14px;margin:0;"><br /></div><div style="font:12px Helvetica;margin:0;">A <span style="font:normal normal normal 12px/normal Courier;">Session</span> represents a component which tracks (de-)attachment, modification and retrieval of persistent objects. This is Hibernate‘s persistence context (finally). Whenever you need a persistence context in your application you have to look up a <span style="font:normal normal normal 12px/normal Courier;">SessionFactory</span> and create a new <span style="font:normal normal normal 12px/normal Courier;">Session</span> using the <span style="font:normal normal normal 12px/normal Courier;">openSession()</span> method. Be aware that Hibernate is not restricting programmers in how you handle sessions. If you decide to implement a long-running business transaction (aka conversation) with a single session instance, you are free to do so.</div><div style="font:12px Helvetica;min-height:14px;margin:0;"><br /></div><div style="font:12px Courier;margin:0;">org.hibernate.Transaction</div><div style="font:12px Helvetica;min-height:14px;margin:0;"><br /></div><div style="font:12px Helvetica;margin:0;">A <span style="font:normal normal normal 12px/normal Courier;">Transaction</span> actually is used to implement a Unit of Work within the application. A single session might span multiple transactions and it is recommended that there is at least a single uncommitted transaction when working in a session. Note that the actual implementation of how the transaction is handled on database-side is hidden by Hibernate‘s implementation of that interface.</div><div style="font:12px Helvetica;min-height:14px;margin:0;"><br /></div><div style="font:12px Helvetica;margin:0;">Still if you use Hibernate without an explicit call to session.beginTransaction() Hibernate will operate in auto-commit mode (be sure to specify <span style="font:normal normal normal 12px/normal Courier;">connection.autocommit=„true“</span> in your configuration‘s xml).</div><div style="font:12px Helvetica;min-height:14px;margin:0;"><br /></div><div style="font:18px Helvetica;margin:0;">Lifecycle Management</div><div style="font:12px Helvetica;min-height:14px;margin:0;"><br /></div><div style="font:12px Helvetica;margin:0;">So far we have heard from persistent objects as being the type of objects which have been persisted by the persistence context. But that persistent state is just a single station in the life-cycle of objects managed by Hibernate as a persistence provider.</div><div style="font:12px Helvetica;min-height:14px;margin:0;"><br /></div><div style="font:12px Helvetica;margin:0;">In fact, I assume that in most applications the domain model entities will have to be kept in some persistent store. Therefore an entity object‘s instance will run through several states between instance creation and being actually stored in the persistent store of your choice:</div><div style="font:12px Helvetica;min-height:14px;margin:0;"><br /></div><ol style="list-style-type:decimal;"><li style="font:12px Helvetica;margin:0;">(De-) Attaching Instances</li><li style="font:12px Helvetica;margin:0;">Saving/Updating Instances</li><li style="font:12px Helvetica;margin:0;">Removing Instances</li></ol><div style="font:12px Helvetica;min-height:14px;margin:0;"><br /></div><div style="font:14px Helvetica;margin:0;">(De-) Attaching Instances</div><div style="font:14px Helvetica;min-height:17px;margin:0;"><br /></div><div class="separator" style="clear:both;text-align:center;"><img border="0" src="http://andresteingress.files.wordpress.com/2010/03/hibernateobjectlife-cycle.png?w=201" /></div><div style="font:14px Helvetica;min-height:17px;margin:0;"><br /></div><div style="font:14px Helvetica;min-height:17px;margin:0;"><br /></div><div style="font:12px Helvetica;margin:0;">Imagine your first application‘s bootstrap. Chances are good that you might have to create some persistent objects on startup to get the system working. Whenever creating object instances which have never been persisted we are talking of <i>transient objects</i>. These objects have in no way been connected to a persistence context.</div><div style="font:12px Helvetica;min-height:14px;margin:0;"><br /></div><div style="font:12px Helvetica;margin:0;">The process of letting the persistence context know of the existing of a transient object is called „attaching“. Therefore, newly attached objects are called either <i>attached</i> or <i>persistent objects</i>.<span class="Apple-tab-span" style="white-space:pre;"> </span></div><div style="font:12px Helvetica;min-height:14px;margin:0;"><br /></div><div style="font:12px Helvetica;margin:0;">On the other way around the process of disconnecting persistent objects from the current persistence context is known as „dettaching“ or „evicting“.</div><div style="font:12px Helvetica;min-height:14px;margin:0;"><br /></div><div style="font:14px Helvetica;margin:0;">Saving or Updating Instances</div><div style="font:14px Helvetica;margin:0;"><br /></div><div class="separator" style="clear:both;text-align:center;"><img border="0" src="http://andresteingress.files.wordpress.com/2010/03/hibernatesavingupdating.png?w=300" /></div><div style="font:14px Helvetica;margin:0;"><br /></div><div style="font:12px Helvetica;min-height:14px;margin:0;"><br /></div><div style="font:12px Helvetica;margin:0;">Save or update operations can only be applied to persistent objects. If you need to save a transient or dettached object, you as an application developer have to attach that object instance to the current persistence context. Hibernate eases these two steps (attaching/save) since it provides update/save methods which automatically attach transient or detached objects.</div><div style="font:12px Helvetica;min-height:14px;margin:0;"><br /></div><div style="font:14px Helvetica;margin:0;">Removing Instances</div><div style="font:14px Helvetica;margin:0;"><br /></div><div class="separator" style="clear:both;text-align:center;"><img border="0" src="http://andresteingress.files.wordpress.com/2010/03/hibernateremove.png?w=300" /></div><div style="font:14px Helvetica;margin:0;"><br /></div><div style="font:14px Helvetica;min-height:17px;margin:0;"><br /></div><div style="font:12px Helvetica;margin:0;">Removing can only be applied on persistent objects. As it is the case with save/update operations transient or dettached objects first needs to be attached to the current persistence context to get removed. Whenever a persistent object is removed it actually is just marked as being in state „removed“ by the underlying persistence mechanisms.<br /><br /><span class="Apple-style-span" style="font-size:18px;">Summary</span><br /><span class="Apple-style-span" style="font-size:large;"></span><br /><span class="Apple-style-span" style="font-size:12px;">The gained knowledge about the Persistence Context pattern and Life-Cycle of persistent objects already equips us with a lot of basic knowledge on how persistence frameworks like Hibernate operate. In the next part we will take a look at using Hibernate APIs in applications and how Grails utilizes Hibernate.</span></div><div style="font:12px Helvetica;min-height:14px;margin:0;"><br />[0] Patterns of Enterprise Application Architecture, Martin Fowler</div><div style="font:12px Helvetica;min-height:14px;margin:0;"><br /></div><br /><span class="Apple-style-span" style="font-size:x-large;"></span>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>11</wp:post_id>
		<wp:post_date>2010-03-23 15:05:00</wp:post_date>
		<wp:post_date_gmt>2010-03-23 15:05:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>getting-the-persistence-context-picture-part-i</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>blogger_blog</wp:meta_key>
		<wp:meta_value><![CDATA[grails-inside.blogspot.com]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>blogger_author</wp:meta_key>
		<wp:meta_value><![CDATA[Andre Steingress]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>blogger_d263388631120bb7ee0fc300fe57c4e6_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[4597513919102011500]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[13220543]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1287738068]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>reddit</wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"count";s:1:"0";s:4:"time";s:10:"1293720009";}]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>16</wp:comment_id>
		<wp:comment_author><![CDATA[andrea]]></wp:comment_author>
		<wp:comment_author_email>a.scarafoni@gmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>151.83.131.25</wp:comment_author_IP>
		<wp:comment_date>2010-04-15 06:12:22</wp:comment_date>
		<wp:comment_date_gmt>2010-04-15 05:12:22</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[nice article, thank you.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>138</wp:comment_id>
		<wp:comment_author><![CDATA[Grails &amp; Hibernate Persistence Context &#8211; Galeon&#039;s Howlingwolf]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://howlingwolf.de/blog/?p=523</wp:comment_author_url>
		<wp:comment_author_IP>83.133.126.143</wp:comment_author_IP>
		<wp:comment_date>2010-07-28 13:29:17</wp:comment_date>
		<wp:comment_date_gmt>2010-07-28 12:29:17</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] http://andresteingress.wordpress.com/2010/03/23/getting-the-persistence-context-picture-part-i/ http://andresteingress.wordpress.com/2010/04/08/getting-the-persistence-context-picture-part-ii/ http://andresteingress.wordpress.com/2010/04/20/getting-the-persistence-context-picture-part-iii/ [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>Contract-Oriented Programming with Groovy</title>
		<link>http://andresteingress.wordpress.com/2010/03/27/contract-oriented-programming-with-groovy/</link>
		<pubDate>Sat, 27 Mar 2010 00:30:00 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[gcontracts]]></category>

		<category domain="category" nicename="gcontracts"><![CDATA[gcontracts]]></category>

		<category><![CDATA[grails]]></category>

		<category domain="category" nicename="grails"><![CDATA[grails]]></category>

		<category><![CDATA[groovy]]></category>

		<category domain="category" nicename="groovy"><![CDATA[groovy]]></category>

		<guid isPermaLink="false">http://andresteingress.wordpress.com/2010/03/27/contract-oriented-programming-with-groovy</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Introduction</strong>

One of the first programming-related books i've read thoroughly has been "Object Oriented Software Construction" by Bertrand Meyer [0]. Although the second release (!) has been released back in good-old 1997 it still contains a huge amount of object-oriented principles not seen in nowadays main-stream programming languages like Java or .Net C#.

One of the concepts I liked best is <em>c</em><em>ontract-oriented programming</em> aka "design by contract". The basic idea is pretty genius: applying the mathematical principle of Hoare triples to classes and objects.

A <em>Hoare triple</em> is always of the following form:
<blockquote><em>{P} A {Q}</em></blockquote>
A concrete triple says: <em>before some operation A executes the state P must be true. After execution of operation A, state Q must hold. </em>It's as simple as that.

In an object-oriented context, application of Hoare triples result in the following so-called <em>assertion types</em>:

<strong>Precondition: </strong>specifies the state the object must hold before a method is executed.

<strong>Postcondition: </strong>specifies the state the object must hold after a method is executed.

<strong>Class-Invariant: </strong>specifies the state an object must hold after it has been constructed, before and after each method call on that object.

Unfortunately the principle of contract-oriented programming is not natively supported in most programming languages (except Eiffel). With the advance of aspect-oriented programming there have been some attempts in the Java world to add contract support, but none of them really seemed appropriate to me.

<strong>Contracts for Groovy - gcontracts</strong>

When I first read <a href="http://pniederw.wordpress.com/2010/03/04/3/">Peter Niederwiesers blog-post on closure annotations</a> contract-oriented programming came immediately to my mind. Through the introduction of AST transformations in Groovy 1.6 it is possible to modify a program's abstract syntax tree and add custom byte-code or modify it during the compilation process - i've already written <a href="http://grails-inside.blogspot.com/2010/03/implementing-custom-serializable.html">a short introduction on local and global AST transformations</a>.

With AST transformations and closure annotations in mind I started to implement a first prototype that already supports the previously mentioned assertion types by providing Java annotations (<span style="font-family:'Courier New', Courier, monospace;">@Invariant</span>, <span style="font-family:'Courier New', Courier, monospace;">@Requires</span>, <span style="font-family:'Courier New', Courier, monospace;">@Ensures</span>). Before we take a look at the annotations and on the corresponding AST transformation stuff, I want to show you the outcome and how those contract annotations can be applied on Groovy classes:

e.g. a <span style="font-family:'Courier New', Courier, monospace;">Person</span> class
<blockquote><span style="font-family:'Courier New', Courier, monospace;">@Invariant({ firstName != null &amp;&amp; lastName != null })</span>
<span style="font-family:'Courier New', Courier, monospace;">class Person {</span>
<span style="font-family:'Courier New', Courier, monospace;"> String firstName </span>
<span style="font-family:'Courier New', Courier, monospace;"> String lastName</span>
<span style="font-family:'Courier New', Courier, monospace;"> String name</span>
<span style="font-family:'Courier New', Courier, monospace;">
</span>
<span style="font-family:'Courier New', Courier, monospace;"> public Person() {} </span>
<span style="font-family:'Courier New', Courier, monospace;">
</span>
<span style="font-family:'Courier New', Courier, monospace;"> public Person(final String firstName, final String lastName)  {</span>
<span style="font-family:'Courier New', Courier, monospace;"> this.firstName = firstName</span>
<span style="font-family:'Courier New', Courier, monospace;"> this.lastName = lastName</span>
<span style="font-family:'Courier New', Courier, monospace;"> }</span>
<span style="font-family:'Courier New', Courier, monospace;">
</span>
<span style="font-family:'Courier New', Courier, monospace;"> @Override </span>
<span style="font-family:'Courier New', Courier, monospace;"> @Requires({ firstName.size() &gt; 0 &amp;&amp; lastName.size() &gt; 0 })</span>
<span style="font-family:'Courier New', Courier, monospace;"> def String toString()  { </span>
<span style="font-family:'Courier New', Courier, monospace;"> return "${firstName} und ${lastName}" </span>
<span style="font-family:'Courier New', Courier, monospace;"> } </span>
<span style="font-family:'Courier New', Courier, monospace;">
</span>
<span style="font-family:'Courier New', Courier, monospace;"> @Requires({ delimiter in ['.', ',', ':'] })</span>
<span style="font-family:'Courier New', Courier, monospace;"> @Ensures({ name.size() &gt; 1 } )</span>
<span style="font-family:'Courier New', Courier, monospace;"> def initCompleteName(String delimiter)  {</span>
<span style="font-family:'Courier New', Courier, monospace;"> name = "${firstName}${delimiter}${lastName}"</span>
<span style="font-family:'Courier New', Courier, monospace;"> } </span>
<span style="font-family:'Courier New', Courier, monospace;">}</span></blockquote>
I know, the good-old stack example is a better choice but I needed a quick-and-dirty example on how to apply gcontracts annotations ;-) Let us quickly skip through all annotations and their meanings in that particular context:

1. the <span style="font-family:'Courier New', Courier, monospace;">@Invariant</span> annotation just says that during the entire life-time of a person it's <span style="font-family:'Courier New', Courier, monospace;">firstName</span> and <span style="font-family:'Courier New', Courier, monospace;">lastName</span> property must never be set to <span style="font-family:'Courier New', Courier, monospace;">null</span>.
2. whenever <span style="font-family:'Courier New', Courier, monospace;">toString()</span> is executed the object's <span style="font-family:'Courier New', Courier, monospace;">firstName</span> and <span style="font-family:'Courier New', Courier, monospace;">lastName</span><span style="font-family:'Courier New', Courier, monospace;"> size() </span>must be greater than zero
3. whenever <span style="font-family:'Courier New', Courier, monospace;">initCompleteName</span> is called, parameter <span style="font-family:'Courier New', Courier, monospace;">delimiter</span> must be in a certain range.
4. whenever <span style="font-family:'Courier New', Courier, monospace;">initCompleteName</span> is done, the name must be <span style="font-family:'Courier New', Courier, monospace;">initialized</span> to something bigger than 1.

Note that e.g. the <span style="font-family:'Courier New', Courier, monospace;">@Requires </span>closure annotation has access to all method parameters and instance variables, so checking the delimiter being in a certain Groovy range just works. In addition, the AST transformation process injects the class invariant wherever feasible, e.g.
<blockquote><span style="font-family:'Courier New', Courier, monospace;">def p = new Person('Max', 'Mustermann')</span>
<span style="font-family:'Courier New', Courier, monospace;">p.setFirstName(null)</span></blockquote>
causes an <span style="font-family:'Courier New', Courier, monospace;">AssertionError</span> since after the call to <span style="font-family:'Courier New', Courier, monospace;">setFirstName</span> the class invariant is not satisfied anymore.

I hope you already see and feel that applying gcontracts can greatly improve readability and maintainability of your code since interface contracts are specified explicitly and are proved (if activated) at runtime. Of course, such mechanisms are ment to be used to determine programming errors and not business validation errors - but i guess i am going to take a look at invariants and their role in the software development process in another blog-post.

Let's take a quick look at the implementation of gcontracts done so far. gcontracts by now provides three annotations:
<blockquote><span style="font-family:'Courier New', Courier, monospace;">@Target(ElementType.TYPE)
public @interface Invariant {</span>

<span style="font-family:'Courier New', Courier, monospace;"> Class value();</span>
<span style="font-family:'Courier New', Courier, monospace;">}</span></blockquote>
is used on type-level to specify the class invariant.
<blockquote><span style="font-family:'Courier New', Courier, monospace;">@Target(ElementType.METHOD)</span>
<span style="font-family:'Courier New', Courier, monospace;">public @interface Requires {</span>
<span style="font-family:'Courier New', Courier, monospace;"> Class value();</span>
<span style="font-family:'Courier New', Courier, monospace;">}</span></blockquote>
is used on method-level to specify preconditions.
<blockquote><span style="font-family:'Courier New', Courier, monospace;">@Target(ElementType.METHOD)</span>
<span style="font-family:'Courier New', Courier, monospace;">public @interface Ensures {</span>
<span style="font-family:'Courier New', Courier, monospace;"> public abstract Class value();</span>
<span style="font-family:'Courier New', Courier, monospace;">}</span></blockquote>
is used on method-level to specify postconditions.

As you can image, the real work of gcontracts is done in the AST transformation implementation which is done in the ContractValidationASTTransformation class.

In a nutshell, the transformation visits all code parts which are annotated with the annotations above and adds <em>Java assertions</em> at the appropriate places. Although there is no explicit support for contract-oriented programming, Java provides the assertion statement: whenever assertion-checking is enabled and an assertion is found, e.g.
<blockquote><span style="font-family:'Courier New', Courier, monospace;">assert count &gt; 0 : "count must be greater than zero";</span></blockquote>
that boolean expression is evaluated and if false a java.lang.AssertionError will be thrown. AST transformation uses that statement to inject pre-, postcondition and class-invariant checks (loop invariants are supposed to be added next) at appropriate code places. That includes that disabling checking of these constraints is as simple as deactivating Java assertions <a href="http://java.sun.com/j2se/1.4.2/docs/guide/lang/assert.html">[1]</a>.

<strong>gcontracts on Github</strong>

I pushed the current source code to a github repository: <a href="http://github.com/andresteingress/gcontracts">http://github.com/andresteingress/gcontracts</a><a href="http://github.com/andresteingress/gcontracts"></a>

Please keep in mind that the project's code has neither been thoroughly tested nor is being ready to be used in production code - but i am going to work on it, in order to release the first version as soon as possible.

[0] Object-Oriented Software Construction (2nd Edition), Bertrand Meyer, 1997, Prentice Hall
[1] <a href="http://java.sun.com/j2se/1.4.2/docs/guide/lang/assert.html">Programming with Assertions, Sun</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[contract-oriented programming or design by contract is a feature that is rarely found in main-stream programming languages like Java or C#. gconstracts provides a library which adds support to contract-oriented programming with using closure annotations and AST transformations during compilation of Groovy code.]]></excerpt:encoded>
		<wp:post_id>12</wp:post_id>
		<wp:post_date>2010-03-27 00:30:00</wp:post_date>
		<wp:post_date_gmt>2010-03-27 00:30:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>contract-oriented-programming-with-groovy</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>blogger_blog</wp:meta_key>
		<wp:meta_value><![CDATA[grails-inside.blogspot.com]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>blogger_author</wp:meta_key>
		<wp:meta_value><![CDATA[Andre Steingress]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>blogger_d263388631120bb7ee0fc300fe57c4e6_permalink</wp:meta_key>
		<wp:meta_value><![CDATA[6957713318037408062]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1270073082]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[13220543]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>reddit</wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"count";s:1:"0";s:4:"time";s:10:"1293719795";}]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>2</wp:comment_id>
		<wp:comment_author><![CDATA[Paul King]]></wp:comment_author>
		<wp:comment_author_email>paulk@asert.com.au</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>61.9.213.87</wp:comment_author_IP>
		<wp:comment_date>2010-03-30 01:02:52</wp:comment_date>
		<wp:comment_date_gmt>2010-03-30 00:02:52</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Nice work Andre. I have fond memories talking to Bertrand Meyer during my PhD days.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>groovy.lang.GroovyObject - Basiswissen</title>
		<link>http://andresteingress.wordpress.com/?attachment_id=13</link>
		<pubDate>Sat, 27 Mar 2010 19:22:23 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://andresteingress.files.wordpress.com/2010/02/groovymethodhandling.jpeg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>13</wp:post_id>
		<wp:post_date>2010-03-27 19:22:23</wp:post_date>
		<wp:post_date_gmt>2010-03-27 19:22:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>groovy-lang-groovyobject-basiswissen</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://andresteingress.files.wordpress.com/2010/02/groovymethodhandling.jpeg</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/02/groovymethodhandling.jpeg]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:4:"1089";s:6:"height";s:3:"819";s:14:"hwstring_small";s:23:"height='96' width='127'";s:4:"file";s:97:"/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/02/groovymethodhandling.jpeg";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>blogger_attachment</wp:meta_key>
		<wp:meta_value><![CDATA[http://2.bp.blogspot.com/_CjUlO_BefEg/S4Tj76VcesI/AAAAAAAAAAM/VsFHs8nmhJg/groovymethodhandling.jpeg]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Über Grails-Inside</title>
		<link>http://andresteingress.wordpress.com/?attachment_id=14</link>
		<pubDate>Sat, 27 Mar 2010 19:22:24 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://andresteingress.files.wordpress.com/2010/02/4378559350_d12ac7a766_b.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>14</wp:post_id>
		<wp:post_date>2010-03-27 19:22:24</wp:post_date>
		<wp:post_date_gmt>2010-03-27 19:22:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>uber-grails-inside</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://andresteingress.files.wordpress.com/2010/02/4378559350_d12ac7a766_b.jpg</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/02/4378559350_d12ac7a766_b.jpg]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:4:"1024";s:6:"height";s:3:"494";s:14:"hwstring_small";s:23:"height='61' width='128'";s:4:"file";s:99:"/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/02/4378559350_d12ac7a766_b.jpg";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>blogger_attachment</wp:meta_key>
		<wp:meta_value><![CDATA[http://2.bp.blogspot.com/_CjUlO_BefEg/S4Z2vU-oyYI/AAAAAAAAAA4/ljy2OHW_Tyw/4378559350_d12ac7a766_b.jpg]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Structuring Grails Projects</title>
		<link>http://andresteingress.wordpress.com/2010/03/19/structuring-grails-projects/structuring-grails-projects-2/</link>
		<pubDate>Sat, 27 Mar 2010 19:22:24 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://andresteingress.files.wordpress.com/2010/03/test.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>16</wp:post_id>
		<wp:post_date>2010-03-27 19:22:24</wp:post_date>
		<wp:post_date_gmt>2010-03-27 19:22:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>structuring-grails-projects-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>9</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://andresteingress.files.wordpress.com/2010/03/test.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/03/test.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"583";s:6:"height";s:3:"223";s:14:"hwstring_small";s:23:"height='48' width='128'";s:4:"file";s:80:"/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/03/test.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>blogger_attachment</wp:meta_key>
		<wp:meta_value><![CDATA[http://4.bp.blogspot.com/_CjUlO_BefEg/S6MmqTzdHeI/AAAAAAAAABA/YbTuAazYFe8/test.png]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>class-invariant inheritance</title>
		<link>http://andresteingress.wordpress.com/2010/04/01/gcontracts-1-0-released/inheritance/</link>
		<pubDate>Tue, 30 Mar 2010 06:58:31 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://andresteingress.files.wordpress.com/2010/03/inheritance.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>42</wp:post_id>
		<wp:post_date>2010-03-30 07:58:31</wp:post_date>
		<wp:post_date_gmt>2010-03-30 06:58:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>inheritance</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>28</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://andresteingress.files.wordpress.com/2010/03/inheritance.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/03/inheritance.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"236";s:6:"height";s:3:"230";s:14:"hwstring_small";s:22:"height='96' width='98'";s:4:"file";s:87:"/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/03/inheritance.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
		<wp:meta_value><![CDATA[class-invariant inheritance illustration]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Mapping a Constructor Function</title>
		<link>http://andresteingress.wordpress.com/2010/03/31/contracts-in-the-domain-model/constructor-function/</link>
		<pubDate>Wed, 31 Mar 2010 19:26:48 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://andresteingress.files.wordpress.com/2010/03/constructor-function.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>73</wp:post_id>
		<wp:post_date>2010-03-31 20:26:48</wp:post_date>
		<wp:post_date_gmt>2010-03-31 19:26:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>constructor-function</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>71</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://andresteingress.files.wordpress.com/2010/03/constructor-function.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/03/constructor-function.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"479";s:6:"height";s:2:"81";s:14:"hwstring_small";s:23:"height='21' width='127'";s:4:"file";s:96:"/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/03/constructor-function.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
		<wp:meta_value><![CDATA[Mapping a Constructor Function]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>several pairs in the cartesian product</title>
		<link>http://andresteingress.wordpress.com/2010/03/31/contracts-in-the-domain-model/set-of-pairs/</link>
		<pubDate>Wed, 31 Mar 2010 19:36:58 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://andresteingress.files.wordpress.com/2010/03/set-of-pairs.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>74</wp:post_id>
		<wp:post_date>2010-03-31 20:36:58</wp:post_date>
		<wp:post_date_gmt>2010-03-31 19:36:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>set-of-pairs</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>71</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://andresteingress.files.wordpress.com/2010/03/set-of-pairs.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/03/set-of-pairs.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"247";s:6:"height";s:3:"135";s:14:"hwstring_small";s:23:"height='69' width='128'";s:4:"file";s:88:"/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/03/set-of-pairs.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
		<wp:meta_value><![CDATA[several pairs in the cartesian product]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Hoare Triple</title>
		<link>http://andresteingress.wordpress.com/2010/03/31/contracts-in-the-domain-model/hoare-triple/</link>
		<pubDate>Wed, 31 Mar 2010 19:53:24 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://andresteingress.files.wordpress.com/2010/03/hoare-triple.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>75</wp:post_id>
		<wp:post_date>2010-03-31 20:53:24</wp:post_date>
		<wp:post_date_gmt>2010-03-31 19:53:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hoare-triple</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>71</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://andresteingress.files.wordpress.com/2010/03/hoare-triple.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/03/hoare-triple.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"479";s:6:"height";s:2:"81";s:14:"hwstring_small";s:23:"height='21' width='127'";s:4:"file";s:88:"/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/03/hoare-triple.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
		<wp:meta_value><![CDATA[Hoare Triple]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Contracts in the Domain Model</title>
		<link>http://andresteingress.wordpress.com/2010/03/31/contracts-in-the-domain-model/</link>
		<pubDate>Wed, 31 Mar 2010 22:00:40 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[basic]]></category>

		<category domain="category" nicename="basic"><![CDATA[basic]]></category>

		<category><![CDATA[gcontracts]]></category>

		<category domain="category" nicename="gcontracts"><![CDATA[gcontracts]]></category>

		<category><![CDATA[grails]]></category>

		<category domain="category" nicename="grails"><![CDATA[grails]]></category>

		<category><![CDATA[groovy]]></category>

		<category domain="category" nicename="groovy"><![CDATA[groovy]]></category>

		<guid isPermaLink="false">http://andresteingress.wordpress.com/?p=71</guid>
		<description></description>
		<content:encoded><![CDATA[This blog-post gives a brief introduction to <em>contract-oriented programming</em> aka <em>design by contract</em> in general and in relation to Groovy with <a href="http://github.com/andresteingress/gcontracts">gcontracts</a> assertions.

<strong>The Problem</strong>

With each Grails application generation of test-cases is simply part of the game. Whenever you create a domain-class the corresponding unit-test is generated directly. With the test-first approach of Test-Driven Development (TDD) each iteration in the development process starts with the task of writing tests specifying the intended behavior of the targeted components.

E.g. use-case: a customer in the coffee-house might order several cups of coffee

[sourcecode language="groovy"]
class Customer {
    def Order createOrder() { ... }
}
[/sourcecode]

[sourcecode language="groovy"]
class Order {
    def void addItem(Item someItem)  { ... }
}
[/sourcecode]

When executing the test-first approach we would start with writing a unit-test for class Item, going on to class Order and finally writing one for class Customer.

e.g. ItemTests

[sourcecode language="groovy"]
class ItemTests  {
    @Test
    def void testCreateItem()  {
        def item = new Item(COFFEE_TYPE.Cappuccino, 1) // (type, amount)
        assertEquals COFFEE_TYPE.Cappuccino, item.coffee_type()
        assertEquals 1, item.amount()
    }
}
[/sourcecode]

As you might have already noticed it is pretty hard to find tests that maximize the covering of business requirements. Most of the time, unit-tests are written in the first iteration, in subsequent iterations that tests are simply rewritten to "get green". Your mileage may vary, but the main problem with test-cases are that each single test-case only tests a small fraction of the input domain, that is, the cartesian product of the current function:

e.g. the constructor call to <code>new Item(COFFEE_TYPE.Cappuccino, 1)</code> is nothing more than a function call that generates a new item object, with (COFFEE_TYPE, NUMBER) as parameters. Set theory would map that function to the following expression:

<img class="aligncenter size-medium wp-image-73" title="Mapping a Constructor Function" src="http://andresteingress.files.wordpress.com/2010/03/constructor-function.png?w=300" alt="Mapping a Constructor Function" width="300" height="50" /> Meaning that the overall set of parameter tuples is mapped by the cartesian product between all COFFEE_TYPE and all INTEGER values, the result is a single tuple out of all cartesian product tuples. Just imagine the cartesian product as a set that contains all possible combinations of this function's parameter values. The unit-test tests exactly one single pair out of the cartesian product:

<img class="aligncenter size-full wp-image-74" title="several pairs in the cartesian product" src="http://andresteingress.files.wordpress.com/2010/03/set-of-pairs.png" alt="several pairs in the cartesian product" width="247" height="135" />In this simple example it gets pretty obvious that even if tests have a high code coverage, they hardly never can satisfy testing a large portion of the problem domain.

That is where contracts come into play.

<strong>An Introduction to Contract-Oriented Programming</strong>

Contracts are the clue between the specification and the implementation of a certain software artifact, in object-oriented speak: classes. Formally, contracts are based on so-called Hoare rules which provide a formal system towards logical rules of reasoning on the correctness of computer programs [<a href="http://sunnyday.mit.edu/16.355/Hoare-CACM-69.pdf">0</a>]. The main feature of this formal system is the so-called Hoare triple:

<img class="aligncenter size-medium wp-image-75" title="Hoare Triple" src="http://andresteingress.files.wordpress.com/2010/03/hoare-triple.png?w=300" alt="Hoare Triple" width="300" height="50" />where P and Q are assertions and C represents a set of commands. A concrete Hoare triple states that before execution of C, the <em>precondition</em> P must be true, after the execution the <em>postcondition</em><em> </em>Q must hold. Pre- and postconditions represent so-called<em> assertion types</em>.

In a <a href="http://github.com/andresteingress/gcontracts">gcontracts</a> enabled Groovy program you might use pre- and postconditions by using either <code>@Requires</code> or <code>@Ensures</code>:

[sourcecode language="groovy"]
class Item {
    private CoffeeType coffee_type
    ...

    @Requires({ type != null &amp;&amp; amount &gt; 0 })
    def Item(final CoffeeType type, final Integer amount)  { ... }

    @Ensures({ old -&gt; old.coffee_type != coffee_type })
    def void change_coffee_type_to(final CoffeeType type)  { ... }
}
[/sourcecode]

As you can see pre- and postconditions are applied on constructors or methods only. In addition, there is the need to express assertions which must be preserved by all methods and every instance of that class; these assertion types are called <em>class-invariants</em>:

[sourcecode language="groovy"]
@Invariant({ coffee_type != null &amp;&amp; amount &gt; 0 })
class Item { ... }
[/sourcecode]

A class-invariant must be preserved after every constructor call and before/after each method call. When executing a method with a precondition P, a postcondition Q and a class-invariant C, before a method call the assertion expression P AND C and after a method call expression Q AND C must be true.

When inheritance comes into play we'll have to have a separate look at all assertion types:
<ul>
	<li><em>Class-Invariants</em>Whenever a class B with an invariant <em>B(iv)</em> extends a class A with an invariant <em>A(iv)</em>, <em>B(iv)</em> indeed is logically combined with <em>A(iv)</em>, meaning that every class-invariant check in B is actually represented by the boolean expression <em>B(iv) AND A(iv).</em>
<img class="aligncenter size-full wp-image-42" title="class-invariant inheritance" src="http://andresteingress.files.wordpress.com/2010/03/inheritance.png" alt="class-invariant inheritance illustration" width="236" height="230" /></li>
	<li><em>Preconditions</em>Whenever a method B with a precondition <em>B(pre)</em> overrides a method A with a precondition <em>A(pre)</em>, <em>B(pre)</em> is logically combined with a boolean OR, resulting in <em>B(pre) OR A(pre) <span style="font-style:normal;">assertions for all method calls of B. The precondition is said to be weakened for redeclared methods.</span></em><em> </em></li>
	<li><em>Postconditions </em><em><span style="font-style:normal;">Whenever a method B with a postcondition </span>B(post)<span style="font-style:normal;"> overrides a method A with a postcondition </span>A(post)<span style="font-style:normal;">, </span>B(post)<span style="font-style:normal;"> is logically combined with a boolean AND, resulting in </span>B(post) AND A(post) </em>for all method calls of B. The postcondition is said to be strengthened for redeclared methods.</li>
</ul>
<strong>Conclusion</strong>

Pre-, postconditions and class-invariants provide a great way of minimizing the parameter domain and ease testing of your domain model. Having instrumented your code with these assertions, you can concentrate on e.g. extreme boundaries of parameter values or obscure business cases when writing your tests. Indeed, a carefully instrumented domain-model has further advantages:
<ul>
	<li><em>Tests are built-in</em> - especially in complex object-oriented domain models, it is getting hard to (mentally) debug code and getting an impression of dependencies between components and side-effects between them. Contracts help to ensure that at least objects stay in a defined state that satisfies the intention of its supplier.<div style="height:10px;"></div></li>
	<li><em>Implicit programmer assumptions are made explicit</em> in the class's or method's contract - that's just one step closer to get the domain documented in the source code.<div style="height:10px;"></div></li>
	<li><em>Contracts enforce correctness </em>- identifying contracts in the domain model is not an easy task and it is surely not done in a single iteration (of course), but once programmers get on it they really have to think about the specification and its mapping in the domain model and its contracts, thus enforcing correctness of understanding how business requirements shall be implemented.<div style="height:10px;"></div></li>
	<li><em>Contracts allow for rapid changing of business requirements </em>- rapid changing of business requirements is one of the most annoying facts for programmers. Given a set of components and related unit tests, a single business requirement might cause rewriting of all components and their corresponding unit-tests. Especially rewriting the unit-tests might introduce or slip through other bugs since, as we've seen, unit-tests usually cover only a small portion of the problem domain. When applying contract-oriented programming, you might change class-invariants etc. but at least those assertions already cover a large portion of the problem domain.<div style="height:10px;"></div></li>
	<li><em>Contracts enforce readability </em>- when writing code, a programmer always has a mind-map of all objects and assumptions on objects and their particular state in mind. Those assumptions are said to be implicit, since they are not explicitly stated in source-code. From my experience, when having to switch between multiple projects it gets even worse and the source-code owner itself forgets about its implicit assumptions - which is the best starting point of introducing new bugs.<div style="height:10px;"></div></li>
	<li><em>Contracts enforce stability</em> - dynamic languages are great for rapid application development, but when it comes to maintainability dynamic code can be hard to read and - due to its dynamic nature and other properties - pretty fragile. Changes in components lead to potential side-effects which might not be spotted by test-suites. Assertions provide a way to determine programming bugs at run-time (mostly in test and not in production-environments).<div style="height:10px;"></div></li>
</ul>
To be clear: if your task is to write e.g. a simple CRUD Grails application, you wont be dealing with this stuff. But, if you are dealing with complex domain models and throw moving business requirements in (what project lives without them?), you might give contract-oriented programming a try.

[0] <a href="http://sunnyday.mit.edu/16.355/Hoare-CACM-69.pdf">An axiomatic basis for computer programming, C. A. R. Hoare</a>
[1] <a href="http://github.com/andresteingress/gcontracts">GContracts - Contract-Oriented Programming with Groovy, Github</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>71</wp:post_id>
		<wp:post_date>2010-03-31 23:00:40</wp:post_date>
		<wp:post_date_gmt>2010-03-31 22:00:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>contracts-in-the-domain-model</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1270114128]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[13220543]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>reddit</wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"count";s:1:"0";s:4:"time";s:10:"1293720017";}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>me</title>
		<link>http://andresteingress.wordpress.com/contact/profil_foto/</link>
		<pubDate>Thu, 01 Apr 2010 08:15:01 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://andresteingress.files.wordpress.com/2010/04/profil_foto.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>120</wp:post_id>
		<wp:post_date>2010-04-01 09:15:01</wp:post_date>
		<wp:post_date_gmt>2010-04-01 08:15:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>profil_foto</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>117</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://andresteingress.files.wordpress.com/2010/04/profil_foto.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/04/profil_foto.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:4:"1168";s:6:"height";s:4:"2091";s:14:"hwstring_small";s:22:"height='96' width='53'";s:4:"file";s:87:"/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/04/profil_foto.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
		<wp:meta_value><![CDATA[me]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Contact</title>
		<link>http://andresteingress.wordpress.com/contact/</link>
		<pubDate>Thu, 01 Apr 2010 08:20:26 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://andresteingress.wordpress.com/?page_id=117</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://andresteingress.files.wordpress.com/2010/04/profil_foto.png"><img class="alignright size-medium wp-image-120" title="me" src="http://andresteingress.files.wordpress.com/2010/04/profil_foto.png?w=167" alt="me" width="80" height="144" style="border:1px solid #efefef;padding:3px;" /></a>My name is Andre Steingress, I'm from Linz, <b>Austria</b>. I am an independent software professional working on large-scaled JEE/Java and Spring/Grails projects.

My special interests are: JEE applications, Groovy, Grails, Spring, Hibernate, web application technologies in general, data engineering (DB2, MySQL, MSSQL, NoSQL), application servers, high performance web sites with load balancing, software architecture and design patterns, agile development methodologies, mobile devices and theory of programming languages.

If you want to get in contact there are various ways to do so:

<a href="http://about.me/asteingress">About.me</a>
<a href="http://www.andresteingress.com/me/">Andre Steingress - Contact</a>
<a href="https://www.xing.com/profile/Andre_Steingress">Xing: https://www.xing.com/profile/Andre_Steingress</a>
<a href="http://www.linkedin.com/in/andresteingress">LinkedIn: http://www.linkedin.com/in/andresteingress</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>117</wp:post_id>
		<wp:post_date>2010-04-01 09:20:26</wp:post_date>
		<wp:post_date_gmt>2010-04-01 08:20:26</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>contact</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_wp_page_template</wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[13220543]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1292926620:13220543]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>gcontracts 1.0 released</title>
		<link>http://andresteingress.wordpress.com/2010/04/01/gcontracts-1-0-released/</link>
		<pubDate>Thu, 01 Apr 2010 11:28:52 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[gcontracts]]></category>

		<category domain="category" nicename="gcontracts"><![CDATA[gcontracts]]></category>

		<category><![CDATA[groovy]]></category>

		<category domain="category" nicename="groovy"><![CDATA[groovy]]></category>

		<category><![CDATA[releases]]></category>

		<category domain="category" nicename="releases"><![CDATA[releases]]></category>

		<guid isPermaLink="false">http://andresteingress.wordpress.com/?p=28</guid>
		<description></description>
		<content:encoded><![CDATA[I am happy to tell you that gcontracts version 1.0 has just been released and <a href="http://github.com/andresteingress/gcontracts/downloads">is available for download on github</a>, licensed under BSD.

Bugs, enhancements and feature requests should be reported over github's issue tracking system.

<strong>About gcontracts</strong>

As I've already mentioned in <a href="http://andresteingress.wordpress.com/2010/03/27/contract-oriented-programming-with-groovy/">a previous blog-post "Contract-Oriented Programming with Groovy"</a>, I started a github project called <a href="//github.com/andresteingress/gcontracts/"><strong>gcontracts</strong></a> which aims to enable "contract-oriented" programming aka "design by contract" in Groovy. This is done by relying on Groovy's ability to transform the abstract syntax tree (AST) during the compilation process and is mainly based on intelligent injection of  Java assert statements.

If you aren't familiar with contract-oriented programming, I advice to take a look at my blog-post <a href="http://andresteingress.wordpress.com/2010/03/31/contracts-in-the-domain-model/">Contracts in the Domain Model</a> [<a href="http://andresteingress.wordpress.com/2010/03/31/contracts-in-the-domain-model/">0</a>] which explains the principle idea of contracts, assertions and todays role of contract-oriented programming in software development processes.

<blockquote>Be warned, there is still a long way ahead, especially in fields of performance improvements, configurability and more advanced topics like loop invariants, pre- and postcondition inheritance and configurability, although the basic features are tested and working.</blockquote>

<strong>Features</strong>

gcontracts comes with a set of Java annotations whereas each annotation represents a particular assertion type. Each annotation has a single parameter which is used at declaration-time to specify a closure with a boolean expression, representing the assertion on the actual object's state. gcontracts 1.0 comes with the following assertion type annotations:
<ul>
	<li>Class-Invariants with <code>@Invariant</code>

In order to specify a class-invariant use the <code>@Invariant</code> annotation e.g.
[sourcecode language="groovy"]@Invariant({ someProperty.size() &gt; 0 &amp;&amp; anotherProperty == someMethod() })[/sourcecode]
An <code>@Invariant</code> annotation's closure has access to:
<table>
<tbody>
<tr>
<td>instance variables</td>
<td>instance variables of any scope</td>
</tr>
<tr>
<td>methods</td>
<td>methods of any access scope (although it is recommended to use public methods only)</td>
</tr>
<tr>
<td>static fields</td>
<td>static fields of any access scope</td>
</tr>
<tr>
<td>static methods</td>
<td>static methods of any access scope</td>
</tr>
</tbody>
</table>
</li>
	<li>Preconditions with <code>@Requires</code>

In order to specify preconditions on methods, use the <code>@Requires</code> annotation e.g.
[sourcecode language="groovy"]@Requires({ someProperty.size() &gt; 0 &amp;&amp; anotherProperty == someMethod() })[/sourcecode]
A <code>@Requires</code> annotation's closure has access to:
<table>
<tbody>
<tr>
<td>instance variables</td>
<td>instance variables of any access scope</td>
</tr>
<tr>
<td>methods</td>
<td>methods of any access scope (although it is recommended to use public methods only)</td>
</tr>
<tr>
<td>static fields</td>
<td>static fields of any access scope</td>
</tr>
<tr>
<td>static methods</td>
<td>static methods of any access scope</td>
</tr>
<tr>
<td>arguments</td>
<td>all arguments of the current method scope</td>
</tr>
</tbody>
</table>
</li>
	<li>Postconditions with <code>@Ensures</code>

In order to specify postconditions on methods, use the <code>@Ensures</code> annotation e.g.
[sourcecode language="groovy"]@Ensures({ someProperty.size() &gt; 0 &amp;&amp; anotherProperty == someMethod() })[/sourcecode]
An <code>@Ensures</code> annotation's closure has access to:
<table>
<tbody>
<tr>
<td>instance variables</td>
<td>instance variables of any access scope</td>
</tr>
<tr>
<td>methods</td>
<td>methods of any access scope (although it is recommended to use public methods only)</td>
</tr>
<tr>
<td>static fields</td>
<td>static fields of any access scope</td>
</tr>
<tr>
<td>static methods</td>
<td>static methods of any access scope</td>
</tr>
<tr>
<td>arguments</td>
<td>all arguments of the current method scope</td>
</tr>
<tr>
<td>method result</td>
<td>the method's return value (if not void) is available as closure parameter <code>result</code>. Thus, to access the return value of the current method specify a closure parameter <code>result</code>, e.g.
[sourcecode language="groovy"]@Ensures({ result -&gt; result &gt;= 0 })[/sourcecode]
</td>
</tr>
<tr>
<td>old attribute values</td>
<td>a map containing all attribute values before method execution is available as closure parameter <code>old</code>. Thus, to access the value of instance variables before method execution, specify a closure parameter <code>old</code>, e.g.
[sourcecode language="groovy"]@Ensures({ old -&gt; old.field1 != field1 })[/sourcecode]

Of course, the variable map does not contain copies of you domain's entity classes, it works with Java's built-in data types only, e.g. primitive values, reference types like <code>Integer</code>, <code>Boolean</code>, <code>Calendar</code>, <code>Date</code> and so on.

By the way, you can even use both closure parameters in the same closure, e.g. 
[sourcecode language="groovy"]@Ensures({ old, result -&gt; old.field1 != field1 &amp;&amp; result != field1 })[/sourcecode] or 
[sourcecode language="groovy"]@Ensures({ result, old -&gt; old.field1 != field1 &amp;&amp; result != field1 })[/sourcecode]

</td>
</tr>
</tbody>
</table>
</li>
	<li>Class-Invariant Point Cuts

In the case of pre- and postconditions the validation is done either at a method's start or end. In the case of class-invariants, gcontracts injects the invariant's condition at multiple point cuts.If a class contains a class-invariant definition, at run-time the class-invariant is checked at the following pointcuts:
<ol>
	<li>at the end of each constructor call</li>
	<li>at the end of each method call</li>
	<li>at the beginning of each method call</li>
</ol>
</li>
	<li>Class-Invariant Inheritance

Whenever class A specifies a class-invariant and class B extends A and specifies a class-invariant again, A's class-invariant is said to be inherited to class B's class invariant. In this context inherited means that A's invariant and B's invariant are logically combined with a boolean AND.<img src="http://andresteingress.files.wordpress.com/2010/04/class-invariant-inheritance.png" alt="Class Invariant Inheritance" title="Class Invariant Inheritance" width="234" height="230" class="aligncenter size-full wp-image-390" />gcontracts analyses the class inheritance line and links all class-invariants appearing in there. E.g. in the class inheritance line C - B - A (from bottom to top), C's class-invariant is linked with B and A ( C AND B AND A), B's class-invariant is linked with A's (B AND A).</li>
</ul>
<strong>gcontracts &gt; 1.0</strong>

Upcoming features in next versions of gcontracts will include:
<ul>
	<li>bug fixes</li>
	<li>pre- and postcondition inheritance</li>
	<li>performance tweaking</li>
	<li>configurability</li>
</ul>
<strong>Using gcontracts in your project</strong>

The easiest way of getting a gcontracts.jar is to get it from <a href="http://github.com/andresteingress/gcontracts/downloads">github's download section</a>. In addition, the project's root directory provides a Maven <code>pom.xml</code> for comfortable generation of the gcontracts.jar file. The library itself will be published to a public Maven repository soon.

Once you got a copy of the jar, add it to the project's classpath. This should be enough to let the Groovy compiler detect it and execute it during compilation.

<strong>Hint: </strong>If you decide to pull the repository from github, take care that you can't compile gcontracts and your project in a single compilation pass. This means, you need to ensure that your build process (let it be your IDE, or Ant, or Maven, ...) already has access to a compiled gcontracts.jar!

[0] <a href="http://andresteingress.wordpress.com/2010/03/31/contracts-in-the-domain-model/">Contracts in the Domain Model</a>
[1] <a href="http://wiki.github.com/andresteingress/gcontracts/">gcontracts wiki on github</a> ]]></content:encoded>
		<excerpt:encoded><![CDATA[gcontracts 1.0 released!]]></excerpt:encoded>
		<wp:post_id>28</wp:post_id>
		<wp:post_date>2010-04-01 12:28:52</wp:post_date>
		<wp:post_date_gmt>2010-04-01 11:28:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gcontracts-1-0-released</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[13220543]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1271915499]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>reddit</wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"count";s:1:"0";s:4:"time";s:10:"1293719904";}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Lazy vs. Eager Loading</title>
		<link>http://andresteingress.wordpress.com/2010/04/08/getting-the-persistence-context-picture-part-ii/lazy-eager-loading/</link>
		<pubDate>Thu, 08 Apr 2010 19:27:10 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://andresteingress.files.wordpress.com/2010/04/lazy-eager-loading.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>176</wp:post_id>
		<wp:post_date>2010-04-08 20:27:10</wp:post_date>
		<wp:post_date_gmt>2010-04-08 19:27:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>lazy-eager-loading</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>147</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://andresteingress.files.wordpress.com/2010/04/lazy-eager-loading.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/04/lazy-eager-loading.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"438";s:6:"height";s:3:"369";s:14:"hwstring_small";s:23:"height='96' width='113'";s:4:"file";s:94:"/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/04/lazy-eager-loading.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
		<wp:meta_value><![CDATA[Lazy vs. Eager Loading]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Getting the Persistence Context Picture (Part II)</title>
		<link>http://andresteingress.wordpress.com/2010/04/08/getting-the-persistence-context-picture-part-ii/</link>
		<pubDate>Thu, 08 Apr 2010 19:40:15 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[basic]]></category>

		<category domain="category" nicename="basic"><![CDATA[basic]]></category>

		<category><![CDATA[grails]]></category>

		<category domain="category" nicename="grails"><![CDATA[grails]]></category>

		<category><![CDATA[hibernate]]></category>

		<category domain="category" nicename="hibernate"><![CDATA[hibernate]]></category>

		<category><![CDATA[patterns]]></category>

		<category domain="category" nicename="patterns"><![CDATA[patterns]]></category>

		<guid isPermaLink="false">http://andresteingress.wordpress.com/?p=147</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://flattr.com/thing/75618/Getting-the-Persistence-Context-Picture-Part-2" target="_blank">
<img src="http://api.flattr.com/button/button-static-50x60.png" alt="Flattr this" title="Flattr this" border="0" align="right" vspace="5" hspace="10" /></a><a href="http://andresteingress.wordpress.com/2010/03/23/getting-the-persistence-context-picture-part-i/">The first article of this series</a> [0] took a look at the basic patterns found in todays persistence frameworks. In this article we will have a look at how Hibernate APIs relate to those patterns and how Hibernate is utilized in Grails.
<h4>A Closer Look at Hibernate's Persistence Context APIs</h4>
All data creation, modification and altering has to be done in a <em>persistence context</em>. A persistence context is a concrete software element that maintains a list of all object modifications and, in a nutshell, at the end of the persistence context life-time or business transaction synchronizes them with the current database state.

When developing with a modern web framework - as Grails is - it is most likely you don't even have to care about opening a persistence context or closing it, or even know about how this could be done.

But as application complexity raises,  you have to know Hibernate's persistence context APIs and understand how they are integrated within the web application framework of your choice. Let us take a look at the most import APIs and how they correspond to persistence patterns.
<h4>The Registry Pattern or <code>org.hibernate.SessionFactory</code></h4>
The <code>SessionFactory</code> class implements the registry pattern. A registry is used by the infrastructure-layer to obtain a reference to the current persistence context, or to create a new one if not found in the current context.

Usually, as noted in SessionFactory's Java documentation, a session-factory refers to a single persistence provider. Most of the time, application need just a single session-factory. Indeed, if an application wanted to work across multiple databases, it would have to maintain multiple <code>SessionFactory</code> instances, one for each database.

Imagine a session-factory to be a configuration hub - it is the place where all configuration settings are read and used for constructing persistence contexts.

In a Grails application, the application's session-factory can be easily obtained by declaring a property of type <code>org.hibernate.SessionFactory</code>:

[sourcecode language="groovy"]

class SomeService {

    SessionFactory sessionFactory

    void myServiceMethod()  {
        def session = sessionFactory.getCurrentSession()
        // ...
    }
}
[/sourcecode]

The Grails application's session-factoy is than injected by dependency injection since every Grails service class is a Spring-managed component. Other components include controllers, domain-classes and custom beans (either in <code>beans.groovy</code>, <code>beans.xml</code>, other bean definition XMLs or annotated Groovy/Java classes).

A Grails application's session-factory is set-up by the <code>HibernatePluginSupport</code> class, which is a utility class used by Grails hibernate plugin. When taking a look at the source code you'll find out that the code uses Grails Spring builder DSL to declare a <code>ConfigurableLocalSessionFactoryBean</code>. This type of bean is usually used in Spring applications to create a Hibernate session-factory instance during application bootstrap and to keep track of it during the entire life-time of the application-context.

[sourcecode language="groovy"]
//...
sessionFactory(ConfigurableLocalSessionFactoryBean) {
    dataSource = dataSource
    // ...
    hibernateProperties = hibernateProperties
    lobHandler = lobHandlerDetector
}
//...
[/sourcecode]

Btw, if we would have to create a session-factory within a plain Groovy application, it wouldn't get much harder:

[sourcecode language="groovy"]

def configuration = new Configuration()
    .setProperty(&quot;hibernate.dialect&quot;, &quot;org.hibernate.dialect.MySQLInnoDBDialect&quot;)
    .setProperty(&quot;hibernate.connection.datasource&quot;, &quot;java:comp/env/jdbc/test&quot;)
    .setProperty(&quot;hibernate.order_updates&quot;, &quot;true&quot;)
    // ...

def sessionFactory = configuration.buildSessionFactory()
[/sourcecode]

The <code>Configuration</code> class can be used to configure a session-factory programatically, other options would be to use a properties-file or an XML file (named <code>hibernate.properties</code> or <code>hibernate.cfg.xml</code>). If using any of the file-based configurations, take care your configuration file can be loaded by the current class-loader, therefore put it in the class-path's root directory.

Grails configuration of Hibernate's session-factory is pretty much hided from application developers. In order to provide a custom <code>hibernate.cfg.xml</code>, just put it in the <code>grails-app/conf/hibernate</code> folder.
<h4>The Persistence-Context Pattern or <code>org.hibernate.Session</code></h4>
The Session builds the heart of Hibernate: it resembles a persistence context. Thus, whenever the application needs to access object-mapping functionality in either form, it needs to work with an instance of type <code>Session</code>.

The <code>Session</code> interface provides a bunch of methods letting the application infrastructure interact with the persistence context:

[sourcecode language="java"]
        // ...
	public Query createQuery(String queryString) throws HibernateException;

	public SQLQuery createSQLQuery(String queryString) throws HibernateException;

	public Query createFilter(Object collection, String queryString) throws HibernateException;

	public Query getNamedQuery(String queryName) throws HibernateException;

	public void clear();

	public Object get(Class clazz, Serializable id) throws HibernateException;

	public void setReadOnly(Object entity, boolean readOnly);

	public void doWork(Work work) throws HibernateException;

	Connection disconnect() throws HibernateException;

	void reconnect() throws HibernateException;

	void reconnect(Connection connection) throws HibernateException;
        // ...
[/sourcecode]

Whenever e.g. a query is created by one of the querying methods, all objects which are retrieved are automatically linked to the session. For each attached (Hibernate term for "linked") object, the session holds a reference and meta-data about it. Whenever a transient Groovy object is saved, it gets automatically attached to the current session. Notice that this is a unidirectional relationship: the session knows everything whereas the attached object instances don't know anything about being linked to a session.
<h4>Lazy and Eager Loading</h4>
In regard to attaching objects to the current session, you need to know the concepts of lazy and eager loading of object relationships.

Whenever a persistent class <code>A</code> references another persistent class <code>B</code>, <code>A</code> is said to have a relationship with <code>B</code>. Object relationships are mapped either with foreign keys or relationship tables in the underlying database schema. As default, Hibernate uses a <em>lazy loading</em> approach: whenever a root object with relations to other objects is loaded, the related objects are not loaded. The other approach would be <em>eager loading</em>, where the object relationship is loaded with the root object.

<a href="http://andresteingress.files.wordpress.com/2010/04/lazy-eager-loading.png"><img class="aligncenter size-full wp-image-176" title="Lazy vs. Eager Loading" src="http://andresteingress.files.wordpress.com/2010/04/lazy-eager-loading.png" alt="Lazy vs. Eager Loading" width="438" height="369" /></a>

Lazy loading does not hurt as long as objects are attached to a persistence context. Although, if the persistence context is closed, there is no way to navigate over a lazy loaded relationship. Whenever application code needs to access lazy relationships this leads to a lazy loading exceptions.
<h4>Obtaining a Session</h4>
Per default, a session instance can be obtained using a session-factory instance:

[sourcecode language="groovy"]

def session = sessionFactory.openSession()
def tx = session.beginTransaction()

// ... work with the session

tx.commit()
session.close()

[/sourcecode]

As it is the case with the code sample above, most of the time application code is working in a transactional context, that is, the current method is executed within a single transaction. Therefore, it is a common idiom to open a transaction with the beginning of a session, although this is not enforced by Hibernate's API. If we would not use transaction boundaries, we could just omit the method call to <code>beginTransaction</code>:

[sourcecode language="groovy"]

def session = sessionFactory.openSession()

// ... work with the session

session.close()

[/sourcecode]

You need to be careful in this scenario. If Hibernate obtains a JDBC connection, it automatically turns autocommit mode off by setting <code>jdbcConnection.setAutoCommit(false)</code>. Indeed, this is the JDBC way to tell the database to start a new transaction. However, how the database driver reacts on pending transactions is not specified, an application runs into undefined behavior.
<h4>General Session-Handling in Grails</h4>
As manual session handling can get tricky, web frameworks like Grails hide most of these problems. The Grails' Object Relational Mapping (GORM) layer is a thin layer above Hibernate 3. Grails uses this layer to enrich domain classes with a lot of DAO like functionality. E.g. to each domain class so-called dynamic finders are added, which most of the time completely replace the need for data access objects (DAOs). Handling of Hibernate sessions is mainly hidden by GORM which internally uses Spring's Hibernate integration and Hibernate.

Whenever executing a GORM query Grails internally creates a <code>HibernateTemplate</code>. A <code>HibernateTemplate</code> is a neat way to get defined access to a Hibernate session. It completely hides getting the session-factory and retrieving a session. Clients only need to implement callback methods, which are than called on execution of that template. Let's take a look how such templates are used when executing e.g. a dynamic finder method like <code>findBy</code>.

[sourcecode language="groovy"]

class SomeController {
  def myAction()  {
    def User user = User.findByLogin(params.id)
    // ...
  }
}

[/sourcecode]

When invoking the static <code>findBy</code> dynamic finder method, the following code is executed:

[sourcecode language="java"]

// ...
return super.getHibernateTemplate().execute( new HibernateCallback() {
    public Object doInHibernate(Session session) throws HibernateException, SQLException {
        Criteria crit = getCriteria(session, additionalCriteria, clazz);
	// ... do some criteria building

        final List list = crit.list();
        if(!list.isEmpty()) {
            return GrailsHibernateUtil.unwrapIfProxy(list.get(0));
        }
        return null;
     }
});
[/sourcecode]

As can be seen, Grails internally does nothing more than creating a Spring <code>HibernateTemplate</code> and in its <code>doInHibernate</code> callback, creates a plain Hibernate <code>Criteria</code> object which is used to specify object queries. Spring hides the code of finding the current session and setting properties according to the current program context, GORM adds this functionality and does all Groovy meta-programming stuff (adding static methods etc. to the domain's meta class).

The same is true for saving domain objects using GORM's <code>save</code> method:

[sourcecode language="java"]
protected Object performSave(final Object target, final boolean flush) {
        HibernateTemplate ht = getHibernateTemplate();
        return ht.execute(new HibernateCallback() {
            public Object doInHibernate(Session session) throws HibernateException, SQLException {
                session.saveOrUpdate(target);
                if(flush) {
                    // ...
                    getHibernateTemplate().flush();
                    // ...
                }
                return target;
            }
        });
}
[/sourcecode]
<h4>Session Flushing</h4>
Since a session spans a <em>business transaction</em> (remember, not the same as a technical transaction) it might be left open by the infrastructure-layer over several user interaction requests. The application needs to ensure that a session is closed and its state synchronized with the database at some time, which is called <em>flushing</em> a session.

As we have already seen in the Grails source code above, flushing is mainly handled by the web framework, but programmers should know the point-cuts where it actually happens:
<ul>
	<li>whenever a  <code>Transaction</code> gets committed</li>
	<li>before a query is executed</li>
	<li>if <code>session.flush()</code> is called explicitly</li>
</ul>
Be aware that flushing is a costly operation in a persistence context, as Hibernate needs to synchronize the current object model in memory with the database. Programmers could change the default behavior described above by setting an alternate flush mode on the current session:

[sourcecode language="groovy"]
def session = sessionFactory.openSession()
session.setFlushMode(FlushMode.NEVER)
[/sourcecode]

<code>FlushMode.NEVER</code> in this case means that session flushing is deactivated, only explicit calls to <code>session.flush()</code> triggers it.

In Grails, session flushing is done after each controller call, due to Spring's <code>OpenSessionInView</code> interception mechanism. In order to access lazy-loaded properties in GSP pages, the session is not closed completely after a controller's method call but after response rendering is done. Therefore, it sets session flushing mode to <code>FlushMode.NEVER</code> after a controller method call to avoid DB modifications caused by GSP page code.

Another place where sessions get flushed, is at the end of each service method call (as long as the service is marked as being <code>transactional</code> or is annotated with <code>@Transactional</code>):

[sourcecode language="groovy"]
class SomeService {
    static transactional = true

    def someMethod()  {
       // ... transactional code
    }
}
[/sourcecode]

[sourcecode language="groovy"]
class SomeService {

    @Transactional
    def someMethod()  {
       // ... transactional code
    }
}
[/sourcecode]

When doing integration tests on Grails classes, you need to remind these point-cuts where sessions get flushed. To make things even more complicated, there is one additional thing that is different in integration tests: each integration test method runs in its own transaction, which at the end is rollbacked by Grails testing classes. E.g. if testing a controller's save method, chances are you can't find an SQL INSERT or UPDATE statement in database logs. This is the intended behavior, but it causes confusion if bugs dealing with persistence issues need to be reproduced by test-cases.

If it is about transactions in integration tests, there is a way to deactivate transaction boundaries there:

[sourcecode language="groovy"]
class SomeTest extends GrailsTestCase {
    static transactional = false

    @Test
    def testWithoutTransactionBoundary()  {
       // ... transactional code
    }
}
[/sourcecode]
<h4>Summary</h4>
In this article we took a look at how Grails and GORM handles Hibernate's basic APIs: the <code>SessionFactory</code> and the <code>Session</code>. The next article in this series will deal with more advanced features: GORM in batch-jobs and conversational state management.

[0] <a href="http://andresteingress.wordpress.com/2010/03/23/getting-the-persistence-context-picture-part-i/">Getting the Persistence Context Picture (Part I)</a>
[1] <a href="http://www.hibernate.org/">Hibernate Project</a>
[2] <a href="http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/orm.html#orm-hibernate">Spring Hibernate Integration</a>
[3] <a href="http://grails.org/doc/latest/guide/5.%20Object%20Relational%20Mapping%20(GORM).html">Grails GORM Documentation</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>147</wp:post_id>
		<wp:post_date>2010-04-08 20:40:15</wp:post_date>
		<wp:post_date_gmt>2010-04-08 19:40:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>getting-the-persistence-context-picture-part-ii</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[13220543]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1287738212]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>reddit</wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"count";s:1:"0";s:4:"time";s:10:"1293719756";}]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>10</wp:comment_id>
		<wp:comment_author><![CDATA[Peter Niederwieser]]></wp:comment_author>
		<wp:comment_author_email>pniederw@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://spockframework.org</wp:comment_author_url>
		<wp:comment_author_IP>90.146.215.104</wp:comment_author_IP>
		<wp:comment_date>2010-04-09 00:29:46</wp:comment_date>
		<wp:comment_date_gmt>2010-04-08 23:29:46</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Great stuff! Looking forward to the next part.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>93</wp:comment_id>
		<wp:comment_author><![CDATA[Ewan Dawson]]></wp:comment_author>
		<wp:comment_author_email>ewan@lazygun.net</wp:comment_author_email>
		<wp:comment_author_url>http://www.lazygun.net</wp:comment_author_url>
		<wp:comment_author_IP>95.145.179.82</wp:comment_author_IP>
		<wp:comment_date>2010-07-04 11:36:22</wp:comment_date>
		<wp:comment_date_gmt>2010-07-04 10:36:22</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Small point regarding the section on session flushing: FlushMode.NEVER has been deprecated in favour of FlushMode.MANUAL for a while now, although the semantics are the same.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>Scripted Beans in Spring</title>
		<link>http://andresteingress.wordpress.com/2010/04/13/groovy-in-spring-applications/scripted-objects-in-spring/</link>
		<pubDate>Tue, 13 Apr 2010 13:48:18 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://andresteingress.files.wordpress.com/2010/04/scripted-objects-in-spring.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>239</wp:post_id>
		<wp:post_date>2010-04-13 14:48:18</wp:post_date>
		<wp:post_date_gmt>2010-04-13 13:48:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>scripted-objects-in-spring</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>188</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://andresteingress.files.wordpress.com/2010/04/scripted-objects-in-spring.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/04/scripted-objects-in-spring.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"453";s:6:"height";s:3:"637";s:14:"hwstring_small";s:22:"height='95' width='68'";s:4:"file";s:102:"/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/04/scripted-objects-in-spring.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
		<wp:meta_value><![CDATA[Scripted Beans in Spring]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Integrating Groovy in Legacy Spring Applications</title>
		<link>http://andresteingress.wordpress.com/2010/04/13/groovy-in-spring-applications/</link>
		<pubDate>Tue, 13 Apr 2010 19:06:58 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[groovy]]></category>

		<category domain="category" nicename="groovy"><![CDATA[groovy]]></category>

		<category><![CDATA[spring framework]]></category>

		<category domain="category" nicename="spring-framework"><![CDATA[spring framework]]></category>

		<guid isPermaLink="false">http://andresteingress.wordpress.com/?p=188</guid>
		<description></description>
		<content:encoded><![CDATA[There are times when you have (or want ;-)) to integrate Groovy in a productive application or, in more complex applications, you just want to realize your application's controller and/or view part (think M-V-C) in a dynamic language, but leave the rest in good-old Spring. Starting with version 2.0, Spring offers support for dynamic languages and comes with support for integrating beans written in Groovy out-of-the-box.

<h4>Dynamic Language Support in the Spring Framework</h4>

Spring's dynamic language support currently supports Groovy, JRuby and BeanShell. The integration layer itself consists of several classes dealing with dynamic class loading/creation and class reloading, all of them can be found in <code>org.springframework.scripting</code> which is part of the <code>org.springframework.context</code> Maven module.

Let us first of all take a look at how the integration of Groovy scripts works. In order to declare a controller bean, we would have to use the following XML snippet in the MVC dispatcher context file:

[sourcecode language="xml"]
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans...&gt;
  &lt;lang:groovy id=&quot;personController&quot; script-source=&quot;classpath:PersonController.groovy&quot;&gt;
    &lt;lang:property name=&quot;personRepository&quot; ref=&quot;personRepository&quot; /&gt;
  &lt;/lang:groovy&gt;

  &lt;!-- an otherwise normal bean that will be injected by the Groovy-backed Messenger --&gt;
  &lt;bean id=&quot;personRepository&quot; class=&quot;org.some.domain.PersonRepositoryJDBC&quot;&gt;
      &lt;!-- ... --&gt;
  &lt;/bean&gt;
&lt;/beans&gt;
[/sourcecode]

Notice, that the <code>lang</code> namespace is used as a special namespace. Spring's <code>LangNamespaceHandler</code> registers for <code>groovy</code>, <code>jruby</code> and <code>bsh</code> elements and, for each language, logically links them to custom <code>ScriptFactory</code> implementations:

[sourcecode language="Java"]
public class LangNamespaceHandler extends NamespaceHandlerSupport {
  // ...  
  registerScriptBeanDefinitionParser(&quot;groovy&quot;, &quot;org.springframework.scripting.groovy.GroovyScriptFactory&quot;);
  registerScriptBeanDefinitionParser(&quot;jruby&quot;, &quot;org.springframework.scripting.jruby.JRubyScriptFactory&quot;);
  registerScriptBeanDefinitionParser(&quot;bsh&quot;, &quot;org.springframework.scripting.bsh.BshScriptFactory&quot;);
  // ...
[/sourcecode]

At run-time, this task is done by an instance of <code>ScriptBeanDefinitionParser</code>: for each bean definition prefixed with <code>lang</code> it generates a script factory bean according to the language element being specified. All XML attributes of <code>lang:groovy</code> are indeed used to specify a script factory and not the Groovy object itself.

Let us take a look at the <code>ScriptFactory</code> interface:

[sourcecode language="Java"]

public interface ScriptFactory {

  String getScriptSourceLocator();

  Class[] getScriptInterfaces();

  boolean requiresConfigInterface();

  Object getScriptedObject(ScriptSource scriptSource, Class[] actualInterfaces);

  Class getScriptedObjectType(ScriptSource scriptSource);

  boolean requiresScriptedObjectRefresh(ScriptSource scriptSource);
}

[/sourcecode]

The most interesting methods are <code>getScriptedObject</code>, <code>getScriptedType</code> and <code>requiresScriptedObjectRefresh</code>. 

<code>getScriptedType</code> is mainly used by Spring's IoC container to determine the bean type and check whether it implements certain interfaces, not much magic implied here.

<code>requiresScriptedObjectRefresh</code> can be used for a certain script source to determine whether it has been modified and requires a refresh. Refreshing of dynamic beans is the <em>main feature</em> justifying using dynamic language support. One could easily configure the application to refresh Groovy beans during development, but keeping them static in the production environment (who would ever consider to take a change directly in a source-file in the production environment ;-)), tremendously fastening development.

<code>getScriptedObject</code> is the heart of each script factory implementation. It is used as a <i>factory method</i> to create scripted Java objects. 

<h4>Scripted Java Objects</h4>

Let us take a look at the Groovy script factory implementation, which is found in <code>GroovyScriptFactory</code>. 

[sourcecode language="Java"]
public Object getScriptedObject(ScriptSource scriptSource, Class[] actualInterfaces)  {

  synchronized (this.scriptClassMonitor) {
    // some caching stuff...
					
    this.scriptClass = getGroovyClassLoader().parseClass(scriptSource.getScriptAsString(),         scriptSource.suggestedClassName());

  if (Script.class.isAssignableFrom(this.scriptClass)) {
    // A Groovy script, probably creating an instance: let's execute it.
    Object result = executeScript(scriptSource, this.scriptClass);
    this.scriptResultClass = (result != null ? result.getClass() : null);
    return result;
  } else {
    this.scriptResultClass = this.scriptClass;
  }
  }
  scriptClassToExecute = this.scriptClass;
}

// Process re-execution outside of the synchronized block.
return executeScript(scriptSource, scriptClassToExecute);
		
[/sourcecode]

and in <code>executeScript</code>:

[sourcecode language="Java"]
protected Object executeScript(ScriptSource scriptSource, Class scriptClass) throws ScriptCompilationException {
			
  // ...
  GroovyObject goo = (GroovyObject) scriptClass.newInstance();

  if (this.groovyObjectCustomizer != null) {
    // Allow metaclass and other customization.
    this.groovyObjectCustomizer.customize(goo);
  }

  if (goo instanceof Script) {
    // A Groovy script, probably creating an instance: let's execute it.
    return ((Script) goo).run();
  } else {
    // An instance of the scripted class: let's return it as-is.
    return goo;
  }
  // ...
}
[/sourcecode]

As can be seen in the source snippet, <code>getScriptedObject</code> uses a <code>GroovyClassLoader</code> to parse the given script source string and to create a Java class object instance from it [<a href="http://groovy.codehaus.org/Embedding+Groovy">3</a>]. Since every script factory is directly connected to a single script source, the embedded caching mechanism is as easy as holding an instance variable to the scripted object and class.

Another possibility for the <code>GroovyScriptFactory</code> would have been to use Groovy's <code>GroovyScriptEngine</code>. In contrast to Groovy's class loader it recognizes changes in the class inheritance paths and reloads affected class files directly. If you do not want to customize Spring's behavior you have to be aware of that circumstance.

So far we have seen how a single XML bean definition relates to a script factory and how that script factory can be used to create dynamic objects, but where is the place that calls <code>getScriptedObject</code>? The answer is: that place needs to be generated by the <code>ScriptFactoryPostProcessor</code>, which is a descendant of Spring's bean-post processor interface.

<h4>ScriptFactoryPostProcessor</h4>

First of all, the <code>BeanPostProcessor</code> interface specifies callbacks which can be used as hook-ins for custom modification of container-managed beans. ApplicationContexts will automatically detect beans of this type and apply them on subsequent bean creations. If you use your favorite IDE's command to show all descendants of <code>BeanPostProcessor</code> you will notice that there are plenty of them. One with particular importance in the case of dynamic language support is the <code>InstantiationAwareBeanPostProcessor</code>.

<code>InstantiationAwareBeanPostProcessor</code> is used to intercept the application container before instantiation and after instantiating a managed-bean. This post-processor type is typically used to suppress object instantiation of the specified bean and to create some proxy or other place-holder to intercept bean method calls.

Spring's Groovy integration provides an implementation of that post-processor: <code>ScriptFactoryPostProcessor</code>.

The script factory post-processor hooks into the post-process after object instantiation. As we have already seen the bean definition parser created script factory object beans. It is the script factory post-processor which intercepts creation of script factories <i>before</i> the factory object has been instantiated.

When we take a look at XML bean definition again

[sourcecode language="xml"]
&lt;lang:groovy id=&quot;personController&quot; script-source=&quot;classpath:PersonController.groovy&quot;&gt;
  &lt;lang:property name=&quot;personRepository&quot; ref=&quot;personRepository&quot; /&gt;
&lt;/lang:groovy&gt;
[/sourcecode]

we know that the definition is some kind of hybrid between script factory (defined by the XML attributes) and scripted object (defined by the properties) definition. 

Splitting into two separate bean definitions, a factory bean definition and a scripted object bean definition, is exactly what the <code>ScriptFactoryPostProcessor</code> does:

[sourcecode language="Java"]
// ...
this.scriptBeanFactory.registerBeanDefinition(scriptFactoryBeanName, createScriptFactoryBeanDefinition(bd));
// ...
BeanDefinition objectBd = createScriptedObjectBeanDefinition(bd, scriptFactoryBeanName, scriptSource, scriptedInterfaces);
// ...
[/sourcecode]

The code creating the object bean definition looks the following way:

[sourcecode language="Java"]
protected BeanDefinition createScriptedObjectBeanDefinition(BeanDefinition bd, String scriptFactoryBeanName, ScriptSource scriptSource, Class[] interfaces) {

    GenericBeanDefinition objectBd = new GenericBeanDefinition(bd);
    objectBd.setFactoryBeanName(scriptFactoryBeanName);
    objectBd.setFactoryMethodName(&quot;getScriptedObject&quot;);
    objectBd.getConstructorArgumentValues().clear();
    objectBd.getConstructorArgumentValues().addIndexedArgumentValue(0, scriptSource);
    objectBd.getConstructorArgumentValues().addIndexedArgumentValue(1, interfaces);
    return objectBd;
}
[/sourcecode]

The <code>BeanDefinition</code> instance which is handed as the first argument, holds the initial bean definition. It is copied and the bean rewritten to be a <a href="http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/beans.html#beans-factory-class-instance-factory-method">bean created by a factory method</a>. After all, Spring's Groovy integration and related components modify the initial XML definition to something like:

[sourcecode language="xml"]
&lt;bean name=&quot;scriptFactory.personController&quot; class=&quot;org.springframework.scripting.groovy.GroovyScriptFactory&quot;&gt;
   &lt;constructor-arg type=&quot;java.lang.String&quot; value=&quot;classpath:PersonController.groovy&quot;/&gt; 
&lt;/bean&gt;

&lt;bean id=&quot;personController&quot; name=&quot;scriptedObject.personController&quot; factory-bean=&quot;scriptFactory.messenger&quot; factory-method=&quot;getScriptedObject&quot; class=&quot;groovy.script.PersonController&quot;&gt;
   &lt;!-- ... --&gt;
&lt;/bean&gt;

[/sourcecode]

<a href="http://andresteingress.files.wordpress.com/2010/04/scripted-objects-in-spring.png"><img src="http://andresteingress.files.wordpress.com/2010/04/scripted-objects-in-spring.png" alt="Scripted Beans in Spring" title="Scripted Beans in Spring" width="453" height="637" class="aligncenter size-full wp-image-239" /></a>

As already mentioned, one of the main reasons you may want to use Spring's Groovy integration is dynamic refreshing of Groovy classes during run-time. The question which might raise is: why is it worth to use Spring's integration and not a custom solution like throwing GroovyClassLoader in the class loader hierarchy?

<h4>Refreshing Groovy Beans</h4>

Refreshing Groovy beans can be comfortable during development. In fact, refreshing beans comes down to reloading modified Groovy classes at run-time. I guess you already know that this is a potential trap for memory leaks (for an introduction to this problem take a look at [<a href="http://www.zeroturnaround.com/blog/reloading-objects-classes-classloaders/">0</a>] or [<a href="http://blogs.sun.com/fkieviet/entry/classloader_leaks_the_dreaded_java">1</a>]).

Spring takes on a burden and solves the problem of class reloading and memory leaks by implementing a mechanism which allows beans to refresh themselves at some time during container life-time. AOP proxies are used to utilize this behavior. In the case of its dynamic language support, it provides a <code>RefreshableScriptTargetSource</code> which is responsible for providing a fresh bean whenever a certain delay has occurred. Creating a fresh mean is simply done by calling <code>getBean</code> of the current bean factory:

[sourcecode language="Java"]
protected Object obtainFreshBean(BeanFactory beanFactory, String beanName) {
    return beanFactory.getBean(beanName);
}
[/sourcecode]

This code only works since the scriptable bean post-processor checks whether a delay has been set in the XML configuration and, if yes, applies the <code>PROTOTYPE</code> scope to the scripted object bean:

[sourcecode language="Java"]
long refreshCheckDelay = resolveRefreshCheckDelay(bd);
if (refreshCheckDelay &gt;= 0) {
    objectBd.setScope(BeanDefinition.SCOPE_PROTOTYPE);
}
[/sourcecode]

The <code>BeanDefinition.SCOPE_PROTOTYPE</code> scope causes the application container to create a new instance whenever the bean is retrieved via <code>getBean</code> et. al. methods. Whenever a bean needs to be refreshed the factory method of the script factory, <code>getScriptedObject</code>, will be called to get a newly created scripted object bean.

<h4>Additional Features</h4>

If you know Grails and its object-relational mapping framework GORM, you surely have seen dynamically added methods, e.g. dynamic findes like <code>User.findAllByLogin("mustermann")</code>. Spring's integration layer provides a way for Groovy objects to register so-called <code>GroovyObjectCustomizer</code> implementations with Groovy script factories.

The purpose of a <code>GroovyObjectCustomizer</code> is to allow customization of all Groovy objects, generated by the given script factory. The interface is as easy as:

[sourcecode language="Java"]
public interface GroovyObjectCustomizer {
  void customize(GroovyObject goo);
}
[/sourcecode]

This interface's implementations can be specified via the <code>customizer-ref</code> XML attribute.

[sourcecode language="XML"]
&lt;bean id=&quot;groovyObjectCustomizer&quot; class=&quot;org.some.groovy.GlobalGroovyObjectCustomizer&quot;/&gt;

&lt;lang:groovy id=&quot;personController&quot; script-source=&quot;classpath:PersonController.groovy&quot; customizer-ref=&quot;groovyObjectCustomizer&quot;&gt;
  &lt;lang:property name=&quot;personRepository&quot; ref=&quot;personRepository&quot; /&gt;
&lt;/lang:groovy&gt;
[/sourcecode]

The <code>groovyObjectCustomizer</code> can than be used to do meta-programming, etc.

<h4>Alternatives</h4>

Notice, integrating Groovy in Spring does not need to be that complicated anyway if you don't care about dynamically reloading Groovy sources. Since Groovy comes with its own compiler, it all comes down to JVM byte-code at the end. That means you are free to use all of Spring's features as long as the outcoming byte-code conforms to that of its Java equivalent. E.g. you can use Spring MVC annotations to declare controllers:

[sourcecode language="groovy"]
@RequestMapping(&quot;/person/**&quot;)
@Controller
class PersonController {

  @Autowired
  def PersonRepository personRepository

  @RequestMapping(value = &quot;/person&quot;, method = RequestMethod.POST)
  def String create(@Valid Person person, BindingResult result, ModelMap model) {

    if (result.hasErrors()) {
      model[&quot;person&quot;] = person
      &quot;person/create&quot;
    } else {

      personRepository.persist person

      redirect &quot;/person/${person.getId()}&quot;
    }
  }

  @RequestMapping(value = &quot;/person/form&quot;, method = RequestMethod.GET)
  def String createForm(ModelMap model) {
    model[&quot;person&quot;] = new Person()

    &quot;person/create&quot;
  }

  @RequestMapping(value = &quot;/person/{id}&quot;, method = RequestMethod.GET)
  def String show(@PathVariable(&quot;id&quot;) Long id, ModelMap model) {
    model[&quot;person&quot;] = personRepository.findPerson(id)

    &quot;person/show&quot;
  }
  // ...
}
[/sourcecode]

There is no additional configuration effort. This makes it even more interesting to implement the controller and view completely on top of Groovy and realize the domain in statically typed, good-old Java.

<h4>Summary</h4>

Spring's dynamic language support covers Groovy, JRuby and BeanShell out-of-the-box and could be easily extended. The framwork's approach is to support certain artifacts to be implemented by Groovy, e.g. Controllers, Repositories, Services etc. 

The main feature that would suffice to actually use its integration layer, instead of compiling classes and getting the application's build-processes in the correct order, is refreshing of scripted objects. Although you might not want to enable this feature in production, it indeed saves you a lot of time during development and it saves a lot of headaches for taking care of class loading memory leaks.

[0] <a href="http://www.zeroturnaround.com/blog/reloading-objects-classes-classloaders/">Reloading Java Classes: Objects, Classes and ClassLoaders</a>
[1] <a href="http://blogs.sun.com/fkieviet/entry/classloader_leaks_the_dreaded_java">ClassLoader leaks: the dreaded "Out of Memory" Exception</a>
[2] <a href="http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/dynamic-language.html">Spring Documentation - Dynamic Language Support</a>
[3] <a href="http://groovy.codehaus.org/Embedding+Groovy">Embedding Groovy - Groovy Project Codehaus</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[Spring comes with support for Groovy out-of-the-box. How this is realized and why you want to choose alternative approaches is handled by this article.]]></excerpt:encoded>
		<wp:post_id>188</wp:post_id>
		<wp:post_date>2010-04-13 20:06:58</wp:post_date>
		<wp:post_date_gmt>2010-04-13 19:06:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>groovy-in-spring-applications</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1290020662]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[13220543]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>reddit</wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"count";s:1:"0";s:4:"time";s:10:"1293719749";}]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>327</wp:comment_id>
		<wp:comment_author><![CDATA[E]]></wp:comment_author>
		<wp:comment_author_email>purabasuraesta@yahoo.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>84.26.40.224</wp:comment_author_IP>
		<wp:comment_date>2010-11-17 17:40:24</wp:comment_date>
		<wp:comment_date_gmt>2010-11-17 16:40:24</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Hi, wonderful article. a bit hard to find on the internet though. I like your explanation, which is clear and complete. I have a goal to learn the insides of how spring works so that i can customize my applications, and your post helped alot. can you tell me how you learn this information. just by digging through the code? Thanks!]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>329</wp:comment_id>
		<wp:comment_author><![CDATA[andresteingress]]></wp:comment_author>
		<wp:comment_author_email>grails.inside@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://andresteingress.wordpress.com</wp:comment_author_url>
		<wp:comment_author_IP>91.115.74.20</wp:comment_author_IP>
		<wp:comment_date>2010-11-17 20:04:15</wp:comment_date>
		<wp:comment_date_gmt>2010-11-17 19:04:15</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[in that particular case a lot of code digging has been involved, yes. but in general i think when you have to know bloody details the actual source code is always your best friend :-)]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>327</wp:comment_parent>
		<wp:comment_user_id>13220543</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>IntelliJ Maven Dependency</title>
		<link>http://andresteingress.wordpress.com/2010/04/14/gcontracts-available-in-maven-central-repository/screeny/</link>
		<pubDate>Wed, 14 Apr 2010 08:28:59 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://andresteingress.files.wordpress.com/2010/04/screeny.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>256</wp:post_id>
		<wp:post_date>2010-04-14 09:28:59</wp:post_date>
		<wp:post_date_gmt>2010-04-14 08:28:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>screeny</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>251</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://andresteingress.files.wordpress.com/2010/04/screeny.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/04/screeny.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"413";s:6:"height";s:2:"66";s:14:"hwstring_small";s:23:"height='20' width='128'";s:4:"file";s:83:"/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/04/screeny.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
		<wp:meta_value><![CDATA[IntelliJ Maven Dependency]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>gcontracts Available in Maven Central Repository</title>
		<link>http://andresteingress.wordpress.com/2010/04/14/gcontracts-available-in-maven-central-repository/</link>
		<pubDate>Wed, 14 Apr 2010 09:37:47 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[gcontracts]]></category>

		<category domain="category" nicename="gcontracts"><![CDATA[gcontracts]]></category>

		<guid isPermaLink="false">http://andresteingress.wordpress.com/?p=251</guid>
		<description></description>
		<content:encoded><![CDATA[gcontracts is finally available in Maven's central repository:

<a href="http://repo2.maven.org/maven2/org/gcontracts/">http://repo2.maven.org/maven2/org/gcontracts/</a>

To use gcontracts in your Maven project, define a dependency as this XML code snippet shows:

[sourcecode language="xml"]
&lt;dependency&gt;
  &lt;groupId&gt;org.gcontracts&lt;/groupId&gt;
  &lt;artifactId&gt;gcontracts&lt;/artifactId&gt;
  &lt;version&gt;1.0.1&lt;/version&gt;
&lt;/dependency&gt;
[/sourcecode]

Reload the Maven dependencies in your IDE and gcontracts appears as project dependency (in my case in IntelliJ):

<a href="http://andresteingress.files.wordpress.com/2010/04/screeny.png"><img src="http://andresteingress.files.wordpress.com/2010/04/screeny.png" alt="IntelliJ Maven Dependency" title="IntelliJ Maven Dependency" width="413" height="66" class="aligncenter size-full wp-image-256" /></a>

More information on this topic can be found on the <a href="http://wiki.github.com/andresteingress/gcontracts/maven">github project page</a>.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>251</wp:post_id>
		<wp:post_date>2010-04-14 10:37:47</wp:post_date>
		<wp:post_date_gmt>2010-04-14 09:37:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gcontracts-available-in-maven-central-repository</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>reddit</wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"count";s:1:"0";s:4:"time";s:10:"1293719763";}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[13220543]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1272347819]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>22</wp:comment_id>
		<wp:comment_author><![CDATA[gcontracts 1.0.1 Released &laquo; Grails Inside]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://andresteingress.wordpress.com/2010/04/27/gcontracts-1-0-1-released/</wp:comment_author_url>
		<wp:comment_author_IP>66.135.48.157</wp:comment_author_IP>
		<wp:comment_date>2010-04-27 06:54:18</wp:comment_date>
		<wp:comment_date_gmt>2010-04-27 05:54:18</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] can get gcontracts 1.0.1 by defining a Maven dependency or in github&#8217;s download [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>66</wp:comment_id>
		<wp:comment_author><![CDATA[GContracts 1.1.0 Released! &laquo; Grails Inside]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://andresteingress.wordpress.com/2010/06/12/gcontracts-1-1-0-released/</wp:comment_author_url>
		<wp:comment_author_IP>66.135.48.167</wp:comment_author_IP>
		<wp:comment_date>2010-06-12 11:53:00</wp:comment_date>
		<wp:comment_date_gmt>2010-06-12 10:53:00</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] GContracts 1.1.0 by defining a Maven dependency [0] or by direct download from github&#8217;s download section [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>58</wp:comment_id>
		<wp:comment_author><![CDATA[gcontracts 1.0.2 Released! &laquo; Grails Inside]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://andresteingress.wordpress.com/2010/05/18/gcontracts-1-0-2-released/</wp:comment_author_url>
		<wp:comment_author_IP>72.233.69.85</wp:comment_author_IP>
		<wp:comment_date>2010-05-18 10:58:27</wp:comment_date>
		<wp:comment_date_gmt>2010-05-18 09:58:27</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] gcontracts 1.0.2 by defining a Maven dependency [0] or by direct download from github&#8217;s download section [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>A Newsletter Registration Conversation</title>
		<link>http://andresteingress.wordpress.com/2010/04/20/getting-the-persistence-context-picture-part-iii/conversation/</link>
		<pubDate>Tue, 20 Apr 2010 12:21:12 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://andresteingress.files.wordpress.com/2010/04/conversation.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>347</wp:post_id>
		<wp:post_date>2010-04-20 13:21:12</wp:post_date>
		<wp:post_date_gmt>2010-04-20 12:21:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>conversation</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>280</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://andresteingress.files.wordpress.com/2010/04/conversation.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/04/conversation.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"338";s:6:"height";s:3:"421";s:14:"hwstring_small";s:22:"height='96' width='77'";s:4:"file";s:88:"/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/04/conversation.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
		<wp:meta_value><![CDATA[A Newsletter Registration Conversation]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Single DB Transaction</title>
		<link>http://andresteingress.wordpress.com/2010/04/20/getting-the-persistence-context-picture-part-iii/db-transaction/</link>
		<pubDate>Tue, 20 Apr 2010 12:34:14 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://andresteingress.files.wordpress.com/2010/04/db-transaction.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>349</wp:post_id>
		<wp:post_date>2010-04-20 13:34:14</wp:post_date>
		<wp:post_date_gmt>2010-04-20 12:34:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>db-transaction</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>280</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://andresteingress.files.wordpress.com/2010/04/db-transaction.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/04/db-transaction.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"394";s:6:"height";s:3:"418";s:14:"hwstring_small";s:22:"height='96' width='90'";s:4:"file";s:90:"/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/04/db-transaction.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
		<wp:meta_value><![CDATA[Single DB Transaction]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Extended Persistence Context</title>
		<link>http://andresteingress.wordpress.com/2010/04/20/getting-the-persistence-context-picture-part-iii/extended-persistence-context/</link>
		<pubDate>Tue, 20 Apr 2010 12:45:04 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://andresteingress.files.wordpress.com/2010/04/extended-persistence-context.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>351</wp:post_id>
		<wp:post_date>2010-04-20 13:45:04</wp:post_date>
		<wp:post_date_gmt>2010-04-20 12:45:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>extended-persistence-context</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>280</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://andresteingress.files.wordpress.com/2010/04/extended-persistence-context.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/04/extended-persistence-context.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"408";s:6:"height";s:3:"185";s:14:"hwstring_small";s:23:"height='58' width='128'";s:4:"file";s:104:"/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/04/extended-persistence-context.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
		<wp:meta_value><![CDATA[Extended Persistence Context]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Session per Request Pattern</title>
		<link>http://andresteingress.wordpress.com/2010/04/20/getting-the-persistence-context-picture-part-iii/session-per-request/</link>
		<pubDate>Tue, 20 Apr 2010 12:48:08 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://andresteingress.files.wordpress.com/2010/04/session-per-request.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>353</wp:post_id>
		<wp:post_date>2010-04-20 13:48:08</wp:post_date>
		<wp:post_date_gmt>2010-04-20 12:48:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>session-per-request</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>280</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://andresteingress.files.wordpress.com/2010/04/session-per-request.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/04/session-per-request.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"408";s:6:"height";s:3:"174";s:14:"hwstring_small";s:23:"height='54' width='128'";s:4:"file";s:95:"/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/04/session-per-request.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
		<wp:meta_value><![CDATA[Session per Request Pattern]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>A Newsletter Registration Conversation</title>
		<link>http://andresteingress.wordpress.com/2010/04/20/getting-the-persistence-context-picture-part-iii/conversation-2/</link>
		<pubDate>Tue, 20 Apr 2010 13:20:11 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://andresteingress.files.wordpress.com/2010/04/conversation1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>362</wp:post_id>
		<wp:post_date>2010-04-20 14:20:11</wp:post_date>
		<wp:post_date_gmt>2010-04-20 13:20:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>conversation-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>280</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://andresteingress.files.wordpress.com/2010/04/conversation1.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/04/conversation1.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"338";s:6:"height";s:3:"428";s:14:"hwstring_small";s:22:"height='96' width='75'";s:4:"file";s:89:"/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/04/conversation1.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
		<wp:meta_value><![CDATA[A Newsletter Registration Conversation]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Getting the Persistence Context Picture (Part III)</title>
		<link>http://andresteingress.wordpress.com/2010/04/20/getting-the-persistence-context-picture-part-iii/</link>
		<pubDate>Tue, 20 Apr 2010 18:58:10 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[basic]]></category>

		<category domain="category" nicename="basic"><![CDATA[basic]]></category>

		<category><![CDATA[grails]]></category>

		<category domain="category" nicename="grails"><![CDATA[grails]]></category>

		<category><![CDATA[hibernate]]></category>

		<category domain="category" nicename="hibernate"><![CDATA[hibernate]]></category>

		<category><![CDATA[patterns]]></category>

		<category domain="category" nicename="patterns"><![CDATA[patterns]]></category>

		<guid isPermaLink="false">http://andresteingress.wordpress.com/?p=280</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://flattr.com/thing/75621/Getting-the-Persistence-Context-Picture-Part-3" target="_blank">
<img src="http://api.flattr.com/button/button-static-50x60.png" alt="Flattr this" title="Flattr this" border="0" align="right" vspace="5" hspace="10" /></a> Part 3 of this series deals with more advanced topics, requiring knowledge about persistence patterns and Hibernate APIs.

<ul>
<li>[<a href="http://andresteingress.wordpress.com/2010/03/23/getting-the-persistence-context-picture-part-i/">0</a>] Getting the Persistence Context Picture (Part I)</li>
<li>[<a href="http://andresteingress.wordpress.com/2010/04/08/getting-the-persistence-context-picture-part-ii/">1</a>] Getting the Persistence Context Picture (Part II)</li>
</ul>

<h4>Conversational State Management</h4>

One advanced use case when using persistence frameworks is realization of <i>conversations</i>. 

A conversation spans multiple user interactions and, most of the time, realizes a well-defined process. Best way to think of a conversation is to think of some kind of wizard, e.g. a newsletter registration wizard.

<img src="http://andresteingress.files.wordpress.com/2010/04/conversation1.png" alt="A Newsletter Registration Conversation" title="A Newsletter Registration Conversation" width="338" height="428" class="aligncenter size-full wp-image-362" />

A newsletter registration wizard typically spans multiple user interactions, whereas each interaction needs user input and further validation to move on:

<ol>
   <li>a user needs to provide basic data, e.g. firstname, lastname, birthdate, etc.</li>
   <li>a user needs to register for several newsletter categories</li>
   <li>a user gets a summary and needs to confirm that information</li> 
</ol>

Each user interaction is part of the overall <i>newsletter registration process</i>. Technically speaking, whenever the user aborts the process at some time, or an unrecoverable error occurs, this must have no consequence on the underlying persistent data structures. E.g. if a user registered for a newsletter (step 2) and stops its newsletter registration per closing the browser window and HTTP session runs out of time, the registration and the newly created newsletter user needs to be rolled back.

A first naive approach to realize conversations is to use a single database transaction. Modern applications hardly use that approach because its error-prone and not justifiable in terms of performance considerations. In order to really get a grasp of the problems we would face, let us take a look at some basics on database transactions.

<h4>A Small Intro to Database Transactions</h4>

Whenever a database transaction gets started, all data modification is tracked by the database. For example, in case of MySQL (InnoDB) databases, pages (think of a special data structure) are modified in a buffer pool and modifications are tracked in a redo log which is hold in synchronization with the disk. Whenever a transaction is committed the dirty pages are flushed out to the filesystem, otherwise if the transaction is rolled back, the dirty pages are removed from the pool and the changes are redone.

It depends on the current <i>transaction level</i> if the current transaction has access to changes done by transactions executed in parallel (more details on MySQL transactions can be found at [<a href="http://dev.mysql.com/doc/refman/5.1/en/innodb-transaction-model.html">2</a>]). MySQL's default transaction level is "repeatable read": all reads within the same transaction return the same results - even if another transaction might have changed data in the meantime. InnoDB (a transactional MySQL database engine, integrated in MySQL server) achieves this behavior by creating <i>snapshots</i> when the first query is created.

Other isolation levels (confirming to SQL-92 standard) are: "read uncommitted" &gt; "read committed" &gt; "repeatable read" &gt; "serializable". The order represents the magnitude of locking which is necessary to realize the respective transaction level.

<h4>A Naive Approach</h4>

<img src="http://andresteingress.files.wordpress.com/2010/04/db-transaction.png" alt="Single DB Transaction" title="Single DB Transaction" width="394" height="418" class="aligncenter size-full wp-image-349" />

Back to conversational state management: as mentioned above, a naive approach would be to use a single database transaction for a single conversation. This approach apparently has many problems:

<ul>
<li>if data is modified and DML statements generated, usually locks are created, avoiding other transactions to change it.</li>
<li>databases are designed to keep transactions as short as possible, a transaction is seen as atomic unit and not a long living session, long-running transactions are typically discarded by the database management system.</li>
<li>especially in web applications, it is hard for an application to determine conversation aborts - when the user closes its browser window in the middle of a transaction, or kills the browser process, there is hardly a change for the application to detect that circumstance.</li>
<li>a transaction is typically linked to a database connection. the number of database transactions is typically limited to the application.</li>
</ul>

As you can see, spanning a conversation with a database transaction is not an option. But a pattern already known from the previous articles comes to rescue: the persistence context.

<h4>Extended Persistence Context Pattern</h4>

As we've already seen in the second part of this series [<a href="http://andresteingress.wordpress.com/2010/04/08/getting-the-persistence-context-picture-part-ii">1</a>] Grails uses a so-called <i>Session-per-Request</i> pattern.

<img src="http://andresteingress.files.wordpress.com/2010/04/session-per-request.png" alt="Session per Request Pattern" title="Session per Request Pattern" width="408" height="174" class="aligncenter size-full wp-image-353" />

Whenever a controller's method is called, a new Hibernate session spans the method call and, with flush mode turned to manual, the view rendering. When the view rendering is done, the session is closed. Of course, this pattern is not an option when implementing conversations, since changes in a controller's method call are committed on the method's return. One could pass Grails standard behavior using detached objects, but let me tell you: life gets only more complicated when detaching modified objects - especially in advanced domain models.

What we will need to implement a conversation is a mechanism that spans the persistence context over several user requests, that pattern is called: the <i>extended persistence context</i> pattern.

<img src="http://andresteingress.files.wordpress.com/2010/04/extended-persistence-context.png" alt="Extended Persistence Context" title="Extended Persistence Context" width="408" height="185" class="aligncenter size-full wp-image-351" />

An extended persistence context reuses the persistence context for all interactions within the same conversation. In Hibernate speak: we need to find a way to (re)use a single  <code>org.hibernate.Session</code> instance for conversation lifetime.

Fortunately, there is a Grails plugin which serves that purpose perfectly: the web flow plugin.

<h4>Conversational Management with Web Flows</h4>

The Grails web flow plugin is based on Spring Web Flow [<a href="http://www.springsource.org/webflow">3</a>]. Spring Web Flow uses XML configuration data to specify web flows:

[sourcecode language="xml"]
&lt;flow xmlns=&quot;http://www.springframework.org/schema/webflow&quot;
  xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
  xsi:schemaLocation=&quot;http://www.springframework.org/schema/webflow
  http://www.springframework.org/schema/webflow/spring-webflow-2.0.xsd&quot;&gt;

  &lt;view-state id=&quot;enterBasicUserData&quot;&gt;
    &lt;transition on=&quot;submit&quot; to=&quot;registerForNewsletters&quot; /&gt;
  &lt;/view-state&gt;
	
  &lt;view-state id=&quot;registerForNewsletters&quot;&gt;
    &lt;transition on=&quot;submit&quot; to=&quot;showSummary&quot; /&gt;
    &lt;!-- ... --&gt;
  &lt;/view-state&gt;

  &lt;view-state id=&quot;showSummary&quot;&gt;
    &lt;transition on=&quot;save&quot; to=&quot;newsletterConfirmed&quot; /&gt;
    &lt;transition on=&quot;cancel&quot; to=&quot;newsletterCanceled&quot; /&gt;
  &lt;/view-state&gt;  
	
  &lt;end-state id=&quot;newsletterConfirmed&quot; &gt;
    &lt;output name=&quot;newsletterId&quot; value=&quot;newsletter.id&quot;/&gt;
  &lt;/end-state&gt;

  &lt;end-state id=&quot;newsletterCanceled&quot; /&gt;		
&lt;/flow&gt;	
[/sourcecode]

Groovy uses its own DSL implemented in <code>org.codehaus.groovy.grails.webflow.engine.builder.FlowBuilder</code>. This approach has the advantage of being tightly integrated into the Grails controller concept:

[sourcecode language="groovy"]
// ...
def newsletterRegistrationFlow = {
  step1 {
    on(&quot;save&quot;)   {
      def User userInstance = new User(params)
      flow.userInstance = userInstance

      if (!userInstance.validate()) {
        log.error &quot;User could not be saved: ${userInstance.errors}&quot;
            
        return error()
      }
    }.to &quot;step2&quot;
  }

  step2 {
    on(&quot;save&quot;)  {
      def categoryIds = params.list('newsletter.id')*.toLong()
      // ...
      def User userInstance = flow.userInstance
      newsletterService.registerUserForNewsletterCategories(userInstance, categoryIds)
      // ...
   }.to &quot;step3&quot;
  }

  step3()  {
     on(&quot;save&quot;)  {
        def userInstance = flow.userInstance
        // ...
        userInstance.save()
     }
  }
}
[/sourcecode]

In this case, the closure property <code>newsletterRegistrationFlow</code> is placed in a dedicated controller class and is automatically recognized by the web flow plugin. The plugin is responsible for instantiating a Grails web flow builder object which needs a closure as one of its input parameters.

Leaving the DSL aside, best thing about web flows is that it realizes the extended persistence context aka <i>flow managed persistence context (FMPC)</i>. The <code>HibernateFlowExecutionListener</code> is the place where the Hibernate session is created and than reused over multiple user interactions. It implements the <code>FlowExecutionListener</code> interface.

The flow execution listener provides callbacks for various states in the lifecycle of a conversation. Grails <code>HibernateFlowExecutionListener</code> uses these callbacks to implement the extended persistence context pattern. On conversation start, it creates a new Hibernate session:

[sourcecode language="Java"]
public void sessionStarting(RequestContext context, FlowSession session, MutableAttributeMap input) {
	// ...
	Session hibernateSession = createSession(context);
	session.getScope().put(PERSISTENCE_CONTEXT_ATTRIBUTE, hibernateSession);
	bind(hibernateSession);
	// ...
}

[/sourcecode]

Whenever the session is paused, in between separate user requests, it is disconnected from the current database connection:

[sourcecode language="java"]
public void paused(RequestContext context) {
	if (isPersistenceContext(context.getActiveFlow())) {
		Session session = getHibernateSession(context.getFlowExecutionContext().getActiveSession());
		unbind(session);
		session.disconnect();
	}
}
[/sourcecode] 

Whenever resuming the current web flow, the session is connected with the database connection again. Whenever a web flow has completed its last step, the session is resumed and all changes are flushed in a single transaction:

[sourcecode language="Java"]
public void sessionEnding(RequestContext context, FlowSession session, String outcome, MutableAttributeMap output) {
  // ...
  final Session hibernateSession = getHibernateSession(session);
  // ...
  transactionTemplate.execute(new TransactionCallbackWithoutResult() {
	  protected void doInTransactionWithoutResult(TransactionStatus status) {
	    sessionFactory.getCurrentSession();
	    }
	  });
  }
    
  unbind(hibernateSession);
  hibernateSession.close();
  // ...
}
[/sourcecode]

A call to <code>sessionFactory.getCurrentSession()</code> causes the current session to be connected with the transaction and, at the end of the transaction template, committing all changes within that transaction. All changes which have been tracked in-memory so far, are by then synchronized with the database state.

The price to be paid for conversations is higher memory consumption. In order to estimate the included effort, we need to take a closer look at how Hibernate realizes loading and caching of entities. In addition to implementing conversations, memory consumption is especially important in Hibernate based batch jobs.

<h4>Using Hibernate in Batch Jobs</h4>

The most important thing when working with Hibernate is to remember: the persistence context references all persistent entities loaded, but entities don't know anything about it. As long as the persistence context is alive it <i>does not discard references automatically</i>.

This is particularly important in batch jobs. When executing queries with large result sets you have to manually discard the Hibernate session otherwise the program is definitely running out of memory:

[sourcecode language="Groovy"]
for (def item : newsletters)  {
  // process item...
  if (++counter % 50 == 0)  {
    session.flush()
    session.clear()
  }
  // ...
}
[/sourcecode]

<code>Session</code> provides a <code>clear</code> method that detaches all persistent objects being tracked by this session instance. Invoked on specific object instances, <code>evict</code> always to remove selected persistent objects from a particular session. 

In this context, it might be worth to take a look at Hibernate's <code>StatefulPersistenceContext</code> class. This is the piece of code that actually implements the persistence context pattern. As you can see in the following code snippet, invoking <code>clear</code> removes all references to all tracked objects:

[sourcecode language="java"]
public void clear() {
	// ...
	entitiesByKey.clear();
	entitiesByUniqueKey.clear();
	entityEntries.clear();
	entitySnapshotsByKey.clear();
	collectionsByKey.clear();
	collectionEntries.clear();
	// ...
}
[/sourcecode]

Another thing to notice when executing large result sets and keeping persistence contexts in memory is that Hibernate uses <i>state snapshots</i> to recognize modifications on persistent objects (remember how InnoDB realizes repeatable-read transaction isolation;-)).

Whenever a persistent object is loaded, Hibernate creates a snapshot of the current state and keeps that snapshot in internal data-structures:

[sourcecode language="Java"]
// ..
EntityEntry entry = getSession().getPersistenceContext().getEntry( instance );
if ( entry == null ) {
	throw new AssertionFailure( &quot;possible nonthreadsafe access to session&quot; );
}
		
if ( entry.getStatus()==Status.MANAGED || persister.isVersionPropertyGenerated() ) {

TypeFactory.deepCopy(
		state,
		persister.getPropertyTypes(),
		persister.getPropertyCheckability(),
	        state,
		session
);
// ...
[/sourcecode] 

Whenever you don't want Hibernate to create snapshot objects, you have to use readonly queries or objects. Marking a query as "readonly" is as easy as setting its <code>setReadOnly(true)</code> property. In read-only mode, no snapshots are created and modified persistent objects are not marked as dirty.

[sourcecode language="Groovy"]
Newsletter.withSession {
        org.hibernate.classic.Session session -&gt;

              def query = session.createQuery(&quot;from Newsletter&quot;).setReadOnly(true)
              def newsletters = query.list()

              for (def item : newsletters)  {
                // ...
              }
      }
[/sourcecode]

If your batch accesses the persistence context with read-access only, there is another way to optimize DB access: using a stateless session. <code>SessionFactory</code> has an <code>openStatelessSession</code> method that creates a fully statless session, without caching, modification tracking etc. In Grails, obtaining a stateless session is nothing more than injecting the current sessionFactory bean and calling <code>openStatelessSession</code> on it:

[sourcecode language="groovy"]
def Session statelessSession = sessionFactory.openStatelessSession()
statelessSession.beginTransaction()

// ...

statelessSession.getTransaction().commit()
statelessSession.close()
[/sourcecode]

In combination with stateless session objects, it is worth mentioning that if you want to modify data there is an interface to do that even when working with stateless sessions:

[sourcecode language="Java"]
public void doWork(Work work) throws HibernateException;
[/sourcecode]

Where interface <code>Work</code> has a single method declaration:

[sourcecode language="Java"]
public interface Work {
	/**
	 * Execute the discrete work encapsulated by this work instance using the supplied connection.
	 *
	 * @param connection The connection on which to perform the work.
	 * @throws SQLException Thrown during execution of the underlying JDBC interaction.
	 * @throws HibernateException Generally indicates a wrapped SQLException.
	 */
	public void execute(Connection connection) throws SQLException;
}
[/sourcecode]

As you can see <code>execute</code> gets a reference on the current <code>Connection</code> which, in the case of JDBC connections, can be used to formulate raw SQL queries.

If your batch is processing large chunks of data, paging might be interesting too. Again, this can be done by setting the appropriate properties of Hibernate's <code>Query</code> class.

[sourcecode language="Groovy"]
// ...
def Query query = session.createQuery(&quot;from Newsletter&quot;)
query.setFirstResult(0)
query.setMaxResults(50)
query.setReadOnly(true)
query.setFlushMode(FlushMode.MANUAL)
// ...
[/sourcecode]

The code snippet above explicitly sets the flush mode to "manual", since flushing does not make sense in this context (all retrieved objects are readonly).

A similiar API can be found in the <code>Criteria</code> class, being supported by Grails by its own Criteria Builder DSL [<a href="http://www.grails.org/Hibernate+Criteria+Builder">6</a>].

<h4>Conclusion</h4>

As you can see, there are various options to use Hibernate even for batch processing of large data sets. Programmers are not restricted on using predefined methodologies, although understanding the fundamental patterns is a crucial point. Adjusting Hibernate's behavior and generated SQL is a matter of knowing the right extension points.

I hope you had a good time reading that article series. I know, a lot of things have been unsaid but if you are missing something really much or want to gain more insights in a particular topic related to Hibernate, GORM, Grails etc. just drop a comment, i'll try to take notice of it in one of the following blog posts.



[0] <a href="http://andresteingress.wordpress.com/2010/03/23/getting-the-persistence-context-picture-part-i/">Getting the Persistence Context Picture (Part I)</a>
[1] <a href="http://andresteingress.wordpress.com/2010/04/08/getting-the-persistence-context-picture-part-ii/">Getting the Persistence Context Picture (Part II)</a>
[2] <a href="http://dev.mysql.com/doc/refman/5.1/en/innodb-transaction-model.html">MySQL InnoDB Transactions</a>
[3] <a href="http://www.springsource.org/webflow">Spring Web Flow Project</a>
[4] <a href="http://www.hibernate.org/">Hibernate - Project Home Page</a>
[5] <a href="http://docs.jboss.org/hibernate/core/3.3/reference/en/html/performance.html">Hibernate Documentation - Chapter: Improving Performance</a>
[6] <a href="http://www.grails.org/Hibernate+Criteria+Builder">Criteria Builder DSL</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>280</wp:post_id>
		<wp:post_date>2010-04-20 19:58:10</wp:post_date>
		<wp:post_date_gmt>2010-04-20 18:58:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>getting-the-persistence-context-picture-part-iii</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>reddit</wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"count";s:1:"0";s:4:"time";s:10:"1293719923";}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[13220543]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1287738377]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_oembed_1668442279facc0d34e72bee59a0eeb5</wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_oembed_69d64000116636ddc03692c290ddb64d</wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_oembed_ecbca0b956260d0acc9c8438c8d4116b</wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_oembed_697dc2298dd6edf8ab11bd3c385dc094</wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>139</wp:comment_id>
		<wp:comment_author><![CDATA[joe]]></wp:comment_author>
		<wp:comment_author_email>joerombs@yahoo.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>71.106.167.199</wp:comment_author_IP>
		<wp:comment_date>2010-07-28 17:35:23</wp:comment_date>
		<wp:comment_date_gmt>2010-07-28 16:35:23</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Thanks for this series of articles. I was using webflows and wanted to know what hibernate was doing under the covers. I suspected it was using an persistence context per webflow but couldn't find any confirmation from grails in action or the grails documentation. So, you kept me from having to sift through source code ( not a bad thing, but I have limited time).  Thanks again.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>Class Invariant Inheritance</title>
		<link>http://andresteingress.wordpress.com/2010/04/01/gcontracts-1-0-released/class-invariant-inheritance/</link>
		<pubDate>Thu, 22 Apr 2010 05:50:54 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://andresteingress.files.wordpress.com/2010/04/class-invariant-inheritance.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>390</wp:post_id>
		<wp:post_date>2010-04-22 06:50:54</wp:post_date>
		<wp:post_date_gmt>2010-04-22 05:50:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>class-invariant-inheritance</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>28</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://andresteingress.files.wordpress.com/2010/04/class-invariant-inheritance.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/04/class-invariant-inheritance.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"234";s:6:"height";s:3:"230";s:14:"hwstring_small";s:22:"height='96' width='97'";s:4:"file";s:103:"/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/04/class-invariant-inheritance.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
		<wp:meta_value><![CDATA[Class Invariant Inheritance]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>gcontracts Status Update</title>
		<link>http://andresteingress.wordpress.com/2010/04/22/gcontracts-status-update/</link>
		<pubDate>Thu, 22 Apr 2010 19:05:21 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[gcontracts]]></category>

		<category domain="category" nicename="gcontracts"><![CDATA[gcontracts]]></category>

		<guid isPermaLink="false">http://andresteingress.wordpress.com/?p=393</guid>
		<description></description>
		<content:encoded><![CDATA[I am currently working on the gcontracts 1.0.1 release [<a href="http://github.com/andresteingress/gcontracts/">0</a>]. Apart from bug fixes, that version contains an important feature you might have been tumbled over: class invariant checking on Groovy bean properties.

Groovy beans support a very simple syntax to declare properties [<a href="http://groovy.codehaus.org/Groovy+Beans">1</a>]. E.g. adding a property <code>firstName</code> to your <code>Person</code> class is as simple as typing:

[sourcecode language="groovy"]
class Person {
    String firstName
    // ...    
}
[/sourcecode]

Compared to its Java equivalent that is as simple as it can get.

[sourcecode language="java"]
public class Person {
    private String firstName;

    public void setFirstName(String anotherFirstName)  {
        firstName = anotherFirstName;
    }

    public String getFirstName()  {
        return firstName;
    }
}
[/sourcecode]

Up to now, gcontracts injected class invariants only in explicitly declared setter methods, but users reported the need for class invariant injection on writeable POGO properties.

Today, i am glad to tell you that gcontracts class invariant injection mechanisms now works with POGO properties. Whenever a class declares an invariant, that invariant is injected in every dynamically generated setter method of that class. 

E.g. a class invariant like,

[sourcecode language="groovy"]
@Invariant({ firstName != null })
class Person {
    String firstName
    // ...    
}
[/sourcecode]

causes a <code>java.lang.AssertionError</code> whenever

[sourcecode language="groovy"]
def me = new Person(&quot;Andre&quot;)
me.firstName = null
[/sourcecode]

is called.

Support for class invariant injection in POGO properties is currently available in github's Master branch and will be part of gcontracts 1.0.1.

[0] <a href="http://github.com/andresteingress/gcontracts/">Github - gcontracts</a>
[1] <a href="http://groovy.codehaus.org/Groovy+Beans">Groovy Beans</a>  

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>393</wp:post_id>
		<wp:post_date>2010-04-22 20:05:21</wp:post_date>
		<wp:post_date_gmt>2010-04-22 19:05:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gcontracts-status-update</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>reddit</wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"count";s:1:"0";s:4:"time";s:10:"1293719872";}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[13220543]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1271963187]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>23</wp:comment_id>
		<wp:comment_author><![CDATA[gcontracts 1.0.1 Released &laquo; Grails Inside]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://andresteingress.wordpress.com/2010/04/27/gcontracts-1-0-1-released/</wp:comment_author_url>
		<wp:comment_author_IP>66.135.48.157</wp:comment_author_IP>
		<wp:comment_date>2010-04-27 06:54:26</wp:comment_date>
		<wp:comment_date_gmt>2010-04-27 05:54:26</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] POGO support – invariants are checked when setting Groovy bean properties/executing default constructor. [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>gcontracts 1.0.1 Released</title>
		<link>http://andresteingress.wordpress.com/2010/04/27/gcontracts-1-0-1-released/</link>
		<pubDate>Tue, 27 Apr 2010 05:54:09 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[gcontracts]]></category>

		<category domain="category" nicename="gcontracts"><![CDATA[gcontracts]]></category>

		<category><![CDATA[releases]]></category>

		<category domain="category" nicename="releases"><![CDATA[releases]]></category>

		<guid isPermaLink="false">http://andresteingress.wordpress.com/?p=400</guid>
		<description></description>
		<content:encoded><![CDATA[I am proud to tell you that gcontracts 1.0.1 was released and pushed to the central Maven repository [<a href="http://repo1.maven.org/maven2/org/gcontracts/gcontracts/1.0.1/">0</a>] yesterday.

You can get gcontracts 1.0.1 by defining a <a href="http://andresteingress.wordpress.com/2010/04/14/gcontracts-available-in-maven-central-repository/">Maven dependency [0]</a> or in <a href="http://github.com/andresteingress/gcontracts/downloads">github's download section [1]</a>.

<h4>Changes</h4>

gcontracts 1.0.1 is a maintenance release fixing several issues highly requested by users:

<ul>
<li><a href="http://andresteingress.wordpress.com/2010/04/22/gcontracts-status-update/">POGO support</a> – invariants are checked when setting Groovy bean properties/executing default constructor.
</li>
<li>
Advanced old variable support in Ensures annotation – added support for <code>GString</code>, <code>String</code>, <code>Number</code>, etc.
</li>
<li>
Refined <code>AssertionError</code> exception messages.
</li>
<li>
Other bug fixes.
</li>
</ul>

[0] <a href="http://repo1.maven.org/maven2/org/gcontracts/gcontracts/1.0.1/">gcontracts - Central Maven Repository</a>
[1] <a href="http://andresteingress.wordpress.com/2010/04/14/gcontracts-available-in-maven-central-repository/">gcontracts Available in Central Maven Repository</a>
[2] <a href="http://github.com/andresteingress/gcontracts/downloads">gcontracts - Github Download Section</a>

<a href="http://flattr.com/thing/15111/GContracts-1-0-2-Released" target="_blank">
<img src="http://api.flattr.com/button/button-static-50x60.png" title="Flattr this" border="0" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>400</wp:post_id>
		<wp:post_date>2010-04-27 06:54:09</wp:post_date>
		<wp:post_date_gmt>2010-04-27 05:54:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gcontracts-1-0-1-released</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>reddit</wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"count";s:1:"0";s:4:"time";s:10:"1293720022";}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[13220543]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1276206053]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Logging by Convention</title>
		<link>http://andresteingress.wordpress.com/2010/04/29/logging-by-convention-in-grails/</link>
		<pubDate>Thu, 29 Apr 2010 19:19:59 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[basic]]></category>

		<category domain="category" nicename="basic"><![CDATA[basic]]></category>

		<category><![CDATA[grails]]></category>

		<category domain="category" nicename="grails"><![CDATA[grails]]></category>

		<guid isPermaLink="false">http://andresteingress.wordpress.com/?p=420</guid>
		<description></description>
		<content:encoded><![CDATA[Each Grails application uses a custom Log4J DSL [<a href="http://grails.org/doc/latest/guide/3.%20Configuration.html#3.1.2%20Logging">0</a>] to configure logging settings. In a blank Grails application the <code>grails-app/conf</code> directory contains the <code>Config.groovy</code> file, which declares the <code>log4j</code> variable:

[sourcecode language="groovy"]
log4j = {
    // Example of changing the log pattern for the default console
    // appender:
    //
    //appenders {
    //    console name:'stdout', layout:pattern(conversionPattern: '%c{2} %m%n')
    //}


    error  'org.codehaus.groovy.grails.web.servlet',  //  controllers
	       'org.codehaus.groovy.grails.web.pages', //  GSP
	       'org.codehaus.groovy.grails.web.sitemesh', //  layouts
	       'org.codehaus.groovy.grails.web.mapping.filter', // URL mapping
	       'org.codehaus.groovy.grails.web.mapping', // URL mapping
	       'org.codehaus.groovy.grails.commons', // core / classloading
	       'org.codehaus.groovy.grails.plugins', // plugins
	       'org.codehaus.groovy.grails.orm.hibernate', // hibernate integration
	       'org.springframework',
	       'org.hibernate',
           'net.sf.ehcache.hibernate'

    warn   'org.mortbay.log'
}
[/sourcecode]

Let me start my explanation of logging by convention by creating a new service class

<code>grails create-service com.ast.service.Some</code>

Leading to the following generated Groovy code:

[sourcecode language="Groovy"]
package com.ast.service

class SomeService {

    boolean transactional = true

    def serviceMethod() {

    }
}
[/sourcecode]

By default, each Grails artefact (services, controllers, domain classes and tag library classes) gets a <code>getLog</code> method injected on application bootstrap. The magic happens in <code>LoggingGrailsPlugin</code> which is currently part of the grails-core module:

[sourcecode language="groovy"]
// ...

def addLogMethod(artefactClass, handler) {
    // Formulate a name of the form grails.&lt;artefactType&gt;.classname
    // Do it here so not calculated in every getLog call :)
    def type = GrailsNameUtils.getPropertyNameRepresentation(handler.type)
    def logName = &quot;grails.app.${type}.${artefactClass.name}&quot;.toString()

    def log = LogFactory.getLog(logName)

    artefactClass.metaClass.getLog &lt;&lt; {-&gt; log}
}

// ...
[/sourcecode]

As you can see, Grails uses meta-programming to add a <code>getLog</code> method returning a <code>log</code> object of type <code>org.apache.commons.logging.Log</code>. But take a look at the log name which is used to create the log object with Apache Commons Logging <code>LogFactory</code>:

[sourcecode language="Groovy"]
def logName = &quot;grails.app.${type}.${artefactClass.name}&quot;.toString()
[/sourcecode]

Grails prefixes the artefact's class name with <b>grails.app</b> and its type (service, controller, taglib, domain). In fact, this is a pretty cool feature, since all artefacts are bundled in a common logging namespace. 

E.g. to enable <code>INFO</code> logging on all application artefacts, developers just have to add the following line in <code>Config.groovy</code>:

[sourcecode language="groovy"]
log4j = {
    // ...
    info   'grails.app'
    // ...
}
[/sourcecode]

Although this is a pretty cool feature, it can lead to confusion, and one can find multiple questions concerning this issue on mailing-lists, user groups etc.

Let's assume that our application basically should use <code>ERROR</code> level and more detailed levels only for separate packages. We would modify the Log4J configuration to look like:

[sourcecode language="groovy"]
log4j = {
    // ...
    // maby defining additional appenders here
    // ...
    root {
        error()
    }
    // ...
[/sourcecode]

If you want to fetch <code>INFO</code> logging output of <code>com.ast.service.SomeService</code> the following configuration snippet would <b>not</b> work:

[sourcecode language="groovy"]
log4j = {
    // ...
    info 'com.ast.service.MyService'
    // ...
}
[/sourcecode]

The reason is that <code>LoggingGrailsPlugin</code> prefixes the artefacts type and class name with <code>grails.app</code>. The actual <code>log</code> instance's log name in <code>MyService</code> was therefore configured to 

<code>grails.app.service.MyService</code>

As a consequence, to enable logging on <code>INFO</code> level we should better use

[sourcecode language="groovy"]
log4j = {
    // ...
    info 'grails.app.service.com.ast.service.MyService'
    // ...
}
[/sourcecode]

This is supposed to be a convenience feature, but can steal quite some time if you overlooked that section in the configuration documentation [<a href="http://grails.org/doc/latest/guide/3.%20Configuration.html#3.1.2%20Logging">0</a>].

[0] <a href="http://grails.org/doc/latest/guide/3.%20Configuration.html#3.1.2%20Logging">Logging Configuration</a>

<a href="http://flattr.com/thing/15108/Logging-by-Convention-in-Grails" target="_blank">
<img src="http://api.flattr.com/button/button-static-50x60.png" title="Flattr this" border="0" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>420</wp:post_id>
		<wp:post_date>2010-04-29 20:19:59</wp:post_date>
		<wp:post_date_gmt>2010-04-29 19:19:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>logging-by-convention-in-grails</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>reddit</wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"count";s:1:"0";s:4:"time";s:10:"1293719992";}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1275591363]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[13220543]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>29</wp:comment_id>
		<wp:comment_author><![CDATA[Ewan Dawson]]></wp:comment_author>
		<wp:comment_author_email>ewan@lazygun.net</wp:comment_author_email>
		<wp:comment_author_url>http://www.lazygun.net</wp:comment_author_url>
		<wp:comment_author_IP>77.103.196.28</wp:comment_author_IP>
		<wp:comment_date>2010-05-04 08:34:55</wp:comment_date>
		<wp:comment_date_gmt>2010-05-04 07:34:55</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Andre, are you sure that final code example is correct?  I find I have to use the full type name after 'grails.app'. In the case of your example, this would be:

info 'grails.app.service.com.ast.service.MyService']]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>27</wp:comment_id>
		<wp:comment_author><![CDATA[Blog bookmarks 05/02/2010 &laquo; My Diigo bookmarks]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://lubospdiigo.wordpress.com/2010/05/02/blog-bookmarks-05022010/</wp:comment_author_url>
		<wp:comment_author_IP>74.200.243.207</wp:comment_author_IP>
		<wp:comment_date>2010-05-02 05:31:21</wp:comment_date>
		<wp:comment_date_gmt>2010-05-02 04:31:21</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] Logging by Convention « Grails Inside [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>30</wp:comment_id>
		<wp:comment_author><![CDATA[andresteingress]]></wp:comment_author>
		<wp:comment_author_email>grails.inside@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://andresteingress.wordpress.com</wp:comment_author_url>
		<wp:comment_author_IP>194.48.7.59</wp:comment_author_IP>
		<wp:comment_date>2010-05-04 09:06:14</wp:comment_date>
		<wp:comment_date_gmt>2010-05-04 08:06:14</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[yeah, you're right - i fixed it locally in my example project but did not alter the code sample in the blog... sorry!]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>29</wp:comment_parent>
		<wp:comment_user_id>13220543</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>80</wp:comment_id>
		<wp:comment_author><![CDATA[B Sreekanth]]></wp:comment_author>
		<wp:comment_author_email>bsr203@gmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>24.26.148.160</wp:comment_author_IP>
		<wp:comment_date>2010-06-23 12:34:41</wp:comment_date>
		<wp:comment_date_gmt>2010-06-23 11:34:41</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[thanks for your time writing this.. probably the best and complete explanation I found.. thanks]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>GroovyMag May 2010</title>
		<link>http://andresteingress.wordpress.com/2010/05/03/gcontracts-article-in-groovymag-may-2010/gm19_400/</link>
		<pubDate>Mon, 03 May 2010 13:10:07 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<guid isPermaLink="false">http://andresteingress.files.wordpress.com/2010/05/gm19_400.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>435</wp:post_id>
		<wp:post_date>2010-05-03 14:10:07</wp:post_date>
		<wp:post_date_gmt>2010-05-03 13:10:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gm19_400</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>434</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://andresteingress.files.wordpress.com/2010/05/gm19_400.jpg</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/05/gm19_400.jpg]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"400";s:6:"height";s:3:"518";s:14:"hwstring_small";s:22:"height='96' width='74'";s:4:"file";s:84:"/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/05/gm19_400.jpg";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>gcontracts in GroovyMag May 2010</title>
		<link>http://andresteingress.wordpress.com/2010/05/03/gcontracts-article-in-groovymag-may-2010/</link>
		<pubDate>Mon, 03 May 2010 13:17:28 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[gcontracts]]></category>

		<category domain="category" nicename="gcontracts"><![CDATA[gcontracts]]></category>

		<guid isPermaLink="false">http://andresteingress.wordpress.com/?p=434</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.groovymag.com/main.issues.description/id=21/"><img src="http://andresteingress.files.wordpress.com/2010/05/gm19_400.jpg" alt="" title="GroovyMag May 2010" width="400" height="518" class="aligncenter size-full wp-image-435" /></a>

There is an introductory article about gcontracts in <a href="http://www.groovymag.com/main.issues.description/id=21/">GroovyMag May 2010 issue</a>. In addition, the issue covers the following topics:

<ul>
<li>Lean Groovy Part II
<li>Using Groovy for Natural Language Processing
<li>Review of the GR8 US conference
<li>Groovy Under the Hood - Java String in Groovy
<li>Community news
<li>Plugin Corner - Quartz
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>434</wp:post_id>
		<wp:post_date>2010-05-03 14:17:28</wp:post_date>
		<wp:post_date_gmt>2010-05-03 13:17:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gcontracts-article-in-groovymag-may-2010</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[13220543]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1272892857]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>reddit</wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"count";s:1:"0";s:4:"time";s:10:"1293719770";}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>A Messaging System</title>
		<link>http://andresteingress.wordpress.com/2010/05/11/integration-and-grails/messaging-system/</link>
		<pubDate>Tue, 11 May 2010 22:09:21 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<guid isPermaLink="false">http://andresteingress.files.wordpress.com/2010/05/messaging-system.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>464</wp:post_id>
		<wp:post_date>2010-05-11 23:09:21</wp:post_date>
		<wp:post_date_gmt>2010-05-11 22:09:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>messaging-system</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>448</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://andresteingress.files.wordpress.com/2010/05/messaging-system.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"356";s:6:"height";s:3:"232";s:14:"hwstring_small";s:23:"height='83' width='128'";s:4:"file";s:92:"/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/05/messaging-system.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/05/messaging-system.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
		<wp:meta_value><![CDATA[A Messaging System]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Integration and Grails</title>
		<link>http://andresteingress.wordpress.com/2010/05/11/integration-and-grails/</link>
		<pubDate>Tue, 11 May 2010 22:11:44 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[grails]]></category>

		<category domain="category" nicename="grails"><![CDATA[grails]]></category>

		<category><![CDATA[groovy]]></category>

		<category domain="category" nicename="groovy"><![CDATA[groovy]]></category>

		<category><![CDATA[spring framework]]></category>

		<category domain="category" nicename="spring-framework"><![CDATA[spring framework]]></category>

		<guid isPermaLink="false">http://andresteingress.wordpress.com/?p=448</guid>
		<description></description>
		<content:encoded><![CDATA[In most applications, it is a common requirement to implement a mail sending mechanism. Indeed, there is the mail plugin [<a href="http://www.grails.org/Mail+plugin">0</a>] which achieves that use case by injecting a <tt>sendMail</tt> method in Grails artefacts:

[sourcecode language="groovy"]
sendMail {     
  to &quot;fred@g2one.com&quot;     
  subject &quot;Hello Fred&quot;     
  body 'How are you?' 
}
[/sourcecode]

But maybe you already had the situation that you felt that this level of integration is not enough - maybe you wanted to use message pooling or you wanted to have multiple task executors processing the message queue from time to time.

Luckily there exists an extension to the Spring Framework which is ment to handle such tasks: Spring Integration [<a href="http://www.springsource.org/spring-integration">1</a>].

<h4>A Small Introduction to Spring Integration</h4>

Spring Integration is all about enabling messaging architectures in Spring-based applications. In this context, messaging does not mean sending e-mails. In a message-oriented middleware (MOM) software components communicate by sending packets of data. Each message has a producer (that part that generated the message) and one or more consumers (doing something with the data provided by the message).

<img src="http://andresteingress.files.wordpress.com/2010/05/messaging-system.png" alt="A Messaging System" title="A Messaging System" width="356" height="232" class="aligncenter size-full wp-image-464" />

Compared to pure method invocations, a messaging communication always implies asynchrony - the producer thread typically does not wait for the consumers to get responses, it <i>sends and forgets</i>. But as the messaging system leverages transaction support, message persistency, pooling of messages, and various other services, using a messaging architecture is especially an option in integration scenarios with external systems (e.g. an SMTP server).

<h4>Adding Spring Integration as Dependency</h4>

A dependency to Spring Integration can simply be specified in the application's <tt>BuildConfig.groovy</tt>:

[sourcecode language="groovy"]
dependencies {
        // specify dependencies here under either 'build', 'compile', 'runtime', 'test' or 'provided' scopes eg.
        // ...
   	compile('org.springframework.integration:spring-integration-mail:1.0.4.RELEASE')  {
          excludes &quot;spring-aop&quot;, &quot;spring-beans&quot;, &quot;spring-context&quot;, &quot;spring-context-support&quot;, &quot;spring-core&quot;, &quot;spring-tx&quot;
        }
    }
[/sourcecode] 

Be aware that Grails itself has a dependency on multiple Spring modules, that is the reason why the code sample above explicitly excludes those modules. As you can see, there is a specific Spring Integration module for mail support with artefact-id <tt>spring-integration-mail</tt> which is used in this example. There are various extensions e.g. for RMI, HTTP, JMS etc. integration scenarios.

<h4>A simple configuration</h4>

As mentioned, producers, consumers and messages play a central role in messaging systems. Another important concept is called a <i>channel</i>. A channel is a logical pathway between a sender and its receivers. Spring Integration supports two conceptually different channel types: event-based and polling channels. 

Event-based channels are rather easy to understand. Whenever a message is sent on an event-based channel, the subscribers immediately receive that message. On the other side, polling channels poll the channel for new messages and if messages are found, those are handled by the associated consumers.

Let us assume the use case for our application is to send mails in chunks - either the application sends chunks of 50 messages or it waits for a certain timeout to occur.

First step is to create an <tt>integration.xml</tt> and to define a pollable channel in there:

[sourcecode language="xml"]
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans:beans xmlns=&quot;http://www.springframework.org/schema/integration&quot;
	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
	xmlns:beans=&quot;http://www.springframework.org/schema/beans&quot;
	xmlns:mail=&quot;http://www.springframework.org/schema/integration/mail&quot;
	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans ... &quot;&gt;

    &lt;channel id=&quot;someMessageChannel&quot;/&gt;

&lt;/beans:beans&gt;
[/sourcecode]

The <tt>integration.xml</tt> file can simply be referenced by Grails <tt>resources.xml</tt> or <tt>resources.groovy</tt>.

Per default such a declaration declares a <tt>org.springframework.integration.channel.DirectChannel</tt> bean. A direct channel is a point-to-point channel that supports execution of message operations in a single thread. 

As the <tt>someMessageChannel</tt> is a Spring bean it can be injected into Grails service classes:

[sourcecode language="groovy"]
class MyService {

  static transactional = true

  MessageChannel someMessageChannel
  
  def void someOperation()  {
    // ...
    someMessageChannel.send(...)
  }
}

[/sourcecode]

The <tt>MessageChannel</tt> can now be used to send <tt>org.springframework.integration.core.Message</tt> instances:

[sourcecode language="groovy"]
  someMessageChannel.send(new GenericMessage&lt;String&gt;(&quot;my payload&quot;))
[/sourcecode]

In this case, the message simply has an instance of <tt>java.lang.String</tt> as payload, but the <tt>GenericMessage</tt> actually is generic and supports arbitrary classes. In our use case of sending mails, the application has to construct a more complicated message, including message headers in addition to the message payload:

[sourcecode language="groovy"]
    def headers = [:]

    headers.put MailHeaders.FROM, from
    headers.put MailHeaders.SUBJECT, subject
    headers.put MailHeaders.TO, receiver

    // create an instance of javax.mail.internet.MimeMessage
    // ...
    someMessageChannel.send(new GenericMessage&lt;MimeMailMessage&gt;(new MimeMailMessage(mimeMessage), headers))
[/sourcecode]

This is the time we need to add another component to our configuration file: we need to add an SMTP adapter. An adapter acts as messaging client and invokes functionality of the adapted application or component. The Spring Integration Mail module provides an adapter that delegates to Spring's <tt>JavaMailSender</tt>. Thus in order to add get the mail adapter working, you need a mail sender in the application context:

[sourcecode language="xml"]
  &lt;channel id=&quot;someMessageChannel&quot;/&gt;

  &lt;!-- mailSender bean needs to be configured somewhere in the application context... --&gt;
  &lt;mail:outbound-channel-adapter channel=&quot;someMessageChannel&quot; mail-sender=&quot;mailSender&quot;/&gt;
&lt;/beans:beans&gt;
[/sourcecode] 

Last step is to add polling capabilities to our <tt>someMessageChannel</tt> which can be done with some additional XML configuration:

[sourcecode language="xml"]
  &lt;channel id=&quot;someMessageChannel&quot;/&gt;

  &lt;!-- mailSender bean needs to be configured somewhere in the application context... --&gt;
  &lt;mail:outbound-channel-adapter channel=&quot;someMessageChannel&quot; mail-sender=&quot;mailSender&quot;&gt;
    &lt;poller max-messages-per-poll=&quot;50&quot;&gt;
      &lt;interval-trigger interval=&quot;30&quot; time-unit=&quot;SECONDS&quot;/&gt;
    &lt;/poller&gt;
  &lt;/mail:outbound-channel-adapter&gt;
&lt;/beans:beans&gt;
[/sourcecode] 

Please notice, in a real world example the application would probably not create a message instance which is tied to a <tt>MimeMessage</tt>. In place of adding the mail related information on message creation, one could use <tt>Transformer</tt> implementations to do that just before the mail adapter receives the message.

<h4>Conclusion</h4>

Spring Integration is a mighty Spring extension - if you are seriously developing Grails applications you should consider taking a look at it. Sending mail is only the peak of the iceberg - if you think especially of enterprise integration scenarios with other applications or external systems using a messaging system (and maybe a JMS messaging server) can enforce performance and reliability of applications.

If you want to delve into the topic of enterprise integration patterns, take a look at [Amazon-Link, <a href="http://www.amazon.de/Enterprise-Integration-Patterns-Designing-Deploying/dp/0321200683/ref=sr_1_1?ie=UTF8&amp;s=books-intl-de&amp;qid=1273614487&amp;sr=8-1">4</a>], btw Spring Integration's design is inspired by the patterns mentioned there.

[0] <a href="http://www.grails.org/Mail+plugin">Grails Mail Plugin - http://www.grails.org/Mail+plugin</a>
[1] <a href="http://www.springsource.org/spring-integration">Spring Integration Project Homepage</a>
[2] <a href="http://repo1.maven.org/maven2/org/springframework/integration/">Spring Integration in Central Maven Repo</a>
[3] <a href="http://www.amazon.de/Enterprise-Integration-Patterns-Designing-Deploying/dp/0321200683/ref=sr_1_1?ie=UTF8&amp;s=books-intl-de&amp;qid=1273614487&amp;sr=8-1">Enterprise Integration Patterns - Hohpe, Woolfe, et.al.</a>

<a href="http://flattr.com/thing/15104/Integration-and-Grails" target="_blank">
<img src="http://api.flattr.com/button/button-static-50x60.png" title="Flattr this" border="0" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>448</wp:post_id>
		<wp:post_date>2010-05-11 23:11:44</wp:post_date>
		<wp:post_date_gmt>2010-05-11 22:11:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>integration-and-grails</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1275591260]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[13220543]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>reddit</wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"count";s:1:"0";s:4:"time";s:10:"1293719855";}]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>36</wp:comment_id>
		<wp:comment_author><![CDATA[andresteingress]]></wp:comment_author>
		<wp:comment_author_email>grails.inside@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://andresteingress.wordpress.com</wp:comment_author_url>
		<wp:comment_author_IP>81.10.228.234</wp:comment_author_IP>
		<wp:comment_date>2010-05-12 12:54:36</wp:comment_date>
		<wp:comment_date_gmt>2010-05-12 11:54:36</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[thank you. 

take a look at Spring Integration's reference documentation on <a href="http://static.springsource.org/spring-integration/reference/htmlsingle/spring-integration-reference.html#transformer" rel="nofollow">transformers</a>.

Another way to enrich the message with mail specific header values only would be using the header-enricher provided by the mail extension:

[sourcecode language="xml"]
&lt;mail:header-enricher subject=&quot;Example Mail&quot;
                     to=&quot;to@example.org&quot;
                     cc=&quot;cc@example.org&quot;
                     bcc=&quot;bcc@example.org&quot;
                     from=&quot;from@example.org&quot;
                     reply-to=&quot;replyTo@example.org&quot;
                     overwrite=&quot;false&quot;/&gt;
[/sourcecode] 

The provided mail-adresses could be specified in the applications <tt>Config.groovy</tt> and be replaced with placeholders in the <tt>integration.xml</tt>.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>35</wp:comment_parent>
		<wp:comment_user_id>13220543</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>42</wp:comment_id>
		<wp:comment_author><![CDATA[Domain Patterns in Enterprise Projects &laquo; Grails Inside]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://andresteingress.wordpress.com/2010/05/15/domain-patterns-in-enterprise-projects/</wp:comment_author_url>
		<wp:comment_author_IP>72.233.96.151</wp:comment_author_IP>
		<wp:comment_date>2010-05-15 20:51:58</wp:comment_date>
		<wp:comment_date_gmt>2010-05-15 19:51:58</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] a rather technological issue we don&#8217;t care about now (although I did in the last blog post [3]). What&#8217;s interesting in this place is where to put the additional domain [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>35</wp:comment_id>
		<wp:comment_author><![CDATA[Felipe Cypriano]]></wp:comment_author>
		<wp:comment_author_email>fmcypriano@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://felipecypriano.com/blog</wp:comment_author_url>
		<wp:comment_author_IP>187.14.191.16</wp:comment_author_IP>
		<wp:comment_date>2010-05-12 12:47:17</wp:comment_date>
		<wp:comment_date_gmt>2010-05-12 11:47:17</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Cold you give an example of a Transformer used in this scenario or a link to it?

Very nice post, congrats.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>37</wp:comment_id>
		<wp:comment_author><![CDATA[Felipe Cypriano]]></wp:comment_author>
		<wp:comment_author_email>fmcypriano@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://felipecypriano.com/blog</wp:comment_author_url>
		<wp:comment_author_IP>187.14.191.16</wp:comment_author_IP>
		<wp:comment_date>2010-05-12 13:09:48</wp:comment_date>
		<wp:comment_date_gmt>2010-05-12 12:09:48</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[So, the idea of header-enricher is to provide default value? Could I use some default and change others by message, like this?

<pre>
&lt;mail:header-enricher subject=&quot;Info Mail&quot;
                     from=&quot;from@example.org&quot;
                     reply-to=&quot;replyTo@example.org&quot;
                     overwrite=&quot;false&quot;/&gt;
</pre>

And on my service I could set only the header 'to':

<pre>
someMessageChannel.send(new GenericMessage("my payload", [to: 'to@customer.com']))
<pre>]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>36</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>38</wp:comment_id>
		<wp:comment_author><![CDATA[andresteingress]]></wp:comment_author>
		<wp:comment_author_email>grails.inside@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://andresteingress.wordpress.com</wp:comment_author_url>
		<wp:comment_author_IP>81.10.228.234</wp:comment_author_IP>
		<wp:comment_date>2010-05-12 13:16:20</wp:comment_date>
		<wp:comment_date_gmt>2010-05-12 12:16:20</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[did not try it that way but i guess this should work.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>37</wp:comment_parent>
		<wp:comment_user_id>13220543</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>326</wp:comment_id>
		<wp:comment_author><![CDATA[Gaurav Kohli]]></wp:comment_author>
		<wp:comment_author_email>gauav.in@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://Xebia.com</wp:comment_author_url>
		<wp:comment_author_IP>122.162.96.2</wp:comment_author_IP>
		<wp:comment_date>2010-11-17 16:53:13</wp:comment_date>
		<wp:comment_date_gmt>2010-11-17 15:53:13</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Hi Fellipe,

Ya that would work. Headers in Spring Integration is just a java map, so you can specific some in the transformer and rest or more in the header enrich. It would just add or override the previous headers]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>Data Manipulation and Domain Logic</title>
		<link>http://andresteingress.wordpress.com/2010/05/15/domain-patterns-in-enterprise-projects/data-manipulation-and-domain-logic/</link>
		<pubDate>Sat, 15 May 2010 19:20:05 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<guid isPermaLink="false">http://andresteingress.files.wordpress.com/2010/05/data-manipulation-and-domain-logic.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>479</wp:post_id>
		<wp:post_date>2010-05-15 20:20:05</wp:post_date>
		<wp:post_date_gmt>2010-05-15 19:20:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>data-manipulation-and-domain-logic</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>471</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://andresteingress.files.wordpress.com/2010/05/data-manipulation-and-domain-logic.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/05/data-manipulation-and-domain-logic.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"397";s:6:"height";s:3:"314";s:14:"hwstring_small";s:23:"height='96' width='121'";s:4:"file";s:110:"/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/05/data-manipulation-and-domain-logic.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>An Aggregate</title>
		<link>http://andresteingress.wordpress.com/2010/05/15/domain-patterns-in-enterprise-projects/an-aggregate/</link>
		<pubDate>Sat, 15 May 2010 19:48:22 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<guid isPermaLink="false">http://andresteingress.files.wordpress.com/2010/05/an-aggregate.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>496</wp:post_id>
		<wp:post_date>2010-05-15 20:48:22</wp:post_date>
		<wp:post_date_gmt>2010-05-15 19:48:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>an-aggregate</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>471</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://andresteingress.files.wordpress.com/2010/05/an-aggregate.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/05/an-aggregate.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"415";s:6:"height";s:3:"171";s:14:"hwstring_small";s:23:"height='52' width='128'";s:4:"file";s:88:"/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/05/an-aggregate.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Domain Patterns in Enterprise Projects</title>
		<link>http://andresteingress.wordpress.com/2010/05/15/domain-patterns-in-enterprise-projects/</link>
		<pubDate>Sat, 15 May 2010 19:51:52 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[basic]]></category>

		<category domain="category" nicename="basic"><![CDATA[basic]]></category>

		<category><![CDATA[grails]]></category>

		<category domain="category" nicename="grails"><![CDATA[grails]]></category>

		<category><![CDATA[patterns]]></category>

		<category domain="category" nicename="patterns"><![CDATA[patterns]]></category>

		<guid isPermaLink="false">http://andresteingress.wordpress.com/?p=471</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://flattr.com/thing/15101/Domain-Patterns-in-Enterprise-Projects" target="_blank">
<img src="http://api.flattr.com/button/button-static-50x60.png" title="Flattr this" border="0" align="right" vspace="20" hspace="10" /></a> If I had to separate projects I've been in, i would difference between data manipulation and enterprise projects.

Data manipulation projects mainly consist of a set of forms needed to alter data which is stored in some persistent store (most of the time a relational database). In these projects, there is not much domain logic to be found. There might be some validation logic, some jobs running in the background, but that's mainly it with domain logic.

Enterprise projects are all about domain logic and integration of external systems. Most of the time a project starts with implementing all the views and domain classes which are considered to be simple, that is, not much domain knowledge has to be available in order to implement those views. But as time goes by, domain logic creeps in and classes which seemed pretty small and granular for data manipulation style grow to be oversized monsters.

<img src="http://andresteingress.files.wordpress.com/2010/05/data-manipulation-and-domain-logic.png" alt="" title="Data Manipulation and Domain Logic" width="397" height="314" class="aligncenter size-full wp-image-479">

Web frameworks like Grails make it easy to implement data manipulation style applications: if project members have a clear picture how to model the domain classes, they write the domain classes and all the view and controller stuff comes automatically with it. 

If your project is moving towards being an enterprise project, there are some patterns that helped in my projects to deal with additional domain logic and complexity i want to share with this article.

<h4>The Birth of Objects</h4>

The birth of an object is a special event: it is the time the object's data starts to exist in memory. In order to create an object, one of the object's constructors is used. A constructor is a special creation procedure which encapsulates object initialization and which ensures that at the end of the constructor call an object is in a state that satisfies the class invariant.

Okay, that is rather academic you might think, which is true for classes which resemble active records [<a href="http://martinfowler.com/eaaCatalog/activeRecord.html">0</a>] - but not for real domain classes found in larger projects. If you are writing an enterprise project with Grails, you have to know that Grails per se is not ment to be used in projects like that, but rather in data manipulation projects.

Let's assume one of our domain classes is a <tt>Customer</tt> domain class. If we create a <tt>Customer</tt> class with 

<tt>grails create-domain  org.ast.domain.entity.Customer</tt>

we'll get a class that looks like

[sourcecode language="groovy"]
class Customer {
	
	

	static constraints = {
		
	}
}
[/sourcecode]

At this point we could add all the properties that resemble a customer and we could think we're done. But what would happen? 

We would build nothing more than a class that resembles the active record pattern - at runtime instances of that class mainly are treated like database records and all the domain logic will be put in Grails service classes. But service classes are not ment to be the place are central business logic happens, because we would distribute business logic over multiple service classes, where as each service holds several procedures that modify our active records - such a design screams for better  object-orientation design enforcing information hiding, inheritance, dynamic binding and polymorphism.

Let us come back to our <tt>Customer</tt> domain class and add some properties to it:

[sourcecode language="groovy"]
class Customer {
	
	String name
	Status status
	Account account

	static constraints = {
		name(blank: false)
		status(nullable: false)
		account(nullable: false)
	}
}
[/sourcecode]

Clients of that class could now create customer objects in arbitrary ways:

[sourcecode language="groovy"]
def c = new Customer()
def c = new Customer(name: 'Max')
def c = new Customer(status: null)
def c = new Customer(status: Status.NEW, account: null)
// ...

[/sourcecode]

If we are serious about object-orientation and the role of creation procedures, we should not support creating objects in ways that generate objects which are in an invalid state after object creation, e.g. creating a customer without a <tt>state</tt>. In order to support a more object-oriented design we could modify the <tt>Customer</tt> class like this:

[sourcecode language="groovy"]
@Invariant({ name?.size() &gt; 0 &amp;&amp; status &amp;&amp; account })
class Customer {
	
	String name
	Status status
	Account account
	
	def Customer(String name, Account account)  {
		this.name = name
		this.status = Status.NEW
		this.account = account
	}

	void setName(final String other) { name = other }
	void setStatus(final Status other)  { status = other }
	void setAccount(final Account other) { account = other } 


	// Grails Specific 
	private def Customer() {}

	static constraints = {
		name(blank: false)
		status(nullable: false)
		account(nullable: false)
	}
}
[/sourcecode]

First of all, we've redeclared setter methods to be only visible in package scope. This comes in handy if you modularize your domain logic in separate packages and want e.g. services to change the state of customer objects.

In addition, a custom constructor was added which is a way to create a <tt>Customer</tt> object being in a valid state after the constructor call. As it turns out, more complex classes would be candidates for factory methods [<a href="http://en.wikipedia.org/wiki/Factory_method_pattern">1</a>]

[sourcecode language="groovy"]
@Invariant({ name?.size() &amp;gt; 0 &amp;&amp; status &amp;&amp; account })
class Customer {
	
	// ...
	
	def static Customer create(final String name, final Account account)  {
		return new Customer(name, account)
	}

	// ...
}
[/sourcecode]

or the Builder pattern [<a href="http://en.wikipedia.org/wiki/Builder_pattern">2</a>].

Well-defined creation procedures/constructors/factory methods/etc. are great, because there is a predefined way on how to create a fully initialized, valid object. If we should write an integration test for the <tt>Customer</tt> class and wanted some customer test instances, we would need to know what it takes to create a "valid" customer object - it might be simple in this case, but with more complex classes programmers could simply give up to write test-cases based on the simple fact that it is not obvious to them who to create instances of some type.

<h4>Domain Logic comes in...</h4>

In the previous section, the <tt>Customer</tt> class has been modified to be created with a custom constructor. Let as assume that the following business requirement comes in:

<blockquote>After 30 days, if the customer is in state REGISTERED, the application needs to send an e-mail to the customer, telling that the test-period ends in 5 days.</blockquote>

Is is pretty obvious that we need to have a job that checks for customer accounts existing &gt;= 30 days. In addition, the application needs to have a way to integrate with an external SMTP server, which is a rather technological issue we don't care about now (although I did in the last blog post [<a href="http://andresteingress.wordpress.com/2010/05/11/integration-and-grails/">3</a>]). What's interesting in this place is where to put the additional domain logic.

A first naive approach would be to create a service class <tt>CustomerService</tt> which implements the business requirement:

[sourcecode language="groovy"]
class CustomerService {	
	
	static transactional = true
	
	def void sentTestPeriodEndsMail(final Customer customer)  {
		
		if (customer.state != State.REGISTERED) return
		if (!(customer.created + 30 &amp;gt;= new Date()))  return
		
		customer.state = State.REGISTERED_WARNED
		customer.save()
		
		sendMailMessage(customer)
	}
	
	// ...
}
[/sourcecode]

The code above exactly implements the business requirement, which is a good thing. But what if more domain logic creeps in? Let's say there is a more privileged type of users, <tt>FriendOfMineCustomer</tt> from which instances should never receive those mails. We would have to change our service class method to something like:

[sourcecode language="groovy"]
class CustomerService {	
	
	static transactional = true
	
	def void sentTestPeriodEndsMail(final Customer customer)  {
		
		if (customer instanceof FriendOfMineCustomer) return // &lt;-- more domain logic comes in...
		if (customer.state != State.REGISTERED) return
		if (!(customer.created + 30 &amp;gt;= new Date()))  return
		
		customer.state = State.REGISTERED_WARNED
		customer.save()
		
		sendMailMessage(customer)
	}
	
	// ...
}
[/sourcecode]

Now we start to feel that this is obviously not a good design. Just assume we need to check if a customer object is a candidate for receiving reminder messages in another service - we would need to duplicate the code above and put in that place. What is the reason that we slipped into this design? The reason was that we treated customers as active records and created a service procedure that implemented the business requirement in first place with pure procedural design.

A better approach would be to put the additional domain logic in the <tt>Customer</tt> class itself:

[sourcecode language="groovy"]
@Invariant({ name?.size() &amp;gt; 0 &amp;&amp; status &amp;&amp; account })
class Customer {
	
	def boolean isTestPeriodEmailCandidate()  {
		return state == State.REGISTERED &amp;&amp; created + 30 &amp;gt;= new Date()
	}

	// ...
}
[/sourcecode]

than we could simply modify <tt>FriendOfMineCustomer</tt> to:

[sourcecode language="groovy"]
class FriendOfMinCustomer extends Customer {
	
	def boolean isTestPeriodEmailCandidate()  {
		return false
	}

	// ...
}
[/sourcecode]

and the <tt>CustomerService</tt> class would simply be the integrational glue between the core domain class and the messaging component:

[sourcecode language="groovy"]
class CustomerService {	
	
	static transactional = true
	
	def void sentTestPeriodEndsMail(final Customer customer)  {
		
		if (!customer.isTestPeriodEmailCandidate()) return
		
		customer.state = State.REGISTERED_WARNED
		customer.save()
		
		sendMailMessage(customer)
	}
	
	// ...
}
[/sourcecode]

As you can see, code for the service class does not feel that complicated anymore. Changing the customer's state should be externalized to another domain class like <tt>CustomerWorkflow</tt>:

[sourcecode language="groovy"]
class CustomerWorkflow {	
	
	State state
	Customer customer
	
	// ...
}
[/sourcecode]

This would simplify the service class' method code to:

[sourcecode language="groovy"]
class CustomerService {	
	
	static transactional = true
	
	def void sentTestPeriodEndsMail(final Customer customer)  {
		
		if (!customer.isTestPeriodEmailCandidate()) return
		
		customer.workflow.mailMessageSent()
		
		sendMailMessage(customer)
	}
	
	// ...
}
[/sourcecode]

Keep in mind that there is no single best way on how to treat domain logic in enterprise applications, but one should at least know some basic patterns found in [4] or [5].

<h4>Entities vs. Value Objects</h4>

Another thing which is important for larger Grails projects is to recognize the difference between <i>entities</i> and simple <i>value objects</i>. 

In Grails, each generated domain class is an entity - it can be uniquely identified. On the other side, value objects do not have an identity, are immutable and interchangeable. Value object classes could be enumerations, but also separate GORM domain classes. GORM supports embedding domain classes within other domain classes. The decision whether a certain class is a value object class or entity class can change from domain to domain. It could be that an address is a value object, but put in another context an address is an entity.

Defining value objects with domain classes is usually done with the static <tt>embedded</tt> property:

[sourcecode language="groovy"]
class Customer {	
	
	// ...
	Address homeAddress
	
	static embedded = ['homeAddress']
}

class Address  {
	
	String street
	// ...
}
[/sourcecode]

Embedding classes has the advantage that developers don't have to care about cascading CRUD operations, since data is directly embedded in the parent table at the database level. Therefore, value object classes simplify domain class relationships.

<h4>The Role of Repositories</h4>

A repository is responsible for loading persistent objects from arbitrary data stores. In Grails, this functionality is mostly encapsulated with GORM generated methods, available as static methods in each domain class:

[sourcecode language="groovy"]
def customers = Customer.findAllByState(State.NEW, [max: 10])
// ...
[/sourcecode]

To be honest, outsourcing data accessing logic in a separate repository class does not seem to be reasonable with GORM. At least one use case would justify separate repository classes: complex data graph deletion.

If the domain model has complex relationships the best strategy is to define <i>Aggregate</i> objects. An aggregate object is the root object of a graph of associated objects. Clients of that class access objects in the aggregates graph only through accessor methods in the aggregate object. It is not possible to modify objects in the data graph directly without using aggregate methods.

<img src="http://andresteingress.files.wordpress.com/2010/05/an-aggregate.png" alt="" title="An Aggregate" width="415" height="171" class="aligncenter size-full wp-image-496">

This pattern simplifies relationships within the domain model and therefore reduces complexity to handle the object graphs and relationships between them. Overall, modification/deletion operations are hidden and encapsulated by the root entity of the aggregate.

<h4>Conclusion</h4>

This article does not claim to offer a complete overview of best practices in Grails enterprise projects, but reflects best-practices that i have found useful in projects i participated in.  

I would be happy to discuss other views or other patterns in the comments section of this article.

[0] <a href="http://martinfowler.com/eaaCatalog/activeRecord.html">Active Record Pattern - http://martinfowler.com/eaaCatalog/activeRecord.html</a>
[1] <a href="http://en.wikipedia.org/wiki/Factory_method_pattern">Factory Method Pattern - http://en.wikipedia.org/wiki/Factory_method_pattern</a>
[2] <a href="http://en.wikipedia.org/wiki/Builder_pattern">Builder Pattern - http://en.wikipedia.org/wiki/Builder_pattern</a>
[3] <a href="http://andresteingress.wordpress.com/2010/05/11/integration-and-grails/">Integration and Grails - http://andresteingress.wordpress.com/2010/05/11/integration-and-grails/</a>
[4] <a href="http://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215/ref=sr_1_1?ie=UTF8&amp;s=books&amp;qid=1273950192&amp;sr=8-1">Domain Driven Design - Eric Evans</a>
[5] <a href="http://www.amazon.com/Patterns-Enterprise-Application-Architecture-Martin/dp/0321127420/ref=sr_1_1?ie=UTF8&amp;s=books&amp;qid=1273950218&amp;sr=1-1">Patterns of Enterprise Application Architecture - Martin Fowler</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>471</wp:post_id>
		<wp:post_date>2010-05-15 20:51:52</wp:post_date>
		<wp:post_date_gmt>2010-05-15 19:51:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>domain-patterns-in-enterprise-projects</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1287738533]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[13220543]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>reddit</wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"count";s:1:"0";s:4:"time";s:10:"1293719895";}]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>51</wp:comment_id>
		<wp:comment_author><![CDATA[Peter Niederwieser]]></wp:comment_author>
		<wp:comment_author_email>pniederw@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://spockframework.org</wp:comment_author_url>
		<wp:comment_author_IP>90.146.215.104</wp:comment_author_IP>
		<wp:comment_date>2010-05-16 14:02:48</wp:comment_date>
		<wp:comment_date_gmt>2010-05-16 13:02:48</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Great stuff Andre (as always). One minor correction: The setters on Customer are still public. Groovy doesn't currently provide a way to declare package-scoped methods, but it might in the future (see <a href="http://jira.codehaus.org/browse/GROOVY-4208" rel="nofollow">http://jira.codehaus.org/browse/GROOVY-4208</a>).]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>192</wp:comment_id>
		<wp:comment_author><![CDATA[andresteingress]]></wp:comment_author>
		<wp:comment_author_email>grails.inside@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://andresteingress.wordpress.com</wp:comment_author_url>
		<wp:comment_author_IP>81.189.23.53</wp:comment_author_IP>
		<wp:comment_date>2010-08-24 07:47:02</wp:comment_date>
		<wp:comment_date_gmt>2010-08-24 06:47:02</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Grails uses the public default constructor to instantiate objects. Since you specified an invariant that invariant will be checked because the constructor is implictly defined as public. 
In order to let your invariant work with Grails you need to add a private constructor which will be ignored by GContracts assertion injection:

[sourcecode language="groovy"]
@Invariant({ amount &gt;= 0.00 &amp;&amp; vendor })
class Payment {

// needed by Hibernate, no invariant checking
private Payment() {}

//Properties
BigDecimal amount
String notes
Date dateCreated
Date lastUpdated
def Product paymentFor
def Vendor vendor
//Relationships
static def belongsTo = [org.cannva.imp.Vendor]
[/sourcecode] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>186</wp:comment_parent>
		<wp:comment_user_id>13220543</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>182</wp:comment_id>
		<wp:comment_author><![CDATA[Matt]]></wp:comment_author>
		<wp:comment_author_email>wm@mhbcomposer.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>108.6.166.58</wp:comment_author_IP>
		<wp:comment_date>2010-08-21 19:13:40</wp:comment_date>
		<wp:comment_date_gmt>2010-08-21 18:13:40</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Great article. I'm new to Grails but a big fan of enterprise domain modeling - your article was very helpful in giving me a better idea of how to combine the two.

One typo - not a big deal but perhaps could be confusing - you wrote "clue" instead of "glue":
"the CustomerService class would simply be the integrational clue between..."

Thanks again.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>186</wp:comment_id>
		<wp:comment_author><![CDATA[Luis]]></wp:comment_author>
		<wp:comment_author_email>lramos85@gmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>24.4.49.189</wp:comment_author_IP>
		<wp:comment_date>2010-08-22 20:51:03</wp:comment_date>
		<wp:comment_date_gmt>2010-08-22 19:51:03</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[I'm having problems using a simple Payment/Vendor Domain Model and using generated controllers, etc. 

@Invariant({ amount &gt;= 0.00 &amp;&amp; vendor })
class Payment {
  //Properties
  BigDecimal amount
  String notes
  Date dateCreated
  Date lastUpdated
  def Product paymentFor
  def Vendor vendor
  //Relationships
  static def belongsTo = [org.cannva.imp.Vendor]

I have it saving correctly, but whenever I want to show it, Payment.get(params.id) I get:
 org.cannva.imp.Payment

{ amount &gt;= 0.00 &amp;&amp; vendor }
  |      |       |
  null   false   false

Any help would be appreciated, I just probably don't understand how to use it in this manner.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>195</wp:comment_id>
		<wp:comment_author><![CDATA[andresteingress]]></wp:comment_author>
		<wp:comment_author_email>grails.inside@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://andresteingress.wordpress.com</wp:comment_author_url>
		<wp:comment_author_IP>81.189.23.53</wp:comment_author_IP>
		<wp:comment_date>2010-08-24 08:52:54</wp:comment_date>
		<wp:comment_date_gmt>2010-08-24 07:52:54</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[moved further discussion on this topic to github: <a href="http://github.com/andresteingress/gcontracts/issues#issue/21" rel="nofollow">http://github.com/andresteingress/gcontracts/issues#issue/21</a>]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>186</wp:comment_parent>
		<wp:comment_user_id>13220543</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>gcontracts 1.0.2 Released!</title>
		<link>http://andresteingress.wordpress.com/2010/05/18/gcontracts-1-0-2-released/</link>
		<pubDate>Tue, 18 May 2010 09:58:13 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[gcontracts]]></category>

		<category domain="category" nicename="gcontracts"><![CDATA[gcontracts]]></category>

		<category><![CDATA[releases]]></category>

		<category domain="category" nicename="releases"><![CDATA[releases]]></category>

		<guid isPermaLink="false">http://andresteingress.wordpress.com/?p=500</guid>
		<description></description>
		<content:encoded><![CDATA[I am proud to tell you that gcontracts 1.0.2 was released and pushed to the central Maven repository [<a href="http://repo1.maven.org/maven2/org/gcontracts/gcontracts/1.0.2/">0</a>].

Grab gcontracts 1.0.2 by defining a <a href="http://andresteingress.wordpress.com/2010/04/14/gcontracts-available-in-maven-central-repository/">Maven dependency [0]</a> or by direct download from <a href="http://github.com/andresteingress/gcontracts/downloads">github's download section [1]</a>.

<h4>Changes</h4>

gcontracts 1.0.2 fixes the following issues:

<ul>
<li><a href="http://github.com/andresteingress/gcontracts/issues/closed#issue/5">ISSUE-5</a>: better AssertionError messages - the closure source of the invariant or pre/postcondition that failed has been added to the AssertionError message.
</li>
<li><a href="http://github.com/andresteingress/gcontracts/issues/closed#issue/6">ISSUE-6</a>: line numbers were added in the <tt>AssertionError</tt> stacktrace. Whenever an assertion fails the last line number guides directly to the condition that caused the <tt>AssertionError</tt>.
</li>
<li>
Bug fixes.
</li>
</ul>

Special thanks to <a href="www.twitter.com/HamletDRC">Hamlet D'Arcy</a> and others for your contributions!

[0] <a href="http://repo1.maven.org/maven2/org/gcontracts/gcontracts/1.0.2/">gcontracts - Central Maven Repository</a>
[1] <a href="http://andresteingress.wordpress.com/2010/04/14/gcontracts-available-in-maven-central-repository/">gcontracts Available in Central Maven Repository</a>
[2] <a href="http://github.com/andresteingress/gcontracts/downloads">gcontracts - Github Download Section</a>

<a href="http://flattr.com/thing/15111/GContracts-1-0-2-Released" target="_blank">
<img src="http://api.flattr.com/button/button-static-50x60.png" title="Flattr this" border="0" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>500</wp:post_id>
		<wp:post_date>2010-05-18 10:58:13</wp:post_date>
		<wp:post_date_gmt>2010-05-18 09:58:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gcontracts-1-0-2-released</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[13220543]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1276206061]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>reddit</wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"count";s:1:"0";s:4:"time";s:10:"1293720030";}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>GContracts 1.1.0 Released!</title>
		<link>http://andresteingress.wordpress.com/2010/06/12/gcontracts-1-1-0-released/</link>
		<pubDate>Sat, 12 Jun 2010 10:52:49 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[gcontracts]]></category>

		<category domain="category" nicename="gcontracts"><![CDATA[gcontracts]]></category>

		<category><![CDATA[releases]]></category>

		<category domain="category" nicename="releases"><![CDATA[releases]]></category>

		<guid isPermaLink="false">http://andresteingress.wordpress.com/?p=532</guid>
		<description></description>
		<content:encoded><![CDATA[After a short break, I am happy to tell you that GContracts 1.1.0 has been released and was pushed to the central Maven repository.

Grab GContracts 1.1.0 by defining a <a href="http://andresteingress.wordpress.com/2010/04/14/gcontracts-available-in-maven-central-repository/">Maven dependency [0]</a> or by direct download from <a href="http://github.com/andresteingress/gcontracts/downloads">github's download section [1]</a>.

This release marks an important milestone since inheritance of class invariants, preconditions and postconditions is supported by now. The basic principles found in Design by Contract(tm) can therefore be fully utilized in Groovy/Grails projects.

GContracts' test suite currently holds more than 100 test cases for regression and feature testing. There <del datetime="2010-06-18T09:14:30+00:00">will be</del> is a separate blog post on how to test and implement Groovy AST transformations, with all my experiences so far with GContracts [<a href="http://andresteingress.wordpress.com/2010/06/18/unit-testing-groovy-ast-transformations/">4</a>].

<h4>Changes</h4>

GContracts 1.1.0 fixes the following issues:

<ul>
<li><a href="http://github.com/andresteingress/gcontracts/issues/closed#issue/14">ISSUE-14</a>: fix class invariant inheritance with default class invariant - a class with a class invariant in its heir must be equipped with a default class invariant chaining the method call to the super class invariant.
</li>
<li><a href="http://github.com/andresteingress/gcontracts/issues/closed#issue/1">ISSUE-1</a>: pre- and postcondition inheritance - class invariants, pre- and postconditions are now inherited. inheritance support does not include pre/postcondition support in interfaces, but there is a separate ISSUE <a href="http://github.com/andresteingress/gcontracts/issues/closed#issue/12">on this topic</a>. More about pre/postcondition inheritance <del datetime="2010-06-15T09:08:26+00:00">will follow</del> in a separate blog post [<a href="http://andresteingress.wordpress.com/2010/06/15/gcontracts-inheritance-of-pre-and-postconditions/">3</a>].
</li>
<li><a href="http://github.com/andresteingress/gcontracts/issues/closed#issue/10">ISSUE-10</a>: all uses of <tt>getTypeClass()</tt> were removed with valid alternatives. this was done due to issues with the Groovy Eclipse plugin.
</li>
<li><a href="http://github.com/andresteingress/gcontracts/issues/closed#issue/13">ISSUE-13</a>: Cleanup the generated AST: a few optimizations have been made to the AST node generating components.
</li>
<li>
Bug fixes and a lot more bug fixes.
</li>
</ul>

Special thanks for your contributions!

[0] <a href="http://repo1.maven.org/maven2/org/gcontracts/gcontracts/1.1.0/">GContracts - Central Maven Repository</a>
[1] <a href="http://andresteingress.wordpress.com/2010/04/14/GContracts-available-in-maven-central-repository/">GContracts Available in Central Maven Repository</a>
[2] <a href="http://github.com/andresteingress/gcontracts/downloads">GContracts - Github Download Section</a>
[3] <a href="http://andresteingress.wordpress.com/2010/06/15/gcontracts-inheritance-of-pre-and-postconditions/">GContracts: Inheritance of Pre- and Postconditions</a>
[4] <a href="http://andresteingress.wordpress.com/2010/06/18/unit-testing-groovy-ast-transformations/">Grails Inside - Unit Testing Groovy AST Transformations</a>

<a href="http://flattr.com/thing/21159/GContracts-1-1-0-Released" target="_blank">
<img src="http://api.flattr.com/button/button-static-50x60.png" alt="Flattr this" title="Flattr this" border="0" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>532</wp:post_id>
		<wp:post_date>2010-06-12 11:52:49</wp:post_date>
		<wp:post_date_gmt>2010-06-12 10:52:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gcontracts-1-1-0-released</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>jabber_published</wp:meta_key>
		<wp:meta_value><![CDATA[1276339972]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1276852620]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[13220543]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>reddit</wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"count";s:1:"0";s:4:"time";s:10:"1293720056";}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>68</wp:comment_id>
		<wp:comment_author><![CDATA[Guillaume Laforge]]></wp:comment_author>
		<wp:comment_author_email>glaforge@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://gaelyk.appspot.com</wp:comment_author_url>
		<wp:comment_author_IP>82.244.134.66</wp:comment_author_IP>
		<wp:comment_date>2010-06-14 08:38:47</wp:comment_date>
		<wp:comment_date_gmt>2010-06-14 07:38:47</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Congratulations for this great release!]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>postcondition inheritance</title>
		<link>http://andresteingress.wordpress.com/2010/06/15/gcontracts-inheritance-of-pre-and-postconditions/postcondition-inheritance/</link>
		<pubDate>Tue, 15 Jun 2010 05:48:09 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<guid isPermaLink="false">http://andresteingress.files.wordpress.com/2010/06/postcondition-inheritance.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>583</wp:post_id>
		<wp:post_date>2010-06-15 06:48:09</wp:post_date>
		<wp:post_date_gmt>2010-06-15 05:48:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>postcondition-inheritance</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>552</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://andresteingress.files.wordpress.com/2010/06/postcondition-inheritance.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/06/postcondition-inheritance.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"407";s:6:"height";s:3:"255";s:14:"hwstring_small";s:23:"height='80' width='128'";s:4:"file";s:101:"/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/06/postcondition-inheritance.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>precondition inheritance</title>
		<link>http://andresteingress.wordpress.com/2010/06/15/gcontracts-inheritance-of-pre-and-postconditions/precondition-inheritance/</link>
		<pubDate>Tue, 15 Jun 2010 05:48:46 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<guid isPermaLink="false">http://andresteingress.files.wordpress.com/2010/06/precondition-inheritance.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>584</wp:post_id>
		<wp:post_date>2010-06-15 06:48:46</wp:post_date>
		<wp:post_date_gmt>2010-06-15 05:48:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>precondition-inheritance</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>552</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://andresteingress.files.wordpress.com/2010/06/precondition-inheritance.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/06/precondition-inheritance.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"407";s:6:"height";s:3:"258";s:14:"hwstring_small";s:23:"height='81' width='128'";s:4:"file";s:100:"/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/06/precondition-inheritance.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>GContracts: Inheritance of Pre- and Postconditions</title>
		<link>http://andresteingress.wordpress.com/2010/06/15/gcontracts-inheritance-of-pre-and-postconditions/</link>
		<pubDate>Tue, 15 Jun 2010 06:05:34 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[basic]]></category>

		<category domain="category" nicename="basic"><![CDATA[basic]]></category>

		<category><![CDATA[gcontracts]]></category>

		<category domain="category" nicename="gcontracts"><![CDATA[gcontracts]]></category>

		<category><![CDATA[Intro]]></category>

		<category domain="category" nicename="intro"><![CDATA[Intro]]></category>

		<guid isPermaLink="false">http://andresteingress.wordpress.com/?p=552</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://flattr.com/thing/22409/GContracts-Inheritance-of-Pre-and-Postconditions" target="_blank">
<img src="http://api.flattr.com/button/button-static-50x60.png" alt="Flattr this" title="Flattr this" border="0" align="right" vspace="5" hspace="5" /></a> GContracts 1.1.0 [<a href="http://github.com/andresteingress/gcontracts">0</a>] introduced inheritance for pre- and postconditions and optimized class invariant inheritance. If you want to know more about GContracts take a look at the wiki [<a href="http://wiki.github.com/andresteingress/gcontracts/">1</a>] or at blog-posts tagged with "gcontracts".

<h4>What about postcondition inheritance?</h4>

Postconditions are used to specify what work is guaranteed by the supplier to be done in a specific method, under the condition that the precondition is satisfied. When inheritance comes into play, postconditions of a parent class are inherited by overridden methods of a descendant class.

Imagine a class <tt>Stack</tt> which provides methods for modifying objects kept in LIFO order.

[source language="groovy"]
import org.gcontracts.annotations.*

@Invariant({ elements != null })
class Stack {
    
    private List elements
    
    @Ensures({ is_empty() })
    public Stack()  {
        elements = []
    }
    
    @Requires({ preElements?.size() &gt; 0 })
    @Ensures({ !is_empty() })
    public Stack(List preElements)  {
        elements = preElements
    }
    
    def boolean is_empty()  {
        elements.isEmpty()
    }
    
    @Requires({ !is_empty() })
    def last_item()  {
        elements.last()
    }
    
    def count() {
        elements.size()
    }
    
    @Ensures({ result == true ? count() &gt; 0 : count() &gt;= 0  })
    def boolean has(def item)  {
        elements.contains(item)
    }
    
    @Ensures({ last_item() == item })
    def put(def item)  {
       elements.push(item)
    }
    
    @Requires({ !is_empty() })
    @Ensures({ last_item() == item })
    def replace(def item)  {
        remove()
        elements.push(item)
    }
    
    @Requires({ !is_empty() })
    @Ensures({ result != null })
    def remove()  {
        elements.pop()
    }
    
    def String toString() { elements.toString() }
}
[/source]

As you can see in the code sample <tt>@Requires</tt> and <tt>@Ensures</tt> is used to specify pre- and postconditions in certain methods. Whenever an object of type <tt>Stack</tt> is used at runtime those assertions will be checked due to hidden code segments injected by GContracts at compile-time (under the assertion that Java's assert mechanism is activated via the command line argument <tt>-ea</tt>).

Let's assume we need an extended <tt>Stack</tt> that provides us with changed method behavior. For example, we want to add a <tt>put</tt> method that adds inlining support for lists:

[source language="groovy"]
def stack = new Stack()
stack.push(['value1', 'value2', 'value3'])
[/source]

In order to implement this feature we need to override the <tt>put</tt> method found in the parent class.

[source language="groovy"]
class GroovyStack extends Stack  {

    @Override
    def put(def item)  {
        if (item instanceof List) item.each { super.put(it) }
        else super.put(item)   
    
        return item
    }
}
[/source]

If we create an instance of <tt>GroovyStack</tt> and call <tt>put</tt> with a list as actual parameter, the following assertion violation appears:

[source language="groovy"]
[inherited postcondition] in method &lt;put(item:java.lang.Object)&gt; violated. Expression: (this.last_item() == item). Values: item = [1, 2, 3, 4]
[/source]

A look at the original postcondition shows that this is in fact the case, since our new <tt>put</tt> method in the descendant flattens the given parameter and for each item in the given list executes the <tt>put</tt> method once.

Maybe a new postcondition in the descendant will solve this issue:

[source language="groovy"]
class GroovyStack extends Stack  {

    @Override
    @Ensures({ item instanceof List ? item.last() == last_item() : item == last_item() })
    def put(def item)  {
        if (item instanceof List) item.each { super.put(it) }
        else super.put(item)   
    
        return item
    }
}
[/source]

Execution again shows the following assertion:

[source language="groovy"]
[inherited postcondition] in method &lt;put(item:java.lang.Object)&gt; violated. Expression: (this.last_item() == item). Values: item = [1, 2, 3, 4]
[/source]

This leads us to the most important point with rewritten postconditions in descendant classes: you can't override them. 

A postcondition in a descendant class is always joined with the postcondition of the super class, the postcondition of the parent class is said to be <em>strengthened</em>. That means, an overridden method has to implement the postcondition of its parent classes <em>AND</em> its self-defined postcondition.

<img src="http://andresteingress.files.wordpress.com/2010/06/postcondition-inheritance.png" alt="" title="postcondition inheritance" width="407" height="255" class="aligncenter size-full wp-image-583" />

This might seem awkward at first, but consider the following code:

[source language="groovy"]
Stack stack = StackFactory.getInstance()

stack.put([1,2,3,4])
[/source]

The thing is, if we override the <tt>put</tt> method in the <tt>GroovyStack</tt> class the semantic of the code above would change with the type of <tt>Stack</tt> used at runtime: a <tt>Stack</tt> instance would push the complete list on the stack, a <tt>GroovyStack</tt> instance would push the single list items.

Indeed, changing the behavior of an overridden method does not conform to the assertion that inheritance always resembles an <i>is-a</i> relationship. If a <tt>GroovyStack</tt> should be a <tt>Stack</tt>, than it has to implement all postconditions of its parent class in overridden methods to conform to the contracts that were specified in the parent and on which clients already might rely on.

Due to inheritance of the parent postcondition we stumbled upon this circumstance and it made us think about how the <tt>Stack</tt> data-structure could already be used by its clients.

<h4>What about precondition inheritance?</h4>

Preconditions are used to specify certain conditions which must be fulfilled by a client so that a method call on an object succeeds. So far, GContracts did not support inheritance of preconditions, meaning that whenever a parent class defined a precondition on a method which has been overridden in a descendant, the precondition in the descendant had to be newly defined.

In contrast with postconditions, preconditions <em>weaken</em> the parent's preconditions. Whenever a parent class defines a precondition on a method, an overridden method might define additional preconditions which <em>might</em> be fulfilled by a client, but don't have to be.

<img src="http://andresteingress.files.wordpress.com/2010/06/precondition-inheritance.png" alt="" title="precondition inheritance" width="407" height="258" class="aligncenter size-full wp-image-584" />

If we would like to rewrite the <tt>replace</tt> method in <tt>GroovyClass</tt> we could specify an additional precondition:

[source language="groovy"]
   @Requires({ item != null })
    @Ensures({ item() == item })
    def replace(def item)  {
        super.replace(item)
    }
[/source]

But that additional precondition weakens the original one, meaning that a call like <tt>remove(null)</tt> on <tt>GroovyStack</tt> would still suffice the precondition. In contrast, a <tt>put</tt> method call on an empty stack would still raise an <tt>AssertionError</tt>.

<h4>Conclusion</h4>

Inheritance of pre- and postconditions complements object-oriented mechanisms like polymorphism, dynamic binding and overriding methods and channels those concepts to correct uses. GContracts for Groovy finally supports precondition and postcondition with 1.1.0. Therefore it supports the main principles found in Design by Contract(tm) and allows to apply the full power of contracts to domain models in Groovy/Grails projects.

[0] <a href="http://github.com/andresteingress/gcontracts">GContracts Project - http://github.com/andresteingress/gcontracts</a>
[1] <a href="http://wiki.github.com/andresteingress/gcontracts/">GContracts Wiki - http://wiki.github.com/andresteingress/gcontracts/</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>552</wp:post_id>
		<wp:post_date>2010-06-15 07:05:34</wp:post_date>
		<wp:post_date_gmt>2010-06-15 06:05:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gcontracts-inheritance-of-pre-and-postconditions</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[13220543]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1287737921]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>jabber_published</wp:meta_key>
		<wp:meta_value><![CDATA[1276581943]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>reddit</wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"count";s:1:"0";s:4:"time";s:10:"1293719793";}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>69</wp:comment_id>
		<wp:comment_author><![CDATA[GContracts 1.1.0 Released! &laquo; Grails Inside]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://andresteingress.wordpress.com/2010/06/12/gcontracts-1-1-0-released/</wp:comment_author_url>
		<wp:comment_author_IP>74.200.244.41</wp:comment_author_IP>
		<wp:comment_date>2010-06-15 10:10:09</wp:comment_date>
		<wp:comment_date_gmt>2010-06-15 09:10:09</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] ISSUE-1: pre- and postcondition inheritance &#8211; class invariants, pre- and postconditions are now inherited. inheritance support does not include pre/postcondition support in interfaces, but there is a separate ISSUE on this topic. More about pre/postcondition inheritance will follow in a separate blog post [3]. [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>Unit Testing Groovy AST Transformations</title>
		<link>http://andresteingress.wordpress.com/2010/06/18/unit-testing-groovy-ast-transformations/</link>
		<pubDate>Fri, 18 Jun 2010 09:00:13 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[ast transformations]]></category>

		<category domain="category" nicename="ast-transformations"><![CDATA[ast transformations]]></category>

		<category><![CDATA[groovy]]></category>

		<category domain="category" nicename="groovy"><![CDATA[groovy]]></category>

		<guid isPermaLink="false">http://andresteingress.wordpress.com/?p=602</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://flattr.com/thing/24136/Unit-Testing-Groovy-AST-Transformations" target="_blank">
<img src="http://api.flattr.com/button/button-static-50x60.png" alt="Flattr this" title="Flattr this" border="0" align="right" vspace="5" hspace="5" /></a> Groovy 1.6 introduced the concept of <i>AST transformations</i>. The basic concepts of global and local AST transformations have already been described in a separate blog-post [<a href="http://andresteingress.wordpress.com/2010/03/16/implementing-a-serializable-annotation-with-groovy-ast-transformations/">0</a>] and will not be part of this article.

Writing AST transformations and therefore modifying Groovy's compilation process is pretty easy. Depending on the type of AST transformation (local or global) groovyc will find <tt>ASTTransformation</tt> classes in its classpath and will apply them in the specified compilation phase (e.g. <tt>SEMANTIC_ANALYSIS</tt>).

So far so good. But if you are dealing with more complex AST transformations chances are you probably want to write unit tests that ensure the provided functionality. 

<h4>The @Serializable Annotation</h4>

Let's consider the local AST transformation of a previous blog-post [<a href="http://andresteingress.wordpress.com/2010/03/16/implementing-a-serializable-annotation-with-groovy-ast-transformations/">0</a>]:

[code language="groovy"]
@GroovyASTTransformation(phase=CompilePhase.SEMANTIC_ANALYSIS)
class SerializableASTTransformation implements ASTTransformation {

  void visit(ASTNode[] nodes, SourceUnit source) {
    if (nodes == null || nodes.size() == 0) return

    if (!(nodes[0] instanceof AnnotationNode) || !(nodes[1] instanceof AnnotatedNode)) {
      throw new GroovyBugError(&quot;@Serializable must only be applied at type level!&quot;)
    }

    AnnotatedNode parent = (AnnotatedNode) nodes[1]
    AnnotationNode node = (AnnotationNode) nodes[0]

    if (parent instanceof ClassNode) {
      ClassNode classNode = (ClassNode) parent

      classNode.addInterface(ClassHelper.makeWithoutCaching(java.io.Serializable.class));
    }
  }
}
[/code]

It implements the AST transformation for a <tt>@Serializable</tt> annotation that marks classes as serializable. The transformations adds the <tt>java.io.Serializable</tt> interface to the class definition. Note that the transformation class <tt>SerializableASTTransformation</tt> is written in Groovy and therefore needs to be compiled with groovyc.

<h4>Testing AST Transformations</h4>

<blockquote>The main question when dealing with AST transformations is how to test them properly.</blockquote> 

Independent of the chosen implementation, a test workflow for AST transformations must cover the following steps:

1. Compile the AST transformation class + all dependent classes/annotations etc.
2. Compile the test cases using the previously compiled AST transformation classes

It is obvious that these two steps can't be done in a single compilation run. Using a single compilation run, whenever trying to compile either 1. or 2. will fail with a compilation error. Thus to test AST transformations a test workflow needs to be implemented that runs in two separate compilation runs.

The first possibility would be to let your IDE handle these two separate phases. In IntelliJ, Eclipse etc. it would be easy to establish a configuration where the AST transformation classes are bundled in a separate module which is compiled to a JAR during build time. That jar can than be used to execute test cases using the bundled AST transformations. I wont provide any details on this appraoch since it has a significant drawback: with this setup debugging AST transformations is not possible. 

Since groovyc determines AST transformation classes we would need to execute groovyc in debug mode. Take a look at the following source snippet from Groovy's CompilationUnit:

[code language="groovy"]
public CompilationUnit(..)  {
  // ...
  addPhaseOperation(compileCompleteCheck, Phases.CANONICALIZATION);
  addPhaseOperation(classgen, Phases.CLASS_GENERATION);
  addPhaseOperation(output);

  ASTTransformationVisitor.addPhaseOperations(this);
  // ...
}
[/code]

Class <tt>ASTTransformationVisitor</tt> is the class that reads local and global AST transformations and adds them to the specified compilation phases, e.g. in the case of local AST transformations:

[code language="groovy"]
for (CompilePhase phase : CompilePhase.values()) {
  final ASTTransformationVisitor visitor = new ASTTransformationVisitor(phase);
  switch (phase) {
  	case INITIALIZATION:
    case PARSING:
    case CONVERSION:
    // with transform detection alone these phases are inaccessible, so don't add it
    break;

    default:
    	compilationUnit.addPhaseOperation(new CompilationUnit.PrimaryClassNodeOperation() {
        	public void call(SourceUnit source, GeneratorContext context, ClassNode classNode) throws CompilationFailedException {
            	visitor.source = source;
                visitor.visitClass(classNode);
            }, phase.getPhaseNumber());
        break;
    }
}
[/code]

To sum up: we need another way to debug AST transformations. 

<h4>A Custom <tt>GroovyClassLoader</tt></h4>

Another possiblity - and this is the preferred approach - is to use a custom <tt>GroovyClassLoader</tt> which allows to programmatically add a list of AST transformations.

GContracts [<a href="http://github.com/andresteingress/gcontracts">1</a>] is a Groovy extension that uses AST transformations to provide Design by Contract(tm) for Groovy. In order to built a reliable test suite two points were of importance:

1. Debugging support was absolutely necessary for building a library like GContracts
2. Tests need to be written really, really fast which implies small configuration and bootstrapping effort

In order to achieve these goals a base test class extending <tt>GroovyTestCase</tt> was implemented. <tt>BaseTestClass</tt> offers the most important utility methods to its descendants:

[code language="groovy"]
class BaseTestClass extends GroovyTestCase {

  private groovy.text.TemplateEngine templateEngine
  private ASTTransformationTestsGroovyClassLoader loader;

  protected void setUp() {
    super.setUp();

    templateEngine = new GStringTemplateEngine()

    loader = new ASTTransformationTestsGroovyClassLoader(getClass().getClassLoader(), [
            // add AST transformations to test...
            new ContractValidationASTTransformation(),
            new ClosureAnnotationErasingASTTransformation()
    ], CompilePhase.SEMANTIC_ANALYSIS)
  }

  String createSourceCodeForTemplate(final String template, final Map binding)  {
    templateEngine.createTemplate(template).make(binding).toString()
  }

  def create_instance_of(final String sourceCode)  {
    return create_instance_of(sourceCode, new Object[0])
  }

  def create_instance_of(final String sourceCode, def constructor_args)  {
    
    def clazz = add_class_to_classpath(sourceCode)

    return clazz.newInstance(constructor_args as Object[])
  }

  def add_class_to_classpath(final String sourceCode)  {
    loader.parseClass(sourceCode)
  }
}
[/code]

As can be seen in the code above, method <tt>setUp</tt> is used to create a custom <tt>GroovyClassLoader</tt> which allows specification of additional AST transformations at a specified compilation phase (in this case it is <tt>CompilationPhase.SEMANTIC_ANALYSIS</tt>). The classloader is used to create classes with transformations already applied.

Let us take a look at how the base test class can be extended by descendants:

[code language="groovy"]
class OldVariablePostconditionTests extends BaseTestClass {

  def templateSourceCode = '''
package tests

import org.gcontracts.annotations.Invariant
import org.gcontracts.annotations.Requires
import org.gcontracts.annotations.Ensures

class OldVariable {

  private $type someVariable

  def OldVariable(final $type other)  {
    someVariable = other
  }

  @Ensures({ old -&gt; old.someVariable != null &amp;&amp; old.someVariable != someVariable })
  def void setVariable(final $type other)  {
    this.someVariable = other
  }
}
'''

  void test_big_decimal()  {

    def instance = create_instance_of(createSourceCodeForTemplate(templateSourceCode, [type: BigDecimal.class.getName()]), new BigDecimal(0))
    instance.setVariable new BigDecimal(1)
  }


  void test_big_integer()  {
    def instance = create_instance_of(createSourceCodeForTemplate(templateSourceCode, [type: BigInteger.class.getName()]), new BigInteger(0))
    instance.setVariable new BigInteger(1)
  }

  void test_string()  {
    def instance = create_instance_of(createSourceCodeForTemplate(templateSourceCode, [type: String.class.getName()]), ' ')
    instance.setVariable 'test'
  }

  void test_integer()  {
    def instance = create_instance_of(createSourceCodeForTemplate(templateSourceCode, [type: Integer.class.getName()]), new Integer(0))
    instance.setVariable new Integer(1)
  }

  void test_float()  {
    def instance = create_instance_of(createSourceCodeForTemplate(templateSourceCode, [type: Float.class.getName()]), new Float(0))
    instance.setVariable new Float(1)
  }
  // ...
}
[/code]

This test class was directly copied from GContracts' test suite. It checks whether the so-called <i>old variable</i> behaves correctly for value types. Notice that property <tt>templateSourceCode</tt> just specifies a class template which is completed by <tt>createSourceCodeForTemplate</tt> using Groovy's <tt>GStringTemplateEngine</tt> [<a href="http://groovy.codehaus.org/api/groovy/text/GStringTemplateEngine.html">2</a>]. 

<tt>create_instance_of</tt> is than used to directly get an instance of the class which is specified in the given source code string:

[code language="groovy"]
// ...
def instance = create_instance_of(source, new Float(0))
// ...
[/code]

Alternatively, clients might use <tt>add_class_to_classpath</tt> to create an instance of the class object at first, splitting instance creation into two steps.

With this knowledge, a test case for the <tt>@Serializable</tt> annotation could look like this:

[code language="groovy"]
class SerializeableASTTransformationTests extends BaseTestClass {

  def source = '''
package tests

import org.ast.*

@Serializable
class A {
}

'''

  def void test_add_serializable_to_concrete_class()  {
    def a = create_instance_of(source)

    def interface_name = java.io.Serializable.class.getName()

    assertTrue &quot;a must implement $interface_name&quot;, a.class.getInterfaces().any { it.name == interface_name }
  }
}
[/code]

<h4>Conclusion</h4>

The beauty of this appraoch is that AST transfrormations can be debugged and can therefore be executed out of the chosen build management tool. This is possible due to splitting the overall compilation run into two independent runs: a static and a dynamic (using GroovyClassLoader at runtime) run. 

In addition, using Groovy's <tt>GStringTemplateEngine</tt>, source code and the according class objects can be built at runtime which is a hughe performance boost in terms of test case writing time.

[0] <a href="http://andresteingress.wordpress.com/2010/03/16/implementing-a-serializable-annotation-with-groovy-ast-transformations/">Implementing a @Serializable annotation with Groovy AST transformations</a>
[1] <a href="http://github.com/andresteingress/gcontracts">GContracts - Contract-Oriented Programming for Groovy</a>
[2] <a href="http://groovy.codehaus.org/api/groovy/text/GStringTemplateEngine.html">Groovy's GStringTemplateEngine</a> ]]></content:encoded>
		<excerpt:encoded><![CDATA[Writing AST transformations and therefore modifying Groovy's compilation process is pretty easy. But when it comes to testing Groovy AST transformations things can get tricky. This article introduces AST transformation testing concepts currently used by GContracts' test suite.]]></excerpt:encoded>
		<wp:post_id>602</wp:post_id>
		<wp:post_date>2010-06-18 10:00:13</wp:post_date>
		<wp:post_date_gmt>2010-06-18 09:00:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>unit-testing-groovy-ast-transformations</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[13220543]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1287737884]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>jabber_published</wp:meta_key>
		<wp:meta_value><![CDATA[1276851725]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>reddit</wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"count";s:1:"0";s:4:"time";s:10:"1293719886";}]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>71</wp:comment_id>
		<wp:comment_author><![CDATA[GContracts 1.1.0 Released! &laquo; Grails Inside]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://andresteingress.wordpress.com/2010/06/12/gcontracts-1-1-0-released/</wp:comment_author_url>
		<wp:comment_author_IP>74.200.244.97</wp:comment_author_IP>
		<wp:comment_date>2010-06-18 10:16:13</wp:comment_date>
		<wp:comment_date_gmt>2010-06-18 09:16:13</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] GContracts&#8217; test suite currently holds more than 100 test cases for regression and feature testing. There will be is a separate blog post on how to test and implement Groovy AST transformations, with all my experiences so far with GContracts [4]. [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>363</wp:comment_id>
		<wp:comment_author><![CDATA[Unit Testing Groovy AST Transformations]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://codebix.com/posts/post/149338/Unit-Testing-Groovy-AST-Transformations</wp:comment_author_url>
		<wp:comment_author_IP>67.231.245.122</wp:comment_author_IP>
		<wp:comment_date>2010-12-11 07:58:43</wp:comment_date>
		<wp:comment_date_gmt>2010-12-11 06:58:43</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] can get tricky. This article introduces AST transformation testing concepts currently used by...  [full post]    andresteingress     Grails Inside   ast transformationsgroovy            0        0        0     [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>Grails - The Search is Over (EJUG Talk)</title>
		<link>http://andresteingress.wordpress.com/2010/06/30/ejug-austria-grails-talk/grails_intro_ejug/</link>
		<pubDate>Wed, 30 Jun 2010 06:47:48 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<guid isPermaLink="false">http://andresteingress.files.wordpress.com/2010/06/grails_intro_ejug.pdf</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>628</wp:post_id>
		<wp:post_date>2010-06-30 07:47:48</wp:post_date>
		<wp:post_date_gmt>2010-06-30 06:47:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>grails_intro_ejug</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>627</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://andresteingress.files.wordpress.com/2010/06/grails_intro_ejug.pdf</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/06/grails_intro_ejug.pdf]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>EJUG Austria Logo</title>
		<link>http://andresteingress.wordpress.com/2010/06/30/ejug-austria-grails-talk/acquia_marina_logo/</link>
		<pubDate>Wed, 30 Jun 2010 08:29:44 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<guid isPermaLink="false">http://andresteingress.files.wordpress.com/2010/06/acquia_marina_logo.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>629</wp:post_id>
		<wp:post_date>2010-06-30 09:29:44</wp:post_date>
		<wp:post_date_gmt>2010-06-30 08:29:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>acquia_marina_logo</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>627</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://andresteingress.files.wordpress.com/2010/06/acquia_marina_logo.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/06/acquia_marina_logo.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"152";s:6:"height";s:2:"69";s:14:"hwstring_small";s:23:"height='58' width='128'";s:4:"file";s:94:"/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/06/acquia_marina_logo.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>EJUG Austria: Grails Talk</title>
		<link>http://andresteingress.wordpress.com/2010/06/30/ejug-austria-grails-talk/</link>
		<pubDate>Wed, 30 Jun 2010 08:32:01 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[grails]]></category>

		<category domain="category" nicename="grails"><![CDATA[grails]]></category>

		<category><![CDATA[Intro]]></category>

		<category domain="category" nicename="intro"><![CDATA[Intro]]></category>

		<guid isPermaLink="false">http://andresteingress.wordpress.com/?p=627</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://andresteingress.files.wordpress.com/2010/06/acquia_marina_logo.png" alt="" title="EJUG Austria Logo" width="152" height="69" class="alignleft size-full wp-image-629" />
<div></div>
I talked about Grails at the Austrian EJUG meeting. Feel free to download the slides via PDF or watch the presentation on YouTube.

<a href="http://andresteingress.files.wordpress.com/2010/06/grails_intro_ejug.pdf">PDF (6,5 MB): Grails - The Search is Over.</a>
<a href="http://www.youtube.com/watch?v=mEvzECfCbjk">YouTube: Grails - The Search is Over.</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>627</wp:post_id>
		<wp:post_date>2010-06-30 09:32:01</wp:post_date>
		<wp:post_date_gmt>2010-06-30 08:32:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ejug-austria-grails-talk</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1277886726]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[13220543]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>jabber_published</wp:meta_key>
		<wp:meta_value><![CDATA[1277886722]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>reddit</wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"count";s:1:"0";s:4:"time";s:10:"1293719842";}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>84</wp:comment_id>
		<wp:comment_author><![CDATA[Data Binding and One-To-Many Associations &laquo; Grails Inside]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://andresteingress.wordpress.com/2010/07/02/data-binding-and-one-to-many-associations/</wp:comment_author_url>
		<wp:comment_author_IP>72.233.127.216</wp:comment_author_IP>
		<wp:comment_date>2010-07-02 05:57:46</wp:comment_date>
		<wp:comment_date_gmt>2010-07-02 04:57:46</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] Let&#8217;s take a look at the BlogController&#8217;s save closure out of an example project I&#8217;ve been showing at the last Austrian EJUG meeting [0]: [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>Blog Domain Model</title>
		<link>http://andresteingress.wordpress.com/2010/07/02/data-binding-and-one-to-many-associations/blog-post-domain-model/</link>
		<pubDate>Thu, 01 Jul 2010 20:34:37 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<guid isPermaLink="false">http://andresteingress.files.wordpress.com/2010/07/blog-post-domain-model.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>639</wp:post_id>
		<wp:post_date>2010-07-01 21:34:37</wp:post_date>
		<wp:post_date_gmt>2010-07-01 20:34:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>blog-post-domain-model</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>633</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://andresteingress.files.wordpress.com/2010/07/blog-post-domain-model.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/07/blog-post-domain-model.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"320";s:6:"height";s:3:"260";s:14:"hwstring_small";s:23:"height='96' width='118'";s:4:"file";s:98:"/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/07/blog-post-domain-model.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Data Binding and One-To-Many Associations</title>
		<link>http://andresteingress.wordpress.com/2010/07/02/data-binding-and-one-to-many-associations/</link>
		<pubDate>Fri, 02 Jul 2010 04:57:42 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[grails]]></category>

		<category domain="category" nicename="grails"><![CDATA[grails]]></category>

		<guid isPermaLink="false">http://andresteingress.wordpress.com/?p=633</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://flattr.com/thing/30318/Grails-Data-Binding-and-One-To-Many-Associations" target="_blank">
<img src="http://api.flattr.com/button/button-static-50x60.png" alt="Flattr this" title="Flattr this" border="0" align="right" vspace="5" hspace="5" /></a> Data Binding in Grails is referred to as the process of binding incoming request data, typically only available as key/value string pairs, to some domain object.

Let's take a look at the BlogController's save closure out of an example project I've been showing at the last Austrian EJUG meeting [<a href="http://andresteingress.wordpress.com/2010/06/30/ejug-austria-grails-talk/">0</a>]:

[sourcecode language="groovy"]
    def save = {
        def blogInstance = new Blog(params)
        if (blogInstance.save(flush: true)) {
            flash.message = &quot;${message(code: 'default.created.message', args: [message(code: 'blog.label', default: 'Blog'), blogInstance.id])}&quot;
            redirect(action: &quot;show&quot;, id: blogInstance.id)
        }
        else {
            render(view: &quot;create&quot;, model: [blogInstance: blogInstance])
        }
    }
[/sourcecode]

The second line in the <code>save</code> closure creates an instance of the <code>Blog</code> class. As you might already know, creating objects can be done in multiple ways when working with Groovy. In this case, we use Groovy's feature to invoke the "default constructor" and bind the given map containing property values immediately to the fresh instance.

[sourcecode language="groovy"]
def blogInstance = new Blog(params)
[/sourcecode]

However, when updating an already persisted <code>blog</code> instance we need to use a mechanism provided by Grails: the <code>properties</code> property.

You can use the <code>properties</code> property to assign a map of key/value pairs to a domain class instance, thus updating the object. By the way: Grails uses Spring's data binding capabilities to perform data binding [<a href="http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/validation.html">1</a>]. This means that you can use all the possibilities provided by Spring, e.g. defining custom <code>PropertyEditor</code> classes.

So far so good. But what happens when it comes to binding many-to-one or one-to-one associations? The answer is pretty simple: it just works [<a href="http://grails.org/doc/latest/guide/6.%20The%20Web%20Layer.html#6.1.6%20Data%20Binding">2</a>]. <code>GrailsDataBinder</code> even supports lazy object instantiation of domain classes. Whenever the other side of the association does not exist, it is created by Grails and populated with the given request parameter values:

[sourcecode language="groovy"]
/blog/save?title=Bla&amp;author.name=John%20Doe
[/sourcecode]

But what happens when working with unidirectional one-to-many associations? 

<img src="http://andresteingress.files.wordpress.com/2010/07/blog-post-domain-model.png" alt="" title="Blog Domain Model" width="320" height="260" class="aligncenter size-full wp-image-639" />

In my EJUG example we had such a one-to-many association between a <code>Blog</code> and multiple <code>BlogPost</code> instances. The design decision was to keep all domain class relationships as lean as possible, therefore we decided that a relationship between a blog post and its blog is not necessary, as the <code>Blog</code> is a <i>domain aggregate</i> [<a href="http://domaindrivendesign.org/node/88">3</a>].

A bit of digging into Grails' <code>GrailsDataBinder</code> revealed method <code>bindCollectionAssociation</code>:

[sourcecode language="groovy"]
private void bindCollectionAssociation(MutablePropertyValues mpvs, PropertyValue pv) {
  Object v = pv.getValue();

  Collection collection = (Collection) bean.getPropertyValue(pv.getName());
  collection.clear();
  final Class associatedType = getReferencedTypeForCollection(pv.getName(), getTarget());
  final boolean isArray = v != null &amp;&amp; v.getClass().isArray();
  final PropertyEditor propertyEditor = findCustomEditor(collection.getClass(), pv.getName());

  // ...
  if(isArray) {

    Object[] identifiers = (Object[])v;
    for (Object id : identifiers) {
      if (id != null) {
        associateObjectForId(pv, id,associatedType);
      }
    }

    mpvs.removePropertyValue(pv);
  }
// ...
[/sourcecode]

As you can see in the code snippet above, whenever the given property value <code>v</code> is an array, it assumes that it is an array of identifiers. Than it iterates over the identifiers and tries to associate an object for the current identifier with the associated type retrieved via <code>getReferencedTypeForCollection</code>. 

In <code>associateObjectForId</code> it uses MOP programming to invoke the associations <code>addTo*</code> method:

[sourcecode language="groovy"]
// ...
MetaClassRegistry reg = GroovySystem.getMetaClassRegistry();
MetaClass mc = reg.getMetaClass(target.getClass());
final String addMethodName = &quot;addTo&quot; + GrailsNameUtils.getClassNameRepresentation(name);
mc.invokeMethod(target, addMethodName,obj);
// ...
[/sourcecode]

Given a one-to-many association this means that we can simply use Grails default data binding functionality to bind this type of associations. In the view we could use a multi select box to map all selected blog post identifiers to a single request parameter:

[sourcecode language="groovy"]
&lt;g:select name=&quot;blogPosts&quot; from=&quot;${org.ast.domain.BlogPost.list()}&quot; multiple=&quot;yes&quot; optionKey=&quot;id&quot; size=&quot;5&quot; value=&quot;${blogInstance?.blogPosts}&quot; /&gt;
[/sourcecode] 

As a result, the <code>properties</code> property can be used to automatically bind one-to-many associations. 

[sourcecode language="groovy"]
blog.properties = params
[/sourcecode]

The only requirement is the array type which is important to notice when constructing the identifiers list manually:

[sourcecode language="groovy"]
params['blogPosts'] = someList as String[]
blog.properties = params
[/sourcecode]

<h4>Conclusion</h4>

Data Binding in Grails is based on Spring's validation and data binding mechanisms. When binding unidirectional one-to-many associations the <code>GrailsDataBinder</code> automatically associates objects due to the given identifiers.

[0] <a href="http://andresteingress.wordpress.com/2010/06/30/ejug-austria-grails-talk/">Grails Talk at the Austrian EJUG meeting in June '10</a>
[1] <a href="http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/validation.html">Spring Data Binding and Validation Documentation</a>
[2] <a href="http://grails.org/doc/latest/guide/6.%20The%20Web%20Layer.html#6.1.6%20Data%20Binding">Data Binding - Grails Documentation</a>
[3] <a href="http://domaindrivendesign.org/node/88">Domain Driven Design Patterns: The Aggregate</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>633</wp:post_id>
		<wp:post_date>2010-07-02 05:57:42</wp:post_date>
		<wp:post_date_gmt>2010-07-02 04:57:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>data-binding-and-one-to-many-associations</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[13220543]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1287737843]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>jabber_published</wp:meta_key>
		<wp:meta_value><![CDATA[1278046662]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>reddit</wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"count";s:1:"0";s:4:"time";s:10:"1293719984";}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>87</wp:comment_id>
		<wp:comment_author><![CDATA[Marc Palmer]]></wp:comment_author>
		<wp:comment_author_email>wangjammer5@me.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.anyware.co.uk</wp:comment_author_url>
		<wp:comment_author_IP>89.145.198.122</wp:comment_author_IP>
		<wp:comment_date>2010-07-02 12:32:12</wp:comment_date>
		<wp:comment_date_gmt>2010-07-02 11:32:12</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[You need to watch out for some gotchas. Behaviour when binding Sets vs Lists varies depending on Grails versions. Sets in 1.3.1 do not bind with array subscript notation - but are documented as meant to be.

Also careful when binding to a collection where the members are cascade orphan - they may be deleted when the collection is cleared and re-assigned. Also if they nave non-nullable backrefs to the owner you may experience pain.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>89</wp:comment_id>
		<wp:comment_author><![CDATA[andresteingress]]></wp:comment_author>
		<wp:comment_author_email>grails.inside@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://andresteingress.wordpress.com</wp:comment_author_url>
		<wp:comment_author_IP>81.189.23.133</wp:comment_author_IP>
		<wp:comment_date>2010-07-02 12:57:04</wp:comment_date>
		<wp:comment_date_gmt>2010-07-02 11:57:04</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[marc, thanks for mentioning these gotchas!

<code>GrailsDataBinder</code> clears the collection as one of the very first actions (as shown in the code sample), programmers using association data binding need to be aware of that fact.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>87</wp:comment_parent>
		<wp:comment_user_id>13220543</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>146</wp:comment_id>
		<wp:comment_author><![CDATA[Sub]]></wp:comment_author>
		<wp:comment_author_email>sub.contact@gmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>60.240.93.53</wp:comment_author_IP>
		<wp:comment_date>2010-08-02 00:24:55</wp:comment_date>
		<wp:comment_date_gmt>2010-08-01 23:24:55</wp:comment_date_gmt>
		<wp:comment_content><![CDATA["Sets in 1.3.1 do not bind with array subscript notation – but are documented as meant to be."

Hi Marc, would you elaborate? If Set's don't make use of array subscript notation for binding - how does it work?]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>87</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>Groovy for Domain-Specific Languages</title>
		<link>http://andresteingress.wordpress.com/2010/07/07/upcoming-book-review-groovy-for-domain-specific-languages/cover/</link>
		<pubDate>Wed, 07 Jul 2010 05:46:20 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<guid isPermaLink="false">http://andresteingress.files.wordpress.com/2010/07/cover.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>656</wp:post_id>
		<wp:post_date>2010-07-07 06:46:20</wp:post_date>
		<wp:post_date_gmt>2010-07-07 05:46:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cover</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>652</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://andresteingress.files.wordpress.com/2010/07/cover.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/07/cover.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"500";s:6:"height";s:3:"650";s:14:"hwstring_small";s:22:"height='96' width='73'";s:4:"file";s:81:"/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/07/cover.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
		<wp:meta_value><![CDATA[Groovy for Domain-Specific Languages]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Upcoming Book Review: Groovy for Domain-Specific Languages</title>
		<link>http://andresteingress.wordpress.com/2010/07/07/upcoming-book-review-groovy-for-domain-specific-languages/</link>
		<pubDate>Wed, 07 Jul 2010 06:02:30 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[books]]></category>

		<category domain="category" nicename="books"><![CDATA[books]]></category>

		<guid isPermaLink="false">http://andresteingress.wordpress.com/?p=652</guid>
		<description></description>
		<content:encoded><![CDATA[This blog post is rather new concerning its type of content: book reviews. I decided to extend the scope of this blog by writing book reviews of Groovy/Grails literature. If you are an author and you are interested feel free to <a href="http://andresteingress.wordpress.com/contact/">contact me</a>.

The book review series will start with a book released by Packt Publishing this summer: <em>Groovy for Domain-Specific Languages</em>  [<a href="https://www.packtpub.com/groovy-for-domain-specific-languages-dsl/book?tag=vf/dslgroovy-abr1/0510&amp;utm_source=vf_dslgroovy_abr1_0510&amp;utm_medium=content&amp;utm_campaign=veronica">0</a>].

<a href="http://andresteingress.files.wordpress.com/2010/07/cover.png"><img src="http://andresteingress.files.wordpress.com/2010/07/cover.png?w=230" alt="Groovy for Domain-Specific Languages" title="Groovy for Domain-Specific Languages" width="230" height="300" class="aligncenter size-medium wp-image-656" /></a>

The book provides tutorials for Groovy meta-programming features and how those can be utilized to construct domain-specifc languages. If you want to take a sneak peak at one of the chapters, you might have a look at the sample chapter: <a href="https://www.packtpub.com/sites/default/files/6903-chapter-7-building-a-builder.pdf">Building a Builder</a> [<a href="https://www.packtpub.com/sites/default/files/6903-chapter-7-building-a-builder.pdf">1</a>].

I am currently into reviewing the book, so expect an extensive review here at <strong>Grails Inside</strong> soon.

[0] <a href="https://www.packtpub.com/groovy-for-domain-specific-languages-dsl/book?tag=vf/dslgroovy-abr1/0510&amp;utm_source=vf_dslgroovy_abr1_0510&amp;utm_medium=content&amp;utm_campaign=veronica">Packt Publishing: Groovy for Domain-Specific Languages</a> 
[1] <a href="https://www.packtpub.com/sites/default/files/6903-chapter-7-building-a-builder.pdf">Sample Chapter: Building a Builder</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>652</wp:post_id>
		<wp:post_date>2010-07-07 07:02:30</wp:post_date>
		<wp:post_date_gmt>2010-07-07 06:02:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>upcoming-book-review-groovy-for-domain-specific-languages</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[13220543]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1278482928]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>jabber_published</wp:meta_key>
		<wp:meta_value><![CDATA[1278482553]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>reddit</wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"count";s:1:"0";s:4:"time";s:10:"1293719735";}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>tagazine-media</wp:meta_key>
		<wp:meta_value><![CDATA[a:7:{s:7:"primary";s:60:"http://andresteingress.files.wordpress.com/2010/07/cover.png";s:6:"images";a:1:{s:60:"http://andresteingress.files.wordpress.com/2010/07/cover.png";a:6:{s:8:"file_url";s:60:"http://andresteingress.files.wordpress.com/2010/07/cover.png";s:5:"width";s:3:"500";s:6:"height";s:3:"650";s:4:"type";s:5:"image";s:4:"area";s:6:"325000";s:9:"file_path";s:0:"";}}s:6:"videos";a:0:{}s:11:"image_count";s:1:"1";s:6:"author";s:8:"13220543";s:7:"blog_id";s:8:"12837921";s:9:"mod_stamp";s:19:"2010-07-07 06:02:30";}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>GContracts 1.1.2 Released!</title>
		<link>http://andresteingress.wordpress.com/2010/07/12/gcontracts-1-1-2-released/</link>
		<pubDate>Mon, 12 Jul 2010 18:50:57 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[gcontracts]]></category>

		<category domain="category" nicename="gcontracts"><![CDATA[gcontracts]]></category>

		<category><![CDATA[releases]]></category>

		<category domain="category" nicename="releases"><![CDATA[releases]]></category>

		<guid isPermaLink="false">http://andresteingress.wordpress.com/?p=672</guid>
		<description></description>
		<content:encoded><![CDATA[I am proud to announce that GContracts 1.1.2 has just been released and is available now in the Central Maven repository [<a href="http://repo1.maven.org/maven2/org/gcontracts/gcontracts/1.1.2/">0</a>] and at Github [<a href="http://github.com/andresteingress/gcontracts/downloads">1</a>].

The release mainly includes internal refactorings, bug fixes and support for Groovy's power assertions [<a href="http://groovy.codehaus.org/gapi/org/codehaus/groovy/transform/powerassert/package-summary.html">2</a>]. 

<strong>Therefore, 1.1.2 upwards depends on Groovy 1.7.</strong> If there is the demand to maintain a separate Groovy 1.6 branch, I will certainly do that - just let me know.

<h4>Groovy Power Assertions &amp; GContracts</h4>

Before 1.1.2, GContracts custom handling of assertion messages prevented triggering of Groovy's power assertion rewriting transformation. Certain parts of GContracts have been rewritten to support power assertions know. The greatest advantage of power assertions are certainly there expressiveness:

[sourcecode language="groovy"]
import org.gcontracts.annotations.*

@Invariant({ speed &gt;= 0 &amp;&amp; speed &lt;= 100 })
class Rocket  {
    int speed
    boolean started

    @Requires({ !started })
    def start() { started = true }

    @Requires({ started })
    @Ensures({ old -&gt; (speed - old.speed) &gt; 0 })
    def accelerate()  { speed += 10 }
}

class BetterRocket extends Rocket {
    @Override
    def accelerate() {
      speed += 20
    }
}

def betterRocket = new BetterRocket()
betterRocket.accelerate()
[/sourcecode]

Output:

[sourcecode language="groovy"]
Assertion failed: 

&lt;inherited precondition&gt; Rocket.accelerate()

{ started }
  |
  false

	at Rocket.precondition_java_lang_Object_accelerate(ConsoleScript0:11)
	at BetterRocket.super$2$precondition_java_lang_Object_accelerate(ConsoleScript0)
[/sourcecode]

Let's say we would introduce a bug in <code>BetterRocket</code>'s implementation that will violate the parent's postcondition:

[sourcecode language="groovy"]
class BetterRocket extends Rocket {
    @Override
    def accelerate() {
      speed = 20
    }
}

def betterRocket = new BetterRocket()
betterRocket.start()
betterRocket.accelerate()
// ...
betterRocket.accelerate()
[/sourcecode]

Output:

[sourcecode language="groovy"]
Assertion failed: 

&lt;inherited postcondition&gt; Rocket.accelerate()

{ old -&gt; (speed - old.speed) &gt; 0 }
          |     | |   |      |
          20    0 |   20     false
                  {speed=20}

	at Rocket.postcondition_java_lang_Object_accelerate(ConsoleScript3:12)
	at BetterRocket.super$2$postcondition_java_lang_Object_accelerate(ConsoleScript3)
[/sourcecode]

The assertion message shows what assertion got violated and has visual pointers to the computed expression values - assertion messages can't be more readable than that.

<h4>Changes</h4>

ISSUE-7: use Groovy power asserts as an alternative to AssertionStatement
ISSUE-16: old variables gets cleared on inherited postcondition

[0] <a href="http://repo1.maven.org/maven2/org/gcontracts/gcontracts/1.1.2/">GContracts 1.1.2 in Central Maven Repository</a>
[1] <a href="http://github.com/andresteingress/gcontracts/downloads">GContracts at Github</a>
[2] <a href="http://groovy.codehaus.org/gapi/org/codehaus/groovy/transform/powerassert/package-summary.html">Groovy Power Assertions</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>672</wp:post_id>
		<wp:post_date>2010-07-12 19:50:57</wp:post_date>
		<wp:post_date_gmt>2010-07-12 18:50:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gcontracts-1-1-2-released</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1289936329]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[13220543]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>jabber_published</wp:meta_key>
		<wp:meta_value><![CDATA[1278960657]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>reddit</wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"count";s:1:"0";s:4:"time";s:10:"1293719777";}]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>314</wp:comment_id>
		<wp:comment_author><![CDATA[andresteingress]]></wp:comment_author>
		<wp:comment_author_email>grails.inside@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://andresteingress.wordpress.com</wp:comment_author_url>
		<wp:comment_author_IP>62.218.68.191</wp:comment_author_IP>
		<wp:comment_date>2010-11-04 16:41:25</wp:comment_date>
		<wp:comment_date_gmt>2010-11-04 15:41:25</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[I created a Github issue for your concern:

<a href="https://github.com/andresteingress/gcontracts/issues/issue/22" rel="nofollow">https://github.com/andresteingress/gcontracts/issues/issue/22</a>]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>311</wp:comment_parent>
		<wp:comment_user_id>13220543</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>311</wp:comment_id>
		<wp:comment_author><![CDATA[Andrej]]></wp:comment_author>
		<wp:comment_author_email>javix@gmx.de</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>88.79.253.5</wp:comment_author_IP>
		<wp:comment_date>2010-11-03 10:08:30</wp:comment_date>
		<wp:comment_date_gmt>2010-11-03 09:08:30</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Hallo,
it is possible to make GContracts configurable?

I need to throw and catch a exception instead of throw a assertion error.

For example RequiresException, EnsureException and InvariantException.

I need to generate pretty error messages for my users if some object don't exists in the db.

With your currently implementation I can only catch the org.codehaus.groovy.transform.powerassert.PowerAssertionError

Thanks for your advice]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>Overall Architecture</title>
		<link>http://andresteingress.wordpress.com/?attachment_id=718</link>
		<pubDate>Fri, 23 Jul 2010 05:32:27 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<guid isPermaLink="false">http://andresteingress.files.wordpress.com/2010/07/jmx-activemq.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>718</wp:post_id>
		<wp:post_date>2010-07-23 06:32:27</wp:post_date>
		<wp:post_date_gmt>2010-07-23 05:32:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jmx-activemq</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://andresteingress.files.wordpress.com/2010/07/jmx-activemq.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/07/jmx-activemq.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"551";s:6:"height";s:3:"565";s:14:"hwstring_small";s:22:"height='96' width='93'";s:4:"file";s:88:"/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/07/jmx-activemq.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Overall Architecture Simple</title>
		<link>http://andresteingress.wordpress.com/?attachment_id=724</link>
		<pubDate>Fri, 23 Jul 2010 05:35:32 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<guid isPermaLink="false">http://andresteingress.files.wordpress.com/2010/07/jmx-activemq-simple.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>724</wp:post_id>
		<wp:post_date>2010-07-23 06:35:32</wp:post_date>
		<wp:post_date_gmt>2010-07-23 05:35:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jmx-activemq-simple</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://andresteingress.files.wordpress.com/2010/07/jmx-activemq-simple.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/07/jmx-activemq-simple.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"551";s:6:"height";s:3:"261";s:14:"hwstring_small";s:23:"height='60' width='128'";s:4:"file";s:95:"/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/07/jmx-activemq-simple.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Overall Architecture Simplified</title>
		<link>http://andresteingress.wordpress.com/?attachment_id=727</link>
		<pubDate>Fri, 23 Jul 2010 05:36:38 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<guid isPermaLink="false">http://andresteingress.files.wordpress.com/2010/07/jmx-activemq-simple1.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>727</wp:post_id>
		<wp:post_date>2010-07-23 06:36:38</wp:post_date>
		<wp:post_date_gmt>2010-07-23 05:36:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jmx-activemq-simple-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://andresteingress.files.wordpress.com/2010/07/jmx-activemq-simple1.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/07/jmx-activemq-simple1.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"551";s:6:"height";s:3:"206";s:14:"hwstring_small";s:23:"height='47' width='128'";s:4:"file";s:96:"/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/07/jmx-activemq-simple1.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Groovy for Domain-Specific Languages</title>
		<link>http://andresteingress.wordpress.com/2010/07/25/groovy-for-domain-specific-languages/</link>
		<pubDate>Sun, 25 Jul 2010 11:00:53 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[books]]></category>

		<category domain="category" nicename="books"><![CDATA[books]]></category>

		<category domain="tag"><![CDATA[books]]></category>

		<category domain="tag" nicename="books"><![CDATA[books]]></category>

		<category><![CDATA[groovy]]></category>

		<category domain="category" nicename="groovy"><![CDATA[groovy]]></category>

		<category domain="tag"><![CDATA[groovy]]></category>

		<category domain="tag" nicename="groovy"><![CDATA[groovy]]></category>

		<guid isPermaLink="false">https://andresteingress.wordpress.com/?p=741</guid>
		<description></description>
		<content:encoded><![CDATA[<h4>Preface</h4>

The book <strong>Groovy for Domain-Specific Languages</strong> [Packt Publishing: <a href="https://www.packtpub.com/groovy-for-domain-specific-languages-dsl/book?utm_source=andresteingress.wordpress.com&amp;utm_medium=bookrev&amp;utm_content=blog&amp;utm_campaign=mdb_004098">3</a>, Amazon.com: <a href="http://www.amazon.com/Groovy-Domain-Specific-Languages-Fergal-Dearle/dp/184719690X/ref=sr_1_1?ie=UTF8&amp;s=books&amp;qid=1280521406&amp;sr=8-1">5</a>] written by Fergal Dearle [<a href="http://www.dearle.com/home/">4</a>] has been published by Packt Publishing in May 2010. As the title mentions it is all about how to implement domain-specific languages aka DSLs based on the Groovy programming language. 

With this book the author explicitly targets Java programmers. As can be seen in the separate chapter descriptions below, the book covers Groovy basics, advanced DSL-related language features and script integration issues.

Although not explicitly mentioned, this book covers Groovy up to version 1.6, as this can be deducted from some code samples and screenshots.

<h4>Cover</h4>

<img src="http://andresteingress.files.wordpress.com/2010/07/cover.png" alt="Groovy for Domain-Specific Languages" title="Groovy for Domain-Specific Languages" width="500" height="650" class="aligncenter size-full wp-image-656" />


<h4>Chapter Summary</h4>

Chapter 1 - Introduction to DSL and Groovy

The first chapter starts with a general introduction to general purpose programming languages which leads to a brief introduction to specific languages also known as domain-specific languages (DSLs). In addition, the author gives a brief introduction into Groovy and how it relates to the Java platform. A first example of Groovy's XML markup builder gives a practical example on how certain dynamic programming features support building custom DSLs.

Chapter 2 -  Groovy Quick Start

The second chapter covers Groovy from ground up split into two main parts: the first part is the administrative one - it explains where to get Groovy and how to install it on various operating systems and gives an overview about basic commands found in Groovy's binary directory: <code>groovy</code>, <code>groovysh</code>, <code>groovyConsole</code> and <code>groovyc</code>. The second part of this chapter introduces Groovy in about 23 pages and clearly targets programmers with a Java background, not supposed to be an introduction for Groovy newbies without a Java background.

Chapter 3 - Groovy Closures

The third chapter handles Groovy closures in en detail. It starts with code examples of simple closures, explains closure parameters and how separate methods in Groovy's Closure class relate to them and goes over to currying. At the end of this chapter it introduces <code>this</code>, <code>delegate</code> and <code>owner</code> as being important implicit variables in the context of Groovy closures.

Chapter 4 - Example DSL: GeeTwitter

The fourth chapter introduces a custom DSL around Twitter4J [<a href="http://twitter4j.org/en/index.jsp">1</a>] - a library containing Java classes for accessing Twitter's REST API [<a href="http://apiwiki.twitter.com/REST+API+Documentation">0</a>]. The first version of GeeTwitter introduces Groovy's optional parenthesis on method calls and shows possible approaches for using that DSL in Groovy scripts:

[sourcecode language="Groovy"]
//...

static void eachFollower(Closure c)  {
...   
}

// usage:

eachFriend {
  println it
}
[/sourcecode]

At the end of this chapter, the reader has built a source-complete abstract base class for creating GeeTwitter DSL scripts.

Chapter 5 - Power Groovy DSL Features

Now it really comes down to the crunch. This chapter can be seen as most important chapter, as it covers a lot of ground about Groovy language features used in real-world frameworks like Grails: Groovy's meta object protocol and meta-programming, the <code>ExpandoMetaClass</code>, the Builder pattern and Groovy's base builder classes. The chapter gives a good appreciation of what can be achieved by using these powerful features and gives a greater understanding how to use fully-functioning custom DSLs.

Chapter 6 - Existing Groovy DSLs

This chapter mainly handles Grails-specific DSLs and how they are implemented in the light of using Groovy's power DSL features. In addition, the author  gives an overview of some selected TDD frameworks out of Groovy space: GSpec, EasyB and Spock. The overview concentrates on what can be done with these frameworks and not so much of how this is done by the frameworks.

Chapter 7 - Building a Builder

<em>Hint: This chapter is available as sample chapter [<a href="https://www.packtpub.com/sites/default/files/6903-chapter-7-building-a-builder.pdf">2</a>].</em>

The chapters starts with a detailed discussion of variable resolving strategies in the context of Groovy closures and summarizes the most import meta-programming features for Groovy DSL development. Afterwards, it introduces Groovy's <code>BuilderSupport</code> and <code>FactoryBuilderSupport</code>.

Chapter 8 - Implementing a Rules DSL

The eight chapter shows how to implement a business rules DSL based on the concept of Groovy scripts and bindings. The given example is about an imaginary broadband service provider program that needs business rules for rewarding customer accounts with a scoring system, leading to the Reward DSL. The chapter closes with a paragraph on testing DSLs with Groovy's <code>GroovyTestCase</code>.

Chapter 9 - Integrating It All

This chapter handles typical integration issues: using Java classes from Groovy code and vice-vera, how to use Groovy classes within the Spring framework via dependency injection and how to integrate scripts in existing Java applications.

<h4>Summary</h4>

The book is mainly for Java programmers or Groovy newbies with a Java background that want to integrate a custom Groovy DSL into an existing application. It starts with a brief introduction to Groovy and DSLs in general, takes a closer look at Groovy closures and moves on to practical examples on how to apply various features of the Groovy programming language to design custom domain-specific languages. The reader should get a fundamental understanding on how to built and integrate custom DSLs and how this was done by frameworks like Grails.

<h4>Personal Opinion</h4>

Groovy is a great language for designing domain-specific languages. Although it is easy once you are familiar with the most important concepts, messing with a Groovy DSL is like 'just get it working somehow' for Groovy or Grails beginners. This book equips its readers with a basic understanding about Groovy programming language features that can be used to create custom DSLs. This leads to a better understanding about how those concepts are used in Grails and other frameworks and surely raises the knowledge on Groovy programming features. 

[3] <a href="https://www.packtpub.com/groovy-for-domain-specific-languages-dsl/book?utm_source=andresteingress.wordpress.com&amp;utm_medium=bookrev&amp;utm_content=blog&amp;utm_campaign=mdb_004098">Packt Publishing: Groovy for Domain-Specific Languages</a>
[5] <a href="http://www.amazon.com/Groovy-Domain-Specific-Languages-Fergal-Dearle/dp/184719690X/ref=sr_1_1?ie=UTF8&amp;s=books&amp;qid=1280521406&amp;sr=8-1">Amazon: Groovy for Domain-Specific Languages</a>
[4] <a href="http://www.dearle.com/home/">Fergan Dearle - Homepage</a>
[1] <a href="http://twitter4j.org/en/index.jsp">Twitter4J - a Java Library for the Twitter API</a>
[0] <a href="http://apiwiki.twitter.com/REST+API+Documentation">Twitter REST API Documentation</a>
[2] <a href="https://www.packtpub.com/sites/default/files/6903-chapter-7-building-a-builder.pdf">Building a Builder - Sample Chapter</a>

<a href="http://flattr.com/thing/42400/Book-Review-Groovy-for-Domain-Specific-Languages" target="_blank">
<img src="http://api.flattr.com/button/button-static-50x60.png" alt="Flattr this" title="Flattr this" border="0" /></a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>741</wp:post_id>
		<wp:post_date>2010-07-25 12:00:53</wp:post_date>
		<wp:post_date_gmt>2010-07-25 11:00:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>groovy-for-domain-specific-languages</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1280829128]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[13220543]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>jabber_published</wp:meta_key>
		<wp:meta_value><![CDATA[1280521703]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>reddit</wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"count";s:1:"0";s:4:"time";s:10:"1293719824";}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>client_supplier_relationship</title>
		<link>http://andresteingress.wordpress.com/2010/07/25/groovy-for-domain-specific-languages/client_supplier_relationship/</link>
		<pubDate>Mon, 02 Aug 2010 20:22:39 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<guid isPermaLink="false">http://andresteingress.files.wordpress.com/2010/07/client_supplier_relationship.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>763</wp:post_id>
		<wp:post_date>2010-08-02 21:22:39</wp:post_date>
		<wp:post_date_gmt>2010-08-02 20:22:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>client_supplier_relationship</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>741</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://andresteingress.files.wordpress.com/2010/07/client_supplier_relationship.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/07/client_supplier_relationship.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"347";s:6:"height";s:3:"250";s:14:"hwstring_small";s:23:"height='92' width='128'";s:4:"file";s:104:"/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/07/client_supplier_relationship.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Github: An Introduction to Programming by Contract</title>
		<link>http://andresteingress.wordpress.com/2010/08/02/github-an-introduction-to-programming-by-contract/</link>
		<pubDate>Mon, 02 Aug 2010 21:02:55 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[gcontracts]]></category>

		<category domain="category" nicename="gcontracts"><![CDATA[gcontracts]]></category>

		<category><![CDATA[Intro]]></category>

		<category domain="category" nicename="intro"><![CDATA[Intro]]></category>

		<guid isPermaLink="false">http://andresteingress.wordpress.com/?p=764</guid>
		<description></description>
		<content:encoded><![CDATA[I just added a new page to GContracts wiki on Github: <a href="http://wiki.github.com/andresteingress/gcontracts/an-introduction-to-programming-by-contract">An Introduction to Programming by Contract</a>

Feel free to contribute or leave me any comments here!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>764</wp:post_id>
		<wp:post_date>2010-08-02 22:02:55</wp:post_date>
		<wp:post_date_gmt>2010-08-02 21:02:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>github-an-introduction-to-programming-by-contract</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[13220543]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1280782982]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>jabber_published</wp:meta_key>
		<wp:meta_value><![CDATA[1280782978]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>reddit</wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"count";s:1:"0";s:4:"time";s:10:"1293719878";}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Cover</title>
		<link>http://andresteingress.wordpress.com/2010/08/05/gcontracts-in-javamagazin-9-2010-german/o4c57c3a635d4d/</link>
		<pubDate>Thu, 05 Aug 2010 08:06:32 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<guid isPermaLink="false">http://andresteingress.files.wordpress.com/2010/08/o4c57c3a635d4d.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>770</wp:post_id>
		<wp:post_date>2010-08-05 09:06:32</wp:post_date>
		<wp:post_date_gmt>2010-08-05 08:06:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>o4c57c3a635d4d</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>767</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://andresteingress.files.wordpress.com/2010/08/o4c57c3a635d4d.jpg</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/08/o4c57c3a635d4d.jpg]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"200";s:6:"height";s:3:"285";s:14:"hwstring_small";s:22:"height='96' width='67'";s:4:"file";s:90:"/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/08/o4c57c3a635d4d.jpg";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>GContracts in JavaMagazin 9.2010 (German)</title>
		<link>http://andresteingress.wordpress.com/2010/08/05/gcontracts-in-javamagazin-9-2010-german/</link>
		<pubDate>Thu, 05 Aug 2010 08:15:18 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[gcontracts]]></category>

		<category domain="category" nicename="gcontracts"><![CDATA[gcontracts]]></category>

		<guid isPermaLink="false">http://andresteingress.wordpress.com/?p=767</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://andresteingress.files.wordpress.com/2010/08/o4c57c3a635d4d.jpg" alt="" title="Cover" width="200" height="285" class="alignleft size-full wp-image-770" style="margin-bottom:10px;" />

In der August Ausgabe 9.2010 des JavaMagazins [<a href="http://it-republik.de/jaxenter/java-magazin-ausgaben/Tomcat-7-000409.html">0</a>] findet sich ein ausführlicher Artikel über GContracts [<a href="http://github.com/andresteingress/gcontracts">1</a>] - eine Groovy Erweiterung für Design by Contract(tm).

<strong>Kaufen und glücklich(er) werden!</strong>

<br><br><br>

PS: Wenn du mehr über GContracts und Programming by Contract wissen möchtest, wirf einen Blick auf den Wiki Artikel "An Introduction to Programming by Contract" [<a href="http://wiki.github.com/andresteingress/gcontracts/an-introduction-to-programming-by-contract">2</a>].

[0] <a href="http://it-republik.de/jaxenter/java-magazin-ausgaben/Tomcat-7-000409.html">JavaMagazin - August Ausgabe 2010</a>
[1] <a href="http://github.com/andresteingress/gcontracts">GContracts @ Github</a>
[2] <a href="http://wiki.github.com/andresteingress/gcontracts/an-introduction-to-programming-by-contract">Github Wiki: An Introduction to Programming by Contract</a>

<br>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>767</wp:post_id>
		<wp:post_date>2010-08-05 09:15:18</wp:post_date>
		<wp:post_date_gmt>2010-08-05 08:15:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gcontracts-in-javamagazin-9-2010-german</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1280996127]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[13220543]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>jabber_published</wp:meta_key>
		<wp:meta_value><![CDATA[1280996121]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>reddit</wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"count";s:1:"0";s:4:"time";s:10:"1293719876";}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>152</wp:comment_id>
		<wp:comment_author><![CDATA[Tweets that mention GContracts in JavaMagazin 9.2010 (German) « Grails Inside -- Topsy.com]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://topsy.com/andresteingress.wordpress.com/2010/08/05/gcontracts-in-javamagazin-9-2010-german/?utm_source=pingback&amp;utm_campaign=L2</wp:comment_author_url>
		<wp:comment_author_IP>208.74.66.43</wp:comment_author_IP>
		<wp:comment_date>2010-08-05 09:37:09</wp:comment_date>
		<wp:comment_date_gmt>2010-08-05 08:37:09</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] This post was mentioned on Twitter by Redaktion JAXenter, Redaktion Java Magaz and andre, groovytweets. groovytweets said: RT @sternegross: GContracts featured in @JavaMagazin 9.2010 (german): http://bit.ly/afwTpH #groovy #gcontracts [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>Indy Believes</title>
		<link>http://andresteingress.wordpress.com/2010/08/06/towards-null-safe-groovy/grail-indybelieves/</link>
		<pubDate>Thu, 05 Aug 2010 21:18:39 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<guid isPermaLink="false">http://andresteingress.files.wordpress.com/2010/08/grail-indybelieves.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>803</wp:post_id>
		<wp:post_date>2010-08-05 22:18:39</wp:post_date>
		<wp:post_date_gmt>2010-08-05 21:18:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>grail-indybelieves</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>784</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://andresteingress.files.wordpress.com/2010/08/grail-indybelieves.jpg</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/08/grail-indybelieves.jpg]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"400";s:6:"height";s:3:"290";s:14:"hwstring_small";s:23:"height='92' width='128'";s:4:"file";s:94:"/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/08/grail-indybelieves.jpg";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Towards Null-Safe Groovy</title>
		<link>http://andresteingress.wordpress.com/2010/08/06/towards-null-safe-groovy/</link>
		<pubDate>Fri, 06 Aug 2010 07:57:45 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[groovy]]></category>

		<category domain="category" nicename="groovy"><![CDATA[groovy]]></category>

		<category><![CDATA[patterns]]></category>

		<category domain="category" nicename="patterns"><![CDATA[patterns]]></category>

		<guid isPermaLink="false">http://andresteingress.wordpress.com/?p=784</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://andresteingress.files.wordpress.com/2010/08/grail-indybelieves.jpg" alt="" title="Indy Believes It" width="400" height="290" class="aligncenter size-full wp-image-803" />

Currently I am implementing some experimental features from which some of them hopefully make it into GContracts next major release.

One of the issue I've been playing with is support for null-safe aka void-safe code. The main idea is to let GContracts provide compile-time checks for null-safe code parts. Letting it be 'code parts' only is the first restriction which we will have to introduce. We all know <code>null</code> is evil, <b>but</b>: <em>null is not the new goto</em>.

There are use-cases where assigning <code>null</code> to a variable might still be appropriate. Think of a double-linked list data-structure, where <code>null</code> could be needed to mark the first previous and the last next reference. However, the use of <code>null</code> more often leads to errors whenever a method call is executed on a variable which has been assigned to <code>null</code>.

In order to provide compile-time checking of instance variables, local variables and parameters I added a new annotation to GContracts annotation package: <code>@NullSafe</code>:

[sourcecode language="Java"]
@Retention(RetentionPolicy.SOURCE)
@Target({ElementType.FIELD, ElementType.LOCAL_VARIABLE, ElementType.PARAMETER})
public @interface NullSafe {}
[/sourcecode]

In addition, I added the <code>NullSafeASTTransformation</code> which is supposed to do the compile-time checking stuff. To do that, we need a set of rules which enforce null-safety for variables annotated with <code>@NullSafe</code>:

<h4>Local Variables, Parameters</h4>

Whenever a <b>local variable</b> or a <b>parameter</b> is marked as null-safe, only assignments to 

<ul><li>constants (except <code>null</code>)</li><li>other null-safe variables</ul> 

are allowed. The AST transformation done so far checks for local variables marked with <code>@NullSafe</code> and takes care of valid assignments. Whenever an assignment does not conform to the rules stated above, a compile-time error is thrown. E.g. the following source code snippet fails during compilation:

[sourcecode language="Groovy"]
package tests

import org.gcontracts.annotations.*

class A {

  def some_operation(@NullSafe def param1)  {
     def bla = &quot;test&quot;
     param1 = bla
  }
}

BUG! exception in phase 'semantic analysis' in source unit 'script1281039992077748355994.groovy' param1 must be assigned to NullSafe variables!
	at org.gcontracts.ast.visitor.NullSafeVisitor.visitBinaryExpression(NullSafeVisitor.java:62)
[/sourcecode]

The same applies for local variables:

[sourcecode language="Groovy"]
package tests

import org.gcontracts.annotations.*

class A {
  
  def some_operation()  {
     @NullSafe def bla = &quot;test&quot;
     def otherBla = &quot;test2&quot;

     bla = otherBla
  }
}

package tests

import org.gcontracts.annotations.*

class A {

  def some_operation()  {
     @NullSafe def bla = &quot;test&quot;
     def otherBla = &quot;test2&quot;

     bla = otherBla
  }
}

BUG! exception in phase 'semantic analysis' in source unit 'script12810425282531878012710.groovy' bla must be assigned to NullSafe variables!
	at org.gcontracts.ast.visitor.NullSafeVisitor.visitBinaryExpression(NullSafeVisitor.java:31)
[/sourcecode]

Notice, the last code snippet won't compile according to the rules defined above, as an assignment of a not-null safe variable to a null-safe variable is not valid. If we want to pass compile-time checks, we simply had to annotate <code>otherBla</code> as <code>@NullSafe</code>.

<h4>Instance Variables, Fields</h4>

Instance variables need to be assigned to a non-null value whenever the construction of the according object is finished, thus the object complies to the explicit class invariant. Whenever a method is called an assignment to <code>null</code> would trigger a compile-time failure:

[sourcecode language="Groovy"]
package tests

import org.gcontracts.annotations.*

class A {

  @NullSafe String myProp

  def A()  {
    myProp = &quot;test&quot;
  }

  def some_op() { myProp = null }
}

BUG! exception in phase 'semantic analysis' in source unit 'script12810407257201736681757.groovy' myProp must be assigned to NullSafe variables!
	at org.gcontracts.ast.visitor.NullSafeVisitor.visitBinaryExpression(NullSafeVisitor.java:59)
[/sourcecode]

<h4>Assignments from Non-Void Method Calls</h4>

In fact, this is only half the story. Whenever a variable is assigned to the return value of a method, we have no simple way to check at compile-time whether that method returns <code>null</code>. A possible solution for solving this scenario in terms of keeping code null-safe is to specify variable default values via annotation closures (btw: here starts the part I actually did not implement by now, so don't get confused with the annotation class above):

[sourcecode language="Groovy"]
package tests

import org.gcontracts.annotations.*

class A {

  def some_op() {
      @NullSafe({ &quot;empty&quot; }) def i = &quot;aloha&quot;

      i = some_function()
      // at this point, i will be &quot;empty&quot; not null!
  }

  def some_function() { return null }
}
[/sourcecode]

The default value is assigned only when an assignment to the null-safe variable would result in a <code>null</code> reference. 

Annotation closures would provide great flexibility to define arbitrary complex initialization code:

[sourcecode language="Groovy"]

class Address {
    
    @NullSafe({ new City(name: 'dummy') }) City city
    // ... 
}

[/sourcecode]


An alternative approach would be to annotate methods as <code>@NullSafe</code>, which would avoid calling methods not being marked with <code>@NullSafe</code> in null-safe assignments.

<h4>What's next?</h4>

That's it with my experimental <code>@NullSafe</code> feature. I know that this is a naive first approach, but at least its a starting point and I would really appreciate your feedback on this topic either in this article's comment section or at the Groovy-Dev mailing list [<a href="http://groovy.329449.n5.nabble.com/Towards-Null-Safe-Groovy-tp2266405p2266405.html">1</a>].

It would be very important to know whether this method works or if it is not applicable in real-world projects from your point of view. One issue is, that although GContracts uses AST transformations, it is not an integral part of the programming language, which could result in e.g. meta- or reflection-calls which make null-safe variables null etc. Just imagine Hibernate injecting null values into <code>@NullSave</code> instance variables - levering null-safe variables immediately . In fact, this is the point I am not completely clear about - does it make sense to introduce such a feature at library/AST transformation level?

[0] <a href="http://github.com/andresteingress/gcontracts">GContracts - Project Home Page</a>
[1] <a href="http://groovy.329449.n5.nabble.com/Towards-Null-Safe-Groovy-tp2266405p2266405.html">Groovy-Dev mailing list @ nabble</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>784</wp:post_id>
		<wp:post_date>2010-08-06 08:57:45</wp:post_date>
		<wp:post_date_gmt>2010-08-06 07:57:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>towards-null-safe-groovy</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[13220543]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1281086859]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>jabber_published</wp:meta_key>
		<wp:meta_value><![CDATA[1281081472]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>reddit</wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"count";s:1:"0";s:4:"time";s:10:"1293720050";}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>154</wp:comment_id>
		<wp:comment_author><![CDATA[Tweets that mention Towards Null-Safe Groovy « Grails Inside -- Topsy.com]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://topsy.com/andresteingress.wordpress.com/2010/08/06/towards-null-safe-groovy/?utm_source=pingback&amp;utm_campaign=L2</wp:comment_author_url>
		<wp:comment_author_IP>208.74.66.43</wp:comment_author_IP>
		<wp:comment_date>2010-08-06 11:19:11</wp:comment_date>
		<wp:comment_date_gmt>2010-08-06 10:19:11</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] This post was mentioned on Twitter by Dierk König, mnk2551 and andre, groovytweets. groovytweets said: RT @sternegross: your feedback is needed: Towards Null-Safe Groovy http://bit.ly/96sMHC (dzone), http://bit.ly/9a9lrj (blog) #groovy [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>161</wp:comment_id>
		<wp:comment_author><![CDATA[andresteingress]]></wp:comment_author>
		<wp:comment_author_email>grails.inside@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://andresteingress.wordpress.com</wp:comment_author_url>
		<wp:comment_author_IP>91.115.71.179</wp:comment_author_IP>
		<wp:comment_date>2010-08-07 16:01:15</wp:comment_date>
		<wp:comment_date_gmt>2010-08-07 15:01:15</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[hi peter, first of all thanks for your comments and sorry for the late reply. I will add your feature suggestions below as issues to gcontracts github page and comment on them there. Back to the discussion on null-safe Groovy code.

@NullSafe is certainly implemented in a broad way when directly integrated into the programming language itself, I agree with you. I am not sure if this is really an issue of statically vs. dynamically typed code, since the type of the variable does not contribute much. But you're right, it will be hard to implement this feature from an external library, relying on AST transformations only, so it should be part of standard Groovy/Groovy++ (as Dirk already mentioned in the groovy-dev mailing list) and not depend on GContracts.

As you've mentioned, to get this feature right is pretty hard and it will require more than just starting to work on it and getting it work correctly over some iterations - especially in a dynamic language like Groovy. What I am concerned with is especially meta-programming and reflection, which can make declared null-safe variables virtually useless and that is exactly what makes this feature scream for tight language integration (again). But I guess this would mean a lot of work through various fields in the programming language and I am not sure if this really pays off.

In a nutshell, maybe it won't be worth the effort to integrate null-safe checks in the language itself, but GContracts/or some indepedent module could add support for null-safe code under certain conditions (e.g. don't use meta-programming, reflection etc.).

I would be interested if you see any major pitfalls with this approach which make it per se rather useless?]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>158</wp:comment_parent>
		<wp:comment_user_id>13220543</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>158</wp:comment_id>
		<wp:comment_author><![CDATA[Peter Niederwieser]]></wp:comment_author>
		<wp:comment_author_email>pniederw@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://spockframework.org</wp:comment_author_url>
		<wp:comment_author_IP>81.10.228.206</wp:comment_author_IP>
		<wp:comment_date>2010-08-06 17:54:07</wp:comment_date>
		<wp:comment_date_gmt>2010-08-06 16:54:07</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Most importantly, don't make this part of GContracts. It should be a separate project.

As to whether this would be helpful in the real world, I doubt it. IDEA has sophisticated static code analysis for Groovy (featuring type inference, control flow analysis, and obviously great IDE integration), but even there I'm getting quite a lot of false positives. Consequently I've turned off some of the checks. I'm not saying it's impossible to create something useful, but that it will require a lot of work to cross the "more useful than annoying" threshold - even more so in a dynamic language like Groovy.

Groovy++ would make a better target for static code analysis (because it's fully statically typed), and it supports the same AST transforms. Maybe worth a try?

By the way, here are some ideas as to what could be added to GContracts:
- Contracts for interfaces
- Per-parameter pre- and postconditions
- Pre- and postconditions for properties (somehow attributed to getter/setter)
- Specialized annotations for frequent cases, e.g. @NotNull for parameters/return values
- Custom user-defined annotations along the lines of Spring's custom stereotype annotations (e.g. allow users to define @NotNull on their own by annotating it with a @Precondition({ it != null}) meta-annotation)

Cheers,
Peter]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>159</wp:comment_id>
		<wp:comment_author><![CDATA[Peter Niederwieser]]></wp:comment_author>
		<wp:comment_author_email>pniederw@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://spockframework.org</wp:comment_author_url>
		<wp:comment_author_IP>90.146.122.129</wp:comment_author_IP>
		<wp:comment_date>2010-08-06 18:36:53</wp:comment_date>
		<wp:comment_date_gmt>2010-08-06 17:36:53</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Two more thoughts:

- Have you looked at CodeNarc (http://codenarc.sourceforge.net/)?
- Another potential GContracts feature: GDoc/JavaDoc integration.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>162</wp:comment_id>
		<wp:comment_author><![CDATA[andresteingress]]></wp:comment_author>
		<wp:comment_author_email>grails.inside@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://andresteingress.wordpress.com</wp:comment_author_url>
		<wp:comment_author_IP>91.115.71.179</wp:comment_author_IP>
		<wp:comment_date>2010-08-07 16:08:34</wp:comment_date>
		<wp:comment_date_gmt>2010-08-07 15:08:34</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Codenarc seems very interesting at first sight - I will have a look.

javadoc/gdoc integration is already on my list.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>159</wp:comment_parent>
		<wp:comment_user_id>13220543</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>gm24_400</title>
		<link>http://andresteingress.wordpress.com/2010/10/04/groovymag-october-2010-issue-is-out/gm24_400/</link>
		<pubDate>Mon, 04 Oct 2010 06:19:31 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<guid isPermaLink="false">http://andresteingress.files.wordpress.com/2010/10/gm24_400.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>847</wp:post_id>
		<wp:post_date>2010-10-04 07:19:31</wp:post_date>
		<wp:post_date_gmt>2010-10-04 06:19:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gm24_400</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>846</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://andresteingress.files.wordpress.com/2010/10/gm24_400.jpg</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/10/gm24_400.jpg]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"400";s:6:"height";s:3:"522";s:14:"hwstring_small";s:22:"height='96' width='73'";s:4:"file";s:84:"/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/10/gm24_400.jpg";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>GroovyMag October 2010 Issue is Out!</title>
		<link>http://andresteingress.wordpress.com/2010/10/04/groovymag-october-2010-issue-is-out/</link>
		<pubDate>Mon, 04 Oct 2010 06:24:36 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[hibernate]]></category>

		<category domain="category" nicename="hibernate"><![CDATA[hibernate]]></category>

		<category><![CDATA[Intro]]></category>

		<category domain="category" nicename="intro"><![CDATA[Intro]]></category>

		<category><![CDATA[patterns]]></category>

		<category domain="category" nicename="patterns"><![CDATA[patterns]]></category>

		<guid isPermaLink="false">http://andresteingress.wordpress.com/?p=846</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.groovymag.com/main.issues.description/id=26/"><img src="http://andresteingress.files.wordpress.com/2010/10/gm24_400.jpg" alt="" title="gm24_400" width="400" height="522" class="aligncenter size-full wp-image-847" /></a>

<a href="http://www.groovymag.com/main.issues.description/id=26/">GroovyMag 2010/10</a> features an article of mine about GORM and persistence context patterns. Check it out - really worth the 4.99 ;-)

Content:

<ul>
<li>Hibernate, GORM and the Persistence Context by Andre Steingress</li> 
<li>Getting Started with Gaelyk by Peter Bell</li>
<li>Lean Groovy Part VII by Hamlet D'Arcy</li>
<li>Groovy Under the Hood - Closure Class by Kirsten Schwank</li>
<li>... and much more</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>846</wp:post_id>
		<wp:post_date>2010-10-04 07:24:36</wp:post_date>
		<wp:post_date_gmt>2010-10-04 06:24:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>groovymag-october-2010-issue-is-out</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[13220543]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1286174804]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>jabber_published</wp:meta_key>
		<wp:meta_value><![CDATA[1286173476]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>reddit</wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"count";s:1:"0";s:4:"time";s:10:"1293719802";}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>email_notification</wp:meta_key>
		<wp:meta_value><![CDATA[1286173477]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Grails: Splitting up resources.groovy</title>
		<link>http://andresteingress.wordpress.com/2010/10/13/grails-quicky-splitting-up-resources-groovy/</link>
		<pubDate>Wed, 13 Oct 2010 07:33:55 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[grails]]></category>

		<category domain="category" nicename="grails"><![CDATA[grails]]></category>

		<guid isPermaLink="false">http://andresteingress.wordpress.com/?p=853</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://flattr.com/thing/75610/Grails-Splitting-up-resources-groovy" target="_blank">
<img src="http://api.flattr.com/button/button-static-50x60.png" alt="Flattr this" title="Flattr this" border="0" align="right" vspace="5" hspace="5" /></a> Grails provides a neat way to specify Spring bean definitions with its custom Beans DSL [<a href="http://grails.org/doc/latest/guide/14.%20Grails%20and%20Spring.html#14.3%20Runtime%20Spring%20with%20the%20Beans%20DSL">0</a>]. The bean definition is found in <code>grails-app/conf/spring/resources.groovy</code>:

[sourcecode language="groovy"]
beans = {
    myBean(SomeBeanClass)  {
        someProperty = ref('someReference')
    }
    // ...
}
[/sourcecode]

Another way to specify beans is via XML definitions:

[sourcecode language="xml"]
&lt;beans:beans
        xmlns:beans=&quot;http://www.springframework.org/schema/beans&quot;
        xmlns:util=&quot;http://www.springframework.org/schema/util&quot;
        xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
        xsi:schemaLocation=&quot;
            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
            http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd&quot;&gt;

    &lt;beans:bean id=&quot;myBean&quot; class=&quot;org.ast.beans.SomeBeanClass&quot;&gt;
        &lt;beans:property name=&quot;someProperty&quot; ref=&quot;someReference&quot; /&gt;
    &lt;/beans:bean&gt;
    &lt;!-- ... --&gt;
&lt;/beans:beans&gt;
[/sourcecode]

These can be specified in <code>grails-app/conf/spring/resources.xml</code>. 

Grails watches <code>resources.groovy</code> and <code>resources.xml</code> for changes and reloads them at runtime if necessary.

<h4>Splitting up with Bean XML files</h4>

As the bean definition count raises, it is preferable to split <code>resources.groovy</code> into separate bean definition files. Using Spring's bean definition XML this can be done via the <code>&lt;beans:import/&gt;</code> XML tag:

[sourcecode language="xml"]
&lt;beans:beans
        xmlns:beans=&quot;http://www.springframework.org/schema/beans&quot;
        xmlns:util=&quot;http://www.springframework.org/schema/util&quot;
        xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
        xsi:schemaLocation=&quot;
            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
            http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd&quot;&gt;

    &lt;beans:import resource=&quot;common.xml&quot;/&gt;
    &lt;beans:import resource=&quot;job-definitions.xml&quot;/&gt;
    &lt;!-- ... --&gt;
&lt;/beans:beans&gt;
[/sourcecode]

It is considered good practice to split up a large Spring bean definition file into multiple files, whereas each file contains beans of the same thematic context (e.g. all beans related to batch jobs go to 'batch-common.xml', all beans related to data-source config goto to 'data-source.xml', etc.).

<h4>Splitting up in Beans DSL</h4>

So far for XML bean definition files, but what about splitting <code>resources.groovy</code> into separate groovy definitions?

Since Grails 1.2, there is a way to do this (although not explicitly documented in the Grails reference documentation). Grails' Beans DSL is interpreted via a <code>grails.spring.BeanBuilder</code> instance which in turn provides method 

[sourcecode language="java"]
public void importBeans(String resourcePattern) { 
// ...
}
[/sourcecode]

This method can be used inside the Beans DSL to load arbitrary Spring definitions either specified in XML or Bean DSL groovy files:

[sourcecode language="groovy"]
beans = {
    importBeans('classpath:grails-app/conf/spring/common.xml)
    importBeans('classpath:grails-app/conf/spring/job-definitions.xml)
    importBeans('classpath:grails-app/conf/spring/integration.groovy)
    // ...
}
[/sourcecode] 

The <code>String</code> parameter of <code>importBeans</code> might be an arbitrary resource pattern which is resolved at runtime using Spring's <code>org.springframework.core.io.support.ResourcePatternResolver</code>, e.g. it would be possible to import multiple XML and/or groovy files using '*' like:

[sourcecode language="groovy"]
importBeans('classpath:grails-app/conf/spring/*.xml)
[/sourcecode] 



[0] <a href="http://grails.org/doc/latest/guide/14.%20Grails%20and%20Spring.html#14.3%20Runtime%20Spring%20with%20the%20Beans%20DSL">Grails Beans DSL</a>

[1] <a href="http://jira.codehaus.org/browse/GRAILS-2653">BeanBuilder should support import</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>853</wp:post_id>
		<wp:post_date>2010-10-13 08:33:55</wp:post_date>
		<wp:post_date_gmt>2010-10-13 07:33:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>grails-quicky-splitting-up-resources-groovy</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[13220543]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1287737784]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>jabber_published</wp:meta_key>
		<wp:meta_value><![CDATA[1286955237]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>reddit</wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"count";s:1:"0";s:4:"time";s:10:"1293719889";}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>email_notification</wp:meta_key>
		<wp:meta_value><![CDATA[1286955239]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>277</wp:comment_id>
		<wp:comment_author><![CDATA[Luis]]></wp:comment_author>
		<wp:comment_author_email>lramos85@gmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>98.210.90.102</wp:comment_author_IP>
		<wp:comment_date>2010-10-13 16:56:41</wp:comment_date>
		<wp:comment_date_gmt>2010-10-13 15:56:41</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Thank you, I was running into this problem.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>Master Slave Use-Case</title>
		<link>http://andresteingress.wordpress.com/2010/10/14/happy-messaging-with-activemq-and-si-part-1/activemqmasterslave/</link>
		<pubDate>Thu, 14 Oct 2010 09:09:02 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<guid isPermaLink="false">http://andresteingress.files.wordpress.com/2010/10/activemqmasterslave.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>874</wp:post_id>
		<wp:post_date>2010-10-14 10:09:02</wp:post_date>
		<wp:post_date_gmt>2010-10-14 09:09:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>activemqmasterslave</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>863</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://andresteingress.files.wordpress.com/2010/10/activemqmasterslave.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/10/activemqmasterslave.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"332";s:6:"height";s:3:"326";s:14:"hwstring_small";s:22:"height='96' width='97'";s:4:"file";s:95:"/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/10/activemqmasterslave.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Happy Messaging with ActiveMQ and SI (Part 1)</title>
		<link>http://andresteingress.wordpress.com/2010/10/14/happy-messaging-with-activemq-and-si-part-1/</link>
		<pubDate>Thu, 14 Oct 2010 09:25:49 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[grails]]></category>

		<category domain="category" nicename="grails"><![CDATA[grails]]></category>

		<category><![CDATA[groovy]]></category>

		<category domain="category" nicename="groovy"><![CDATA[groovy]]></category>

		<category><![CDATA[patterns]]></category>

		<category domain="category" nicename="patterns"><![CDATA[patterns]]></category>

		<category><![CDATA[spring framework]]></category>

		<category domain="category" nicename="spring-framework"><![CDATA[spring framework]]></category>

		<guid isPermaLink="false">http://andresteingress.wordpress.com/?p=863</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://flattr.com/thing/75608/Happy-Messaging-with-ActiveMQ-and-SI-Part-1" target="_blank">
<img src="http://api.flattr.com/button/button-static-50x60.png" alt="Flattr this" title="Flattr this" border="0" align="right" vspace="5" hspace="5" /></a> In one of my current projects we needed to set up a <em>communication channel</em> between two distinct Grails applications. One of them is the master application which runs an embedded ActiveMQ message broker [<a href="http://activemq.apache.org/">0</a>]. The second one - the slave application - provides service APIs to the master application. 

<img src="http://andresteingress.files.wordpress.com/2010/10/activemqmasterslave.png" alt="" title="Master Slave Use-Case" width="332" height="326" class="aligncenter size-full wp-image-874" />

Since Grails heavily relies on Spring, we decided to use Spring Integration as messaging framework [<a href="http://www.springsource.org/spring-integration">1</a>]. Spring Integration is a messaging framework which supports various Enterprise Application Integration Patterns [<a href="http://en.wikipedia.org/wiki/Enterprise_application_integration">2</a>], without being bound to any specific messaging protocol. Since our project team chose to use ActiveMQ we go with JMS as underlying messaging protocol in our project. 

<h4>Setting up an embedded ActiveMQ message broker</h4>

ActiveMQ is a fully JMS 1.1 compliant messaging provider which is available under the Apache Software License. It has quite a bag of features, the most important ones for us where persistent messages support. Besides running ActiveMQ as a distinct server, one can choose to run ActiveMQ as an <em>embedded server</em> inside the application.

Configuring an embedded ActiveMQ broker using Grails' Beans DSL is pretty straight-forward (once you get used to the Beans DSL of course):

[sourcecode language="groovy"]
xmlns amq:'http://activemq.apache.org/schema/core'

def brokerName = 'myEmbeddedBroker'

amq.'broker'(brokerName: brokerName, useJmx: true, persistent: false) {
  amq.'managementContext'  {
    amq.'managementContext'(connectorPort: 2011, jmxDomainName: 'embeddedBroker')
  }

  amq.'plugins'  {
    amq.'loggingBrokerPlugin'
  }

  amq.'transportConnectors'  {
    amq.'transportConnector'(name: 'openwire', uri: 'tcp://localhost:61616')
  }
}
[/sourcecode]

The code above configures an embedded broker called <code>myEmbeddedBroker</code> which only persists messages in-memory (<code>persist: false</code>), exposes itself as JMX bean (<code>useJmx: true</code>) and configures a transport connector using Openwire over TCP.

In order to let the master application (which holds the configuration above) connect to its embedded message broker, we need to set up a connection factory:

[sourcecode language="groovy"]
connectionFactoryLocal(ActiveMQConnectionFactory)  {
  brokerURL = &quot;vm://${brokerName}&quot;
}
[/sourcecode]

After all, we will define two message queues one for outgoing API requests to the slave application and one for incoming responses:

[sourcecode language="groovy"]
&quot;requestQueue&quot;(org.apache.activemq.command.ActiveMQQueue, &quot;QUEUE.REQUEST&quot;)
&quot;responseQueue&quot;(org.apache.activemq.command.ActiveMQQueue, &quot;QUEUE.RESPONSE&quot;)
[/sourcecode]

<h4>Spring Integration comes into play</h4>

So far we have set up an embedded message broker which could be used for plain JMS API message exchange. In our project we decided to go with Spring Integration because it already implements several EAI patterns (e.g. router, gateway, etc.) and abstract from the underlying messaging protocol.

A reference manual on Spring Integration can be found at [<a href="http://static.springsource.org/spring-integration/reference/htmlsingle/spring-integration-reference.html">3</a>], but let me give you a short introduction. Spring Integration (SI) is a messaging framework which implements patterns found in the book <em>Enterprise Application Integration Patterns</em> [<a href="http://www.amazon.com/Enterprise-Integration-Patterns-Designing-Deploying/dp/0321200683">4</a>]. That is, SI is all about messages and message exchange. To exchange a message from point A to point B there needs to be a channel between A and B. Besides messages, channels are the second most important domain entity in SI. 

Channels are injected into your application components just like any other Spring bean. The basic <code>MessageChannel</code> interface is pretty rudimentary:

[sourcecode language="java"]
public interface MessageChannel {

	boolean send(Message&lt;?&gt; message);
	boolean send(Message&lt;?&gt; message, long timeout);
}
[/sourcecode]

The use-case in our project was to automatically create a message and send it to some preconfigured channel whenever the programmers chooses to call a service API method:

[sourcecode language="groovy"]

def someApi

def doSomething()  {   
   someApi.executeRemotely('first param', 'second param') // this should trigger message creation and sending/receiving
}

[/sourcecode]

A call to <code>executeRemotely</code> should automatically create a message object from the input parameters and send it to some sort of API request channel. 

Luckily, SI provides the concept of <em>gateways</em> which solve that particular problem. At runtime, a gateway is a proxy object for a particular interface which, on a method call, creates a message object and sends it via some preconfigured channel. Like channels, gateways are Spring beans and  can therefore be configured via the Beans DSL:

[sourcecode language="groovy"]
xmlns integration:'http://www.springframework.org/schema/integration'
xmlns jms:'http://www.springframework.org/schema/integration/jms'

integration.'channel'(id: 'apiChannelRequest')
integration.'channel'(id: 'apiChannelResponse')

integration.'gateway'(id: 'someApi', 'service-interface': org.ast.SomeApi.class.getName(), 'default-request-channel': 'apiChannelRequest', 'default-reply-channel': 'apiChannelResponse')  {

  integration.'method'(name: 'executeRemotely')  {
    integration.'header'(name: 'API_METHOD_NAME', value: 'executeRemotely')
  }
}
[/sourcecode]

As you can see from the configuration snippet above, the gateway has a request/reply channel configured since gateways are <em>synchronous</em> (in SI 2.0 there is asynchronous gateway support) and  <em>bidirectional</em>. The <code>SomeApi</code> interface uses SI annotations for further message configuration:

[sourcecode language="groovy"]
interface SomeApi {
    Boolean executeRemotely(final @Header(&quot;HEADER_NAME&quot;) String param1, final String param2)
}
[/sourcecode]

From the gateway's view the interface above means: whenever <code>executeRemotely</code> is called, put param1 into a message header with name <code>HEADER_NAME</code> and put the second parameter into the message's payload. Maybe you noticed the <code>API_METHOD_NAME</code> parameter in the gateway configuration above - that was a message header too. We needed to manually inject a unique method identification token (in our case the method name only was enough) in order to call the correct method on the slave application side.

<h4>Configuring JMS messaging</h4>

So far we've set up an environment with an embedded ActiveMQ message broker and two ActiveMQ message queues. Now we need to configure the link between the SI channels configured in the last section and those JMS queues. Since gateways are bidirectional, SI needs to store some reply channel information whenever instantiating an API request. This is automatically done via the gateway implementation. If we would run inside a SI environment only we wouldn't need to care about this fact. In our case, we chose to use gatways to communicate between a master and a slave application which are in production deployed on separate server instances.

In SI, a <code>JMSOutboundGateway</code> can be used for those JMS request/reply scenarios. It is the clue between SI channels and out ActiveMQ JMS queues:

[sourcecode language="groovy"]
jms.'outbound-gateway'(id: &quot;jmsGateway&quot;, 'connection-factory': 'pooledJmsConnectionFactoryLocal', 'request-destination': &quot;requestQueue&quot;, 'request-channel': &quot;apiChannelRequest&quot;, 'reply-destination': &quot;responseQueue&quot;,'reply-channel': 'apiChannelResponse')
[/sourcecode]

In the slave application, there needs to be an inverse configuration using a JMS inbound gateway:

[sourcecode language="groovy"]
jms.'inbound-gateway'(id: 'jmsInbound', 'connection-factory': 'pooledJmsConnectionFactoryRemote', 'request-destination-name': 'QUEUE.REQUEST', 'request-channel': 'incomingRequest', 'reply-destination-name': 'QUEUE.RESPONSE')
[/sourcecode]

The configuration snippet inside the slave application simply routes incoming messages to the <code>incomingRequests</code> channel. Notice that no reply channel has been specified in order to keep the reply channel which has been added by the master application in the message.

In the next part of this article series we'll have a closer look at the slave application and how it is configured to invoke methods an Grails service beans.

[0] <a href="http://activemq.apache.org/">ActiveMQ Message Broker</a>
[1] <a href="http://www.springsource.org/spring-integration">Spring Integration</a>
[2] <a href="http://en.wikipedia.org/wiki/Enterprise_application_integration">Enterprise Application Integration</a>
[3] <a href="http://static.springsource.org/spring-integration/reference/htmlsingle/spring-integration-reference.html">Spring Integration - Reference Manual</a>
[4] <a href="http://www.amazon.com/Enterprise-Integration-Patterns-Designing-Deploying/dp/0321200683">Amazon: Enterprise Integration Patterns</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>863</wp:post_id>
		<wp:post_date>2010-10-14 10:25:49</wp:post_date>
		<wp:post_date_gmt>2010-10-14 09:25:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>happy-messaging-with-activemq-and-si-part-1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1287737750]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[13220543]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>jabber_published</wp:meta_key>
		<wp:meta_value><![CDATA[1287048464]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>email_notification</wp:meta_key>
		<wp:meta_value><![CDATA[1287048465]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>reddit</wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"count";s:1:"0";s:4:"time";s:10:"1293719869";}]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>284</wp:comment_id>
		<wp:comment_author><![CDATA[Luis]]></wp:comment_author>
		<wp:comment_author_email>lramos85@gmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>98.210.90.102</wp:comment_author_IP>
		<wp:comment_date>2010-10-16 21:03:17</wp:comment_date>
		<wp:comment_date_gmt>2010-10-16 20:03:17</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Always ahead of what I need next, thank you.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>Getting the Persistence Context Picture (Part I)</title>
		<link>http://andresteingress.wordpress.com/2010/03/23/getting-the-persistence-context-picture-part-i/getting-the-persistence-context-picture-part-i-2/</link>
		<pubDate>Fri, 22 Oct 2010 09:01:04 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<guid isPermaLink="false">http://andresteingress.files.wordpress.com/2010/03/object-definition.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>899</wp:post_id>
		<wp:post_date>2010-10-22 10:01:04</wp:post_date>
		<wp:post_date_gmt>2010-10-22 09:01:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>getting-the-persistence-context-picture-part-i-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>11</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://andresteingress.files.wordpress.com/2010/03/object-definition.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/03/object-definition.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"320";s:6:"height";s:2:"54";s:14:"hwstring_small";s:23:"height='21' width='128'";s:4:"file";s:93:"/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/03/object-definition.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>auto_import</wp:meta_key>
		<wp:meta_value><![CDATA[http://3.bp.blogspot.com/_CjUlO_BefEg/S6jD3wGl0cI/AAAAAAAAABo/dAN0bLIOpJQ/s320/object-definition.png]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Getting the Persistence Context Picture (Part I)</title>
		<link>http://andresteingress.wordpress.com/2010/03/23/getting-the-persistence-context-picture-part-i/getting-the-persistence-context-picture-part-i-3/</link>
		<pubDate>Fri, 22 Oct 2010 09:01:05 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<guid isPermaLink="false">http://andresteingress.files.wordpress.com/2010/03/anobjectillustration.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>900</wp:post_id>
		<wp:post_date>2010-10-22 10:01:05</wp:post_date>
		<wp:post_date_gmt>2010-10-22 09:01:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>getting-the-persistence-context-picture-part-i-3</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>11</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://andresteingress.files.wordpress.com/2010/03/anobjectillustration.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/03/anobjectillustration.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"185";s:6:"height";s:3:"216";s:14:"hwstring_small";s:22:"height='96' width='82'";s:4:"file";s:96:"/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/03/anobjectillustration.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>auto_import</wp:meta_key>
		<wp:meta_value><![CDATA[http://3.bp.blogspot.com/_CjUlO_BefEg/S6jaT31xY1I/AAAAAAAAACY/v1UiJoT_tMs/s320/An+Object+Illustration.png]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Getting the Persistence Context Picture (Part I)</title>
		<link>http://andresteingress.wordpress.com/2010/03/23/getting-the-persistence-context-picture-part-i/getting-the-persistence-context-picture-part-i-4/</link>
		<pubDate>Fri, 22 Oct 2010 09:01:06 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<guid isPermaLink="false">http://andresteingress.files.wordpress.com/2010/03/equalitybyreference.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>901</wp:post_id>
		<wp:post_date>2010-10-22 10:01:06</wp:post_date>
		<wp:post_date_gmt>2010-10-22 09:01:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>getting-the-persistence-context-picture-part-i-4</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>11</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://andresteingress.files.wordpress.com/2010/03/equalitybyreference.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/03/equalitybyreference.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"320";s:6:"height";s:3:"157";s:14:"hwstring_small";s:23:"height='62' width='128'";s:4:"file";s:95:"/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/03/equalitybyreference.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>auto_import</wp:meta_key>
		<wp:meta_value><![CDATA[http://3.bp.blogspot.com/_CjUlO_BefEg/S6jaa9Il7nI/AAAAAAAAACg/5p5pUzoDEHc/s320/Equality+by+Reference.png]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Getting the Persistence Context Picture (Part I)</title>
		<link>http://andresteingress.wordpress.com/2010/03/23/getting-the-persistence-context-picture-part-i/getting-the-persistence-context-picture-part-i-5/</link>
		<pubDate>Fri, 22 Oct 2010 09:01:06 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<guid isPermaLink="false">http://andresteingress.files.wordpress.com/2010/03/equalitybyvalue.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>902</wp:post_id>
		<wp:post_date>2010-10-22 10:01:06</wp:post_date>
		<wp:post_date_gmt>2010-10-22 09:01:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>getting-the-persistence-context-picture-part-i-5</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>11</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://andresteingress.files.wordpress.com/2010/03/equalitybyvalue.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/03/equalitybyvalue.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"320";s:6:"height";s:3:"157";s:14:"hwstring_small";s:23:"height='62' width='128'";s:4:"file";s:91:"/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/03/equalitybyvalue.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>auto_import</wp:meta_key>
		<wp:meta_value><![CDATA[http://4.bp.blogspot.com/_CjUlO_BefEg/S6jagKzRQnI/AAAAAAAAACo/iYWN7iPOhbY/s320/Equality+by+Value.png]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Getting the Persistence Context Picture (Part I)</title>
		<link>http://andresteingress.wordpress.com/2010/03/23/getting-the-persistence-context-picture-part-i/getting-the-persistence-context-picture-part-i-6/</link>
		<pubDate>Fri, 22 Oct 2010 09:01:07 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<guid isPermaLink="false">http://andresteingress.files.wordpress.com/2010/03/tablewithobjectrows.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>903</wp:post_id>
		<wp:post_date>2010-10-22 10:01:07</wp:post_date>
		<wp:post_date_gmt>2010-10-22 09:01:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>getting-the-persistence-context-picture-part-i-6</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>11</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://andresteingress.files.wordpress.com/2010/03/tablewithobjectrows.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/03/tablewithobjectrows.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"320";s:6:"height";s:3:"180";s:14:"hwstring_small";s:23:"height='72' width='128'";s:4:"file";s:95:"/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/03/tablewithobjectrows.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>auto_import</wp:meta_key>
		<wp:meta_value><![CDATA[http://3.bp.blogspot.com/_CjUlO_BefEg/S6jN3bCTNyI/AAAAAAAAACQ/h-b4dc9nC7U/s320/Table+with+Object+Rows.png]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Getting the Persistence Context Picture (Part I)</title>
		<link>http://andresteingress.wordpress.com/2010/03/23/getting-the-persistence-context-picture-part-i/getting-the-persistence-context-picture-part-i-7/</link>
		<pubDate>Fri, 22 Oct 2010 09:01:08 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<guid isPermaLink="false">http://andresteingress.files.wordpress.com/2010/03/pc-definition.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>904</wp:post_id>
		<wp:post_date>2010-10-22 10:01:08</wp:post_date>
		<wp:post_date_gmt>2010-10-22 09:01:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>getting-the-persistence-context-picture-part-i-7</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>11</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://andresteingress.files.wordpress.com/2010/03/pc-definition.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/03/pc-definition.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"320";s:6:"height";s:2:"68";s:14:"hwstring_small";s:23:"height='27' width='128'";s:4:"file";s:89:"/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/03/pc-definition.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>auto_import</wp:meta_key>
		<wp:meta_value><![CDATA[http://3.bp.blogspot.com/_CjUlO_BefEg/S6jEWoPuUVI/AAAAAAAAAB4/coRtAxYoOpg/s320/pc-definition.png]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Getting the Persistence Context Picture (Part I)</title>
		<link>http://andresteingress.wordpress.com/2010/03/23/getting-the-persistence-context-picture-part-i/getting-the-persistence-context-picture-part-i-8/</link>
		<pubDate>Fri, 22 Oct 2010 09:01:08 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<guid isPermaLink="false">http://andresteingress.files.wordpress.com/2010/03/hibernateobjectlife-cycle.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>905</wp:post_id>
		<wp:post_date>2010-10-22 10:01:08</wp:post_date>
		<wp:post_date_gmt>2010-10-22 09:01:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>getting-the-persistence-context-picture-part-i-8</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>11</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://andresteingress.files.wordpress.com/2010/03/hibernateobjectlife-cycle.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/03/hibernateobjectlife-cycle.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"215";s:6:"height";s:3:"320";s:14:"hwstring_small";s:22:"height='96' width='64'";s:4:"file";s:101:"/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/03/hibernateobjectlife-cycle.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>auto_import</wp:meta_key>
		<wp:meta_value><![CDATA[http://2.bp.blogspot.com/_CjUlO_BefEg/S6jC-uU9QaI/AAAAAAAAABQ/M6eHkGCuWyE/s320/Hibernate+Object+Life-Cycle.png]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Getting the Persistence Context Picture (Part I)</title>
		<link>http://andresteingress.wordpress.com/2010/03/23/getting-the-persistence-context-picture-part-i/getting-the-persistence-context-picture-part-i-9/</link>
		<pubDate>Fri, 22 Oct 2010 09:01:09 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<guid isPermaLink="false">http://andresteingress.files.wordpress.com/2010/03/hibernatesavingupdating.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>906</wp:post_id>
		<wp:post_date>2010-10-22 10:01:09</wp:post_date>
		<wp:post_date_gmt>2010-10-22 09:01:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>getting-the-persistence-context-picture-part-i-9</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>11</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://andresteingress.files.wordpress.com/2010/03/hibernatesavingupdating.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/03/hibernatesavingupdating.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"320";s:6:"height";s:3:"174";s:14:"hwstring_small";s:23:"height='69' width='128'";s:4:"file";s:99:"/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/03/hibernatesavingupdating.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>auto_import</wp:meta_key>
		<wp:meta_value><![CDATA[http://4.bp.blogspot.com/_CjUlO_BefEg/S6jDCTaY3XI/AAAAAAAAABY/yCbApdT4FTY/s320/Hibernate+Saving:Updating.png]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Getting the Persistence Context Picture (Part I)</title>
		<link>http://andresteingress.wordpress.com/2010/03/23/getting-the-persistence-context-picture-part-i/getting-the-persistence-context-picture-part-i-10/</link>
		<pubDate>Fri, 22 Oct 2010 09:01:09 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<guid isPermaLink="false">http://andresteingress.files.wordpress.com/2010/03/hibernateremove.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>907</wp:post_id>
		<wp:post_date>2010-10-22 10:01:09</wp:post_date>
		<wp:post_date_gmt>2010-10-22 09:01:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>getting-the-persistence-context-picture-part-i-10</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>11</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://andresteingress.files.wordpress.com/2010/03/hibernateremove.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/03/hibernateremove.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"315";s:6:"height";s:3:"256";s:14:"hwstring_small";s:23:"height='96' width='118'";s:4:"file";s:91:"/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/03/hibernateremove.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>auto_import</wp:meta_key>
		<wp:meta_value><![CDATA[http://3.bp.blogspot.com/_CjUlO_BefEg/S6jDGV7XNRI/AAAAAAAAABg/9tQY_8swMis/s320/Hibernate+Remove.png]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>GContracts 1.1.3 Released!</title>
		<link>http://andresteingress.wordpress.com/2010/11/16/gcontracts-1-1-3-released/</link>
		<pubDate>Tue, 16 Nov 2010 22:38:07 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[gcontracts]]></category>

		<category domain="category" nicename="gcontracts"><![CDATA[gcontracts]]></category>

		<category><![CDATA[groovy]]></category>

		<category domain="category" nicename="groovy"><![CDATA[groovy]]></category>

		<category><![CDATA[releases]]></category>

		<category domain="category" nicename="releases"><![CDATA[releases]]></category>

		<guid isPermaLink="false">http://andresteingress.wordpress.com/?p=915</guid>
		<description></description>
		<content:encoded><![CDATA[I am proud to announce that GContracts 1.1.3 has just been released and is available now in the Central Maven repository [<a href="http://repo1.maven.org/maven2/org/gcontracts/gcontracts/1.1.3/">0</a>] and at Github [<a href="http://github.com/andresteingress/gcontracts/downloads">1</a>].

The release includes bug fixes and advanced support Spring bean classes annotated with GContracts' annotations.

<h4>Concrete <code>AssertionError</code> types</h4>

In parallel with <code>@Invariant</code>, <code>@Requires</code> and <code>@Ensures</code> GContracts 1.1.3 provides separate exception types which all are descendants of <code>AssertionError</code> and I guess do not need further explanation:

<code>ClassInvariantViolation</code>, <code>PreconditionViolation</code> and <code>PostconditionViolation</code>.

<h4>Advanced Support for Spring Beans</h4>

One of the problems with GContracts is its lack of compatibility especially with Grails artifact classes, i.e. controllers, services, domain classes etc. This topic has been brought to me a few times and if you just want to apply let's say class invariants on Spring bean classes the Spring application container's initialization lifecycle can quickly become your enemy.

Let's consider the following service:

[sourcecode language="groovy"]
@Invariant({ anotherService != null })
class MyService {

    def anotherService

    static transactional = true

    // ...
}
[/sourcecode]

<code>MyService</code> is a simple Grails service class, annotated with a class invariant which ensures that the reference to <code>anotherService</code> will never be <code>null</code>, during the entire life-time of the <code>MyService</code> bean. Sadly enough, whenever the Spring application container tries to create a new instance of a <code>MyService</code> bean it fails because GContracts checks the class invariant directly after the object's constructor has completed successfully. By that time, the Spring application container is not yet done with object construction.

From a theoretical perspective throwing a <code>ClassInvariantViolation</code> in this place is completely reasonable since an object's class invariant needs to be fulfilled by the object instance during its entire life-time. But from a practical perspective, this is kind of pain. It means that you have to duplicate the class invariant to all methods in the service class, e.g.

[sourcecode language="groovy"]
// avoid invariant checks during construction
class MyService {

    def anotherService

    static transactional = true

    @Requires({ anotherService != null })
    def myServiceMethod()  {
        // ...
    }

    @Requires({ anotherService != null })
    def yetAnotherServiceMethod()  {
        // ...
    }
}
[/sourcecode]

It is not that Design by Contract can not be applied here, it is that Spring simply does define its own rules for object creation and destruction, meaning that whenever an object is created with its constructor the initialization process is not done in the case of the Spring application container.  

This circumstance confuses programmers who simply want to apply DbC on their bean classes without thinking about Spring initialization mechanisms and GContracts assertion injection.

GContracts 1.1.3 is the starting point for a bunch of features which are targeted to iron out such integration issues with Spring/Grails applications. Of course it might be questionable whether it makes sense to focus primarily on the Spring framework, but that has been a practical decision (GContracts is for Groovy, Grails uses Groovy, Grails uses Spring...). Furthermore, I tried to make the integration as light as possible without actually introducing a classpath dependency on Spring framework classes. 

The first feature which comes with 1.1.3 is a solution for the problem described above: class invariant checks on Spring beans. Henceforth, GContracts will not make class invariant checks on Spring beans during constructor calls, but will create a synthetic <code>@PostConstruct</code> method which overtakes the class invariant check. Since GContracts has no mechanism to know that the given class is a Spring-managed class at runtime, programmers need to annotate their artifact classes with appropriate stereotype annotations [<a href="http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/beans.html#beans-classpath-scanning">2</a>], e.g. a service class with <code>@Service</code>, a controller with <code>@Controller</code>, etc.

[sourcecode language="groovy"]
@Service
@Invariant({ anotherService != null })
class MyService {

    def anotherService

    static transactional = true

    // ...
} 
[/sourcecode]

The <code>@Service</code> stereotype annotation above triggers GContracts' "Spring compliance mode". Whenever the service bean above has been constructed by the Spring application container it will automatically check the class invariant.

The programmer clearly needs to make a compromise in this case, because the class invariant won't be checked after a construction call anymore (e.g. in a test-case where the programmer simply creates an instance of this service class). But this is a consequence of outsourcing object creation to the application container.

<strong>Hint:</strong> GContracts supports the <code>-ea</code>/<code>-da</code> VM parameters [<a href="https://github.com/andresteingress/gcontracts/wiki/VM-Parameters">3</a>] which you can use to deactivate assertion checking during application execution, whereas activating assertion checking only during test-cases.

<h4>Changes</h4>

ISSUE-25: better support for Spring component classes with class invariants
ISSUE-24: wrong class invariant placement with inherited invariant
ISSUE-23: @Requires on constructor with super statement causes compilation error
ISSUE-22: Separate Exception Types for Pre-, Postconditions and Class Invariant 
ISSUE-17: remove direct reference to PowerAssertionError

[0] <a href="http://repo1.maven.org/maven2/org/gcontracts/gcontracts/1.1.3/">GContracts 1.1.3 in Central Maven Repository</a>
[1] <a href="http://github.com/andresteingress/gcontracts/downloads">GContracts at Github</a>
[2] <a href="http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/beans.html#beans-classpath-scanning">Spring Stereotype Annotations and Classpath Scanning</a>
[3] <a href="https://github.com/andresteingress/gcontracts/wiki/VM-Parameters">GContracts VM Parameter Support</a>

<a href="http://flattr.com/thing/84856/GContracts-1-1-3-Released" target="_blank">
<img src="http://api.flattr.com/button/flattr-badge-large.png" alt="Flattr this" title="Flattr this" border="0" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[GContracts 1.1.3 Release Notes]]></excerpt:encoded>
		<wp:post_id>915</wp:post_id>
		<wp:post_date>2010-11-16 23:38:07</wp:post_date>
		<wp:post_date_gmt>2010-11-16 22:38:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gcontracts-1-1-3-released</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>email_notification</wp:meta_key>
		<wp:meta_value><![CDATA[1289947090]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>jabber_published</wp:meta_key>
		<wp:meta_value><![CDATA[1289947088]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1289981446]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[13220543]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>reddit</wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"count";s:1:"0";s:4:"time";s:10:"1293720062";}]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>325</wp:comment_id>
		<wp:comment_author><![CDATA[Tweets that mention GContracts 1.1.3 Released! « Grails Inside -- Topsy.com]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://topsy.com/andresteingress.wordpress.com/2010/11/16/gcontracts-1-1-3-released/?utm_source=pingback&amp;utm_campaign=L2</wp:comment_author_url>
		<wp:comment_author_IP>208.74.66.43</wp:comment_author_IP>
		<wp:comment_date>2010-11-17 09:27:28</wp:comment_date>
		<wp:comment_date_gmt>2010-11-17 08:27:28</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] This post was mentioned on Twitter by Guillaume Laforge, andre. andre said: GContracts 1.1.3-support for class invariants in spring beans - http://is.gd/hgK8g (dzone), http://is.gd/hgKaM #gcontracts #groovy #spring [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>332</wp:comment_id>
		<wp:comment_author><![CDATA[Luis]]></wp:comment_author>
		<wp:comment_author_email>lramos85@gmail.com</wp:comment_author_email>
		<wp:comment_author_url></wp:comment_author_url>
		<wp:comment_author_IP>98.210.90.102</wp:comment_author_IP>
		<wp:comment_date>2010-11-20 23:49:50</wp:comment_date>
		<wp:comment_date_gmt>2010-11-20 22:49:50</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Thank you for your work. Updated great from Maven Repo. I haven't tried all new features yet, but what I wanted to try works. :). Always, best timing.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>Grails Quickie: How to Load Dependency Sources and Javadocs</title>
		<link>http://andresteingress.wordpress.com/2010/11/18/grails-quickie-how-to-load-dependency-sources-and-javadocs/</link>
		<pubDate>Thu, 18 Nov 2010 16:08:58 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[grails]]></category>

		<category domain="category" nicename="grails"><![CDATA[grails]]></category>

		<category><![CDATA[plugins]]></category>

		<category domain="category" nicename="plugins"><![CDATA[plugins]]></category>

		<guid isPermaLink="false">http://andresteingress.wordpress.com/?p=927</guid>
		<description></description>
		<content:encoded><![CDATA[Once you start a new Grails project and you want to access all the source code of dependent libraries, you have to manually reference the according source files. This is a boring, time-consuming and error-prone task - something like <code>mvn dependency:sources</code> is definitely missing. Luckily, there exists a workaround which can be done using the <code>eclipse-scripts</code> [<a href="http://www.grails.org/plugin/eclipse-scripts">0</a>] plugin:

[sourcecode]
grails install-plugin eclipse-scripts 
grails compile 
grails download-sources-and-javadocs 
# run twice to download everything 
grails download-sources-and-javadocs 
# grails create-eclipse-files # run this one to create .classpath/.project Eclipse/STS files
[/sourcecode]

Executing <code>download-sources-and-javadocs</code> loads the docs and copies them into the Ivy cache directory.

Thanks to Lari Hotari who came up with this solution on the Grails mailing-list [<a href="http://grails.1312388.n4.nabble.com/Grails-dependency-sources-td2956849.html">1</a>].

[0] <a href="http://www.grails.org/plugin/eclipse-scripts">Eclipse Helper Scripts Plugin</a>
[1] <a href="http://grails.1312388.n4.nabble.com/Grails-dependency-sources-td2956849.html">Nabble Grails User Mailing-List - Grails Dependency Sources</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>927</wp:post_id>
		<wp:post_date>2010-11-18 17:08:58</wp:post_date>
		<wp:post_date_gmt>2010-11-18 16:08:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>grails-quickie-how-to-load-dependency-sources-and-javadocs</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[13220543]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1290096547]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>jabber_published</wp:meta_key>
		<wp:meta_value><![CDATA[1290096541]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>email_notification</wp:meta_key>
		<wp:meta_value><![CDATA[1290096543]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>reddit</wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"count";s:1:"0";s:4:"time";s:10:"1293719860";}]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>341</wp:comment_id>
		<wp:comment_author><![CDATA[Tweets that mention Grails Quickie: How to Load Dependency Sources and Javadocs « Grails Inside -- Topsy.com]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://topsy.com/andresteingress.wordpress.com/2010/11/18/grails-quickie-how-to-load-dependency-sources-and-javadocs/?utm_source=pingback&amp;utm_campaign=L2</wp:comment_author_url>
		<wp:comment_author_IP>208.74.66.43</wp:comment_author_IP>
		<wp:comment_date>2010-11-29 14:10:28</wp:comment_date>
		<wp:comment_date_gmt>2010-11-29 13:10:28</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] This post was mentioned on Twitter by Dierk König, pledbrook and T.Yamamoto, Falk Sippach. Falk Sippach said: RT @pledbrook: How to grab the source and javadoc JARs for your #grails dependencies: http://bit.ly/hpvRly [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>The Micro Framework Approach</title>
		<link>http://andresteingress.wordpress.com/2010/12/03/the-micro-framework-approach/</link>
		<pubDate>Fri, 03 Dec 2010 07:06:14 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[grails]]></category>

		<category domain="category" nicename="grails"><![CDATA[grails]]></category>

		<category><![CDATA[groovy]]></category>

		<category domain="category" nicename="groovy"><![CDATA[groovy]]></category>

		<category><![CDATA[hibernate]]></category>

		<category domain="category" nicename="hibernate"><![CDATA[hibernate]]></category>

		<category><![CDATA[patterns]]></category>

		<category domain="category" nicename="patterns"><![CDATA[patterns]]></category>

		<category><![CDATA[spring framework]]></category>

		<category domain="category" nicename="spring-framework"><![CDATA[spring framework]]></category>

		<guid isPermaLink="false">http://andresteingress.wordpress.com/?p=945</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://flattr.com/thing/92215/The-Micro-Framework-Approach" target="_blank">
<img src="http://api.flattr.com/button/flattr-badge-large.png" alt="Flattr this" title="Flattr this" border="0" align="right" /></a> The demand for Grails and Groovy is clearly raising these days - at least here in Austria and Germany. Although most of my workshops have their individual adaptions (depending on the previous knowledge and programming language experience of participants) there are parts which can more or less be found unmodified in every workshop: Groovy essentials/advanced topics and what I call <em>micro framework</em> examples. This article is about the idea behind micro framework examples and why I find them that useful as workshop examples.

<h4>What is a Micro Framework Example?</h4>

I strongly believe that true understanding on patterns behind frameworks like Hibernate and Spring can't easily be treat in a bunch of slides. Explaining patterns is one thing but to actually see how those are applied is another one. One approach I've found to be really useful in workshops is the use of micro framework examples. A micro framework example implements the core functionality behind a specific framework - reduced to the very fundamentals. One advantage to implement a micro framework example together with participants is to force triggering a thinking process of what functionality is needed and how it can be implemented. Another side-effect is that it allows to slightly introduce the original frameworks ubiquitous language simply by using the same class and method names.

Let me give you an example. The most threatening topic for many of my clients is to understand Hibernate and its persistence patterns. One approach to create a better understanding would be to implement a micro Hibernate framework example. This can be done in a simple Groovy script <em>MicroHibernate.groovy</em> which defines two classes and a simple test case. The first class implements the <em>registry</em> pattern and is called <code>SessionFactory</code>:


[sourcecode language="groovy"]
class SessionFactory {

    private def storage

    def SessionFactory(def storage)  {
        this.storage = storage
    }

    def newStorageConnection()  {
        return storage
    }
}
[/sourcecode] 

The <code>SessionFactory</code> acts as the main access point to get a reference to some storage connection. In the micro framework example this will simply be a <code>Map</code>. Dealing with SQL or even a real database would uselessly complicate the example and we want to concentrate on the core essentials. Let's go on to the next class which implements the <em>persistence context</em> pattern:

[sourcecode language="groovy"]

class Session {

    static Log log = LogFactory.getLog(Session)

    private def sessionFactory

    def Session(def sessionFactory) { this.sessionFactory = sessionFactory }

    def snapshots = [:] // a Map(Domain-Class, Map(Identifier, Properties))
    def identityMap = [:] // a Map(Domain-Class, Map(Identifier, ObjectRef))
    def modifiedPersistentObjects = [:] // a Map(Domain-Class, List(Identifier))
    
    def propertyChanged(def obj)  {
        if (!modifiedPersistentObjects[obj.getClass()]) modifiedPersistentObjects[obj.getClass()] = []

        modifiedPersistentObjects[obj.getClass()] &lt;&lt; obj.id

        log.info &quot;propertyChanged of object: ${obj} with id ${obj.id}&quot;
    }

    def load(Class&lt;?&gt; domainClassType, Long identifier)  {
        
        if (identityMap[domainClassType] &amp;&amp; identityMap[domainClassType][identifier])  {
            return identityMap[domainClassType][identifier]
        }
        
        def conn = sessionFactory.newStorageConnection()
        def loadedObj = conn[domainClassType][identifier]
        if (!loadedObj) throw new Exception(&quot;Object of type ${domainClassType} with id ${identifier} could not be found!&quot;)
        
        if (!snapshots[domainClassType]) snapshots[domainClassType] = [:]
        if (!identityMap[domainClassType]) identityMap[domainClassType] = [:]


        def properties = loadedObj.getProperty(&quot;props&quot;)
        snapshots[domainClassType][identifier] = properties.inject([:], { m, property -&gt; m[property] = loadedObj[property]; m })

        log.info &quot;create snapshot of ${domainClassType} id ${identifier} with properties ${snapshots[domainClassType][identifier]}&quot;

        identityMap[domainClassType][identifier] = loadedObj
        
        loadedObj.metaClass.getId = { -&gt; identifier } 
        loadedObj.metaClass.setProperty = { String name, Object arg -&gt;
            def metaProperty = delegate.metaClass.getMetaProperty(name)

            if (metaProperty)  {
                owner.propertyChanged(loadedObj)
                
                metaProperty.setProperty(delegate, arg)
            }
        }
        
        return loadedObj
    }
}

[/sourcecode]

A <code>Session</code> object can be used to retrieve already persistent objects and to persist so-called transient objects. I like to start by implementing the <code>load</code> method which loads a persistent object from the storage connection of the current session factory. Of course, this is not an example for Groovy beginners but with a little knowledge of MOP and with some programming guidance it should not be a big thing to understand what is going on. At the end let's define some test case which shows how both classes are actually used:

[sourcecode language="groovy"]
def storage = [:]

class Person {
    String name

    String toString() { name }

    static props = ['name']
}

storage[Person] = [:]
storage[Person][1 as Long] = new Person(name: 'Max Mustermann')
storage[Person][2 as Long] = new Person(name: 'Erika Mustermann')

def sessionFactory = new SessionFactory(storage)
def session = sessionFactory.newSession()

def person = session.load(Person, 1)
[/sourcecode]

Interestingly, even without considering SQL, DB connection handling, threading issues etc. participants already get a feeling of several Hibernate gotchas beginners otherwise often struggle with:

<ul>
<li>the first level cache
<li>the need for proxies or MOP modifications 
<li>Hibernate's use of object snapshots
<li>the IdentityMap pattern
<li>repeatable read transaction isolation level
<li>etc.
</ul> 

It is amazing how much can be explained by implementing some framework's core functionality in about 5 minutes. The <code>Session</code> functionality gets than extended by <code>flush</code>, <code>discard</code> and <code>save</code>/<code>delete</code> functionality. If programmers have been through the process of implementing such a micro Hibernate example they often get a basic and fundamental understanding of how an orm framework could work and what the main challenging problems are. By keeping the class and method names in sync with the concrete Hibernate implementations participants learn the framework's basic domain language.

<h4>GSamples - A Repository for Sharing Workshop Examples</h4>

The example mentioned above is available in a public github repository what I called <em>GSamples</em> [<a href="https://github.com/andresteingress/gsamples">0</a>], a collection of Groovy and Grails workshop examples. At the time of publishing this article it contains two micro framework examples, the other one is a simple dependency injection container. In addition, GSamples holds Groovy scripts dealing with <em>Groovy Essentials</em> and another one dealing with advanced Groovy topics like the <em>Meta-Object Protocol</em> and <em>Closures</em>. Feel free to extend, distribute or use it!

[0] <a href="https://github.com/andresteingress/gsamples">GSamples - https://github.com/andresteingress/gsamples</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>945</wp:post_id>
		<wp:post_date>2010-12-03 08:06:14</wp:post_date>
		<wp:post_date_gmt>2010-12-03 07:06:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-micro-framework-approach</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[13220543]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1291360424]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>jabber_published</wp:meta_key>
		<wp:meta_value><![CDATA[1291359978]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>email_notification</wp:meta_key>
		<wp:meta_value><![CDATA[1291359980]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>reddit</wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"count";s:1:"0";s:4:"time";s:10:"1294058013";}]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>344</wp:comment_id>
		<wp:comment_author><![CDATA[HamletDRC]]></wp:comment_author>
		<wp:comment_author_email>hamletdrc@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://hamletdarcy.blogspot.com</wp:comment_author_url>
		<wp:comment_author_IP>193.134.76.171</wp:comment_author_IP>
		<wp:comment_date>2010-12-03 09:03:55</wp:comment_date>
		<wp:comment_date_gmt>2010-12-03 08:03:55</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[This strikes me as an exercise in finding the 'telios' of a framework: http://hamletdarcy.blogspot.com/2007/12/aristotelian-metaphysics-and-software.html]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>380</wp:comment_id>
		<wp:comment_author><![CDATA[GContracts @ Grailspodcast Episode 118 &laquo; Grails Inside]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://andresteingress.wordpress.com/2010/12/21/gcontracts-grailspodcast-episode-118/</wp:comment_author_url>
		<wp:comment_author_IP>76.74.248.184</wp:comment_author_IP>
		<wp:comment_date>2010-12-21 20:45:48</wp:comment_date>
		<wp:comment_date_gmt>2010-12-21 19:45:48</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] I had the pleasure to chat with Glen Smith [1] about Groovy, Grails, GContracts [2] and some other stuff i recently blogged about [3]. [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>362</wp:comment_id>
		<wp:comment_author><![CDATA[The Micro Framework Approach]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://codebix.com/posts/post/149332/The-Micro-Framework-Approach</wp:comment_author_url>
		<wp:comment_author_IP>67.231.245.122</wp:comment_author_IP>
		<wp:comment_date>2010-12-11 07:58:21</wp:comment_date>
		<wp:comment_date_gmt>2010-12-11 06:58:21</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] individual adaptions (depending on the previous knowledge and programming language experience of...  [full post]    andresteingress     Grails Inside   grailsgroovyhibernatepatterns            0        0        0 [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>348</wp:comment_id>
		<wp:comment_author><![CDATA[Peter Niederwieser]]></wp:comment_author>
		<wp:comment_author_email>pniederw@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://spockframework.org</wp:comment_author_url>
		<wp:comment_author_IP>90.146.122.129</wp:comment_author_IP>
		<wp:comment_date>2010-12-04 23:54:16</wp:comment_date>
		<wp:comment_date_gmt>2010-12-04 22:54:16</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Strikes me as a - fantastic way to teach!]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>349</wp:comment_id>
		<wp:comment_author><![CDATA[Tweets that mention The Micro Framework Approach « Grails Inside -- Topsy.com]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://topsy.com/andresteingress.wordpress.com/2010/12/03/the-micro-framework-approach/?utm_source=pingback&amp;utm_campaign=L2</wp:comment_author_url>
		<wp:comment_author_IP>208.74.66.43</wp:comment_author_IP>
		<wp:comment_date>2010-12-05 00:09:55</wp:comment_date>
		<wp:comment_date_gmt>2010-12-04 23:09:55</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] This post was mentioned on Twitter by Richard Laksana, andre. andre said: The Micro Framework Approach - http://bit.ly/eHXmxT (dzone), http://bit.ly/g0eSVg (blog) #groovy #grails [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>Grailspodcast</title>
		<link>http://andresteingress.wordpress.com/2010/12/21/gcontracts-grailspodcast-episode-118/grailspodcast/</link>
		<pubDate>Tue, 21 Dec 2010 06:58:42 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<guid isPermaLink="false">http://andresteingress.files.wordpress.com/2010/12/grailspodcast.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>978</wp:post_id>
		<wp:post_date>2010-12-21 07:58:42</wp:post_date>
		<wp:post_date_gmt>2010-12-21 06:58:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>grailspodcast</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>977</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://andresteingress.files.wordpress.com/2010/12/grailspodcast.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/12/grailspodcast.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"950";s:6:"height";s:3:"200";s:14:"hwstring_small";s:23:"height='26' width='128'";s:4:"file";s:89:"/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/12/grailspodcast.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Jaxcenter Homepage</title>
		<link>http://andresteingress.wordpress.com/2010/12/21/functional-web-tests-with-geb-german/screen/</link>
		<pubDate>Tue, 21 Dec 2010 09:31:16 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<guid isPermaLink="false">http://andresteingress.files.wordpress.com/2010/12/screen.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>991</wp:post_id>
		<wp:post_date>2010-12-21 10:31:16</wp:post_date>
		<wp:post_date_gmt>2010-12-21 09:31:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>screen</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>987</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://andresteingress.files.wordpress.com/2010/12/screen.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/12/screen.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:5:{s:5:"width";s:3:"555";s:6:"height";s:3:"604";s:14:"hwstring_small";s:22:"height='96' width='88'";s:4:"file";s:82:"/home/wpcom/public_html/wp-content/blogs.dir/e00/12837921/files/2010/12/screen.png";s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Funktionale Webtests mit Geb @ jaxenter.de</title>
		<link>http://andresteingress.wordpress.com/2010/12/21/functional-web-tests-with-geb-german/</link>
		<pubDate>Tue, 21 Dec 2010 09:33:57 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[grails]]></category>

		<category domain="category" nicename="grails"><![CDATA[grails]]></category>

		<category><![CDATA[groovy]]></category>

		<category domain="category" nicename="groovy"><![CDATA[groovy]]></category>

		<guid isPermaLink="false">http://andresteingress.wordpress.com/?p=987</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://bit.ly/geb_jaxcenter"><img src="http://andresteingress.files.wordpress.com/2010/12/screen.png?w=275" alt="" title="Jaxenter Homepage" width="275" height="300" class="aligncenter size-medium wp-image-991" /></a>

Auf Jaxenter [<a href="http://bit.ly/geb_jaxcenter">0</a>] ist ein Artikel von mir über Geb [<a href="http://geb.codehaus.org">1</a>], einem neuen Webautomations- und Testframework auf Basis von Groovy und Seleniums WebDriver API, erschienen: 

<a href="http://bit.ly/geb_jaxcenter">Funktionale Webtests mit Geb</a>

Lesen und glücklich werden!

[0] <a href="http://bit.ly/geb_jaxcenter">Jaxenter - Funktionale Webtests mit Geb</a>
[1] <a href="http://geb.codehaus.org">Geb Homepage</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>987</wp:post_id>
		<wp:post_date>2010-12-21 10:33:57</wp:post_date>
		<wp:post_date_gmt>2010-12-21 09:33:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>functional-web-tests-with-geb-german</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[13220543]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1292933765:13220543]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>jabber_published</wp:meta_key>
		<wp:meta_value><![CDATA[1292924041]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>email_notification</wp:meta_key>
		<wp:meta_value><![CDATA[1292924042]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>reddit</wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"count";s:1:"0";s:4:"time";s:10:"1294052432";}]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>379</wp:comment_id>
		<wp:comment_author><![CDATA[Funktionale Webtests mit Geb @ jaxenter.de]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://codebix.com/posts/post/155123/Funktionale-Webtests-mit-Geb--jaxenterde</wp:comment_author_url>
		<wp:comment_author_IP>67.231.245.122</wp:comment_author_IP>
		<wp:comment_date>2010-12-21 11:42:38</wp:comment_date>
		<wp:comment_date_gmt>2010-12-21 10:42:38</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] Funktionale Webtests mit Geb Lesen und glücklich werden! [0] Jaxenter &#8211; Funktionale... [full post]    andresteingress     Grails Inside   grailsgroovy            0        0        0        0        [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>GContracts @ Grailspodcast Episode 118</title>
		<link>http://andresteingress.wordpress.com/2010/12/21/gcontracts-grailspodcast-episode-118/</link>
		<pubDate>Tue, 21 Dec 2010 19:45:34 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[announcement]]></category>

		<category domain="category" nicename="announcement"><![CDATA[announcement]]></category>

		<guid isPermaLink="false">http://andresteingress.wordpress.com/?p=977</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://grailspodcast.com/blog/id/240"><img src="http://andresteingress.files.wordpress.com/2010/12/grailspodcast.png" alt="" title="Grailspodcast" width="600" height="126" class="aligncenter size-full wp-image-978" /></a>

Guess who's on Grailspodcast Episode 118  [<a href="http://grailspodcast.com/blog/id/240">0</a>] ;-) Yeah, right. 

I had the pleasure to chat with Glen Smith [<a href="http://blogs.bytecode.com.au/glen/">1</a>] about Groovy, Grails, GContracts [<a href="https://github.com/andresteingress/gcontracts">2</a>] and some other stuff i recently blogged about [<a href="http://andresteingress.wordpress.com/2010/12/03/the-micro-framework-approach/">3</a>].

<a href="http://hansamann.podspot.de/files/grails_podcast_episode_118.mp3">This is the direct download link for the mp3 (58,6 MB)</a>
<a href="http://itunes.apple.com/us/podcast/grailspodcast-com-the-groovy/id177436087?uo=4" target="itunes_store">This is the iTunes link</a>

[0] <a href="http://grailspodcast.com/blog/id/240">Grailspodcast Homepage</a>
[1] <a href="http://blogs.bytecode.com.au/glen/">Glen Smith</a>
[2] <a href="https://github.com/andresteingress/gcontracts">GContracts @ Github</a>
[3] <a href="http://andresteingress.wordpress.com/2010/12/03/the-micro-framework-approach/">The Microframework Approach</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>977</wp:post_id>
		<wp:post_date>2010-12-21 20:45:34</wp:post_date>
		<wp:post_date_gmt>2010-12-21 19:45:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gcontracts-grailspodcast-episode-118</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[13220543]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1292960741:13220543]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>enclosure</wp:meta_key>
		<wp:meta_value><![CDATA[http://hansamann.podspot.de/files/grails_podcast_episode_118.mp3
61378388
audio/mpeg
]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>jabber_published</wp:meta_key>
		<wp:meta_value><![CDATA[1292960736]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>email_notification</wp:meta_key>
		<wp:meta_value><![CDATA[1292960737]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>reddit</wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"count";s:1:"0";s:4:"time";s:10:"1294096780";}]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>381</wp:comment_id>
		<wp:comment_author><![CDATA[GContracts @ Grailspodcast Episode 118]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://codebix.com/posts/post/156749/GContracts--Grailspodcast-Episode-118</wp:comment_author_url>
		<wp:comment_author_IP>67.231.245.122</wp:comment_author_IP>
		<wp:comment_date>2010-12-21 21:53:55</wp:comment_date>
		<wp:comment_date_gmt>2010-12-21 20:53:55</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] other stuff i recently blogged about [3]. This is the direct download link for the mp3 (58,6 MB)... [full post]    andresteingress     Grails Inside   announcement            0        0        0        0        [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>382</wp:comment_id>
		<wp:comment_author><![CDATA[Tweets that mention GContracts @ Grailspodcast Episode 118 « Grails Inside -- Topsy.com]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://topsy.com/andresteingress.wordpress.com/2010/12/21/gcontracts-grailspodcast-episode-118/?utm_source=pingback&amp;utm_campaign=L2</wp:comment_author_url>
		<wp:comment_author_IP>208.74.66.43</wp:comment_author_IP>
		<wp:comment_date>2010-12-21 22:01:23</wp:comment_date>
		<wp:comment_date_gmt>2010-12-21 21:01:23</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] This post was mentioned on Twitter by Carina Stumpf. Carina Stumpf said: RT @sternegross: Grailspodcast 118 - dedicated to #gcontracts http://bit.ly/eI4Xd2 #groovy #grails [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>Merry Christmas and a Happy New Year!</title>
		<link>http://andresteingress.wordpress.com/2010/12/23/merry-christmas-and-a-happy-new-year/</link>
		<pubDate>Thu, 23 Dec 2010 11:08:29 +0000</pubDate>
		<dc:creator><![CDATA[andresteingress]]></dc:creator>
		
		<category><![CDATA[groovy]]></category>

		<category domain="category" nicename="groovy"><![CDATA[groovy]]></category>

		<guid isPermaLink="false">http://andresteingress.wordpress.com/?p=973</guid>
		<description></description>
		<content:encoded><![CDATA[I wanted to thank all readers for their feedback and support. <a href="http://flattr.com/thing/105710/A-Groovy-Christmas-Present" target="_blank"><img src="http://api.flattr.com/button/flattr-badge-large.png" alt="Flattr this" align="right" title="Flattr this" border="0" /></a> Writing this blog makes a lot of fun and I am looking forward to future posts.

I wanted to make you a Groovy christmas present - just throw it in your preferred Groovy console and execute it :-)

[source language="groovy"]
String.metaClass.or = { other -&gt;
    return &quot;$delegate$other&quot;
}

String.metaClass.div = { other -&gt;
    return &quot; &quot; * other + delegate
}

[(','/11 | 'i' | '!' * 6 | ';' | ',' ),
('.'/6  | ',' | ';' | 'i' | '!' * 5 | '\'' | '`' | ',' | 'u' * 2 | ',' | 'o' | '$' * 2 | 'bo.'),
('!' * 7 / 4 | '\'.e' | '$' * 14 | '.' ),
('!' * 7 / 3 | ' ' | '$' * 17 | 'P' ),
('!' * 7 / 3 | ',`' | '$' * 8 | 'P&quot;&quot;`,,`&quot;' ),
('i' / 2 | '!' * 8 | ',' |'$' * 4 | '&quot;,oed' | '$' * 6 ),
('!' * 9 / 1 | '\'P&quot;.,e' | '$' * 8 | '&quot;\'?' ),
('`' / 1 | '!' * 8 | ' z$\'J' | '$' * 5 | '\'.,$bd$b,'),
('`' / 2 | '!' * 6 | 'f;$\'d' | '$' * 13 | 'P\',c,.' ),
('!' * 6 / 3 | ' $B,&quot;?' | '$' * 5 | 'P\',uggg' | '$' * 5 | 'P&quot;' ),
('!' * 6 / 3 | '.' | '$' * 4 | 'be.&quot;\'zd' | '$' * 3 | 'P&quot;.,uooe' | '$' * 2 | 'r' ),
('`' / 3 | '!' * 3 | '\',' | '$' * 9 | 'c,&quot;&quot;,ud' | '$' * 9 | 'L' ),
('!' * 2 / 4 | ' ' | '$' * 29),
('!\'j' / 4 | '$' * 29 ),
('d@@,?' / 2 | '$' * 28 | 'P'),
('?@@f:' / 2 | '$' * 27 | '\''),
('&quot;&quot;' / 3 | ' `' | '$' * 26 | 'F'),
('`3' / 7 | '$' * 22 | 'F' ),
('`&quot;' / 10 | '$' * 4 | 'P?' | '$' * 7 | '&quot;`' ),
('`&quot;&quot;' / 19), &quot;Merry Christmas and a Happy New Year!&quot;].each { println it }  
[/source] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>973</wp:post_id>
		<wp:post_date>2010-12-23 12:08:29</wp:post_date>
		<wp:post_date_gmt>2010-12-23 11:08:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>merry-christmas-and-a-happy-new-year</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[13220543]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1293102984:13220543]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>jabber_published</wp:meta_key>
		<wp:meta_value><![CDATA[1293102509]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>email_notification</wp:meta_key>
		<wp:meta_value><![CDATA[1293102510]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>reddit</wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:5:"count";s:1:"0";s:4:"time";s:10:"1294140610";}]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>385</wp:comment_id>
		<wp:comment_author><![CDATA[HamletDRC]]></wp:comment_author>
		<wp:comment_author_email>hamletdrc@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://hamletdarcy.blogspot.com</wp:comment_author_url>
		<wp:comment_author_IP>193.134.76.171</wp:comment_author_IP>
		<wp:comment_date>2010-12-23 13:14:44</wp:comment_date>
		<wp:comment_date_gmt>2010-12-23 12:14:44</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[I GIVE UP!!! 

What in the world is this a picture of?]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>386</wp:comment_id>
		<wp:comment_author><![CDATA[Merry Christmas and a Happy New Year!]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://codebix.com/posts/post/159022/Merry-Christmas-and-a-Happy-New-Year</wp:comment_author_url>
		<wp:comment_author_IP>67.231.245.122</wp:comment_author_IP>
		<wp:comment_date>2010-12-23 13:34:27</wp:comment_date>
		<wp:comment_date_gmt>2010-12-23 12:34:27</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] make you a Groovy christmas present &#8211; just throw it in your preferred Groovy console and... [full post]    andresteingress     Grails Inside   groovy            0        0        0        0        0      [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>387</wp:comment_id>
		<wp:comment_author><![CDATA[Tweets that mention Merry Christmas and a Happy New Year! « Grails Inside -- Topsy.com]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://topsy.com/andresteingress.wordpress.com/2010/12/23/merry-christmas-and-a-happy-new-year/?utm_source=pingback&amp;utm_campaign=L2</wp:comment_author_url>
		<wp:comment_author_IP>208.74.66.43</wp:comment_author_IP>
		<wp:comment_date>2010-12-23 14:15:53</wp:comment_date>
		<wp:comment_date_gmt>2010-12-23 13:15:53</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] This post was mentioned on Twitter by andre. andre said: a #groovy christmas to everyone! :-) http://bit.ly/emW9VT (blog) #groovy #grails #gcontracts [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>388</wp:comment_id>
		<wp:comment_author><![CDATA[JS Bournival]]></wp:comment_author>
		<wp:comment_author_email>js@jipiju.com</wp:comment_author_email>
		<wp:comment_author_url>http://js.jipiju.com</wp:comment_author_url>
		<wp:comment_author_IP>70.83.151.183</wp:comment_author_IP>
		<wp:comment_date>2010-12-23 16:53:51</wp:comment_date>
		<wp:comment_date_gmt>2010-12-23 15:53:51</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Ooooh ... It's a cute santa ... I'm so touched!]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>385</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
	</channel>
</rss>
